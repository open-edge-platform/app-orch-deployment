// Package restClient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package restClient

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ResourceV2EndpointsServiceListAppEndpoints request
	ResourceV2EndpointsServiceListAppEndpoints(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourceV2PodServiceDeletePod request
	ResourceV2PodServiceDeletePod(ctx context.Context, clusterId string, namespace string, podName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourceV2VirtualMachineServiceRestartVirtualMachine request
	ResourceV2VirtualMachineServiceRestartVirtualMachine(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourceV2VirtualMachineServiceStartVirtualMachine request
	ResourceV2VirtualMachineServiceStartVirtualMachine(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourceV2VirtualMachineServiceStopVirtualMachine request
	ResourceV2VirtualMachineServiceStopVirtualMachine(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourceV2VirtualMachineServiceGetVNC request
	ResourceV2VirtualMachineServiceGetVNC(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourceV2AppWorkloadServiceListAppWorkloads request
	ResourceV2AppWorkloadServiceListAppWorkloads(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ResourceV2EndpointsServiceListAppEndpoints(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourceV2EndpointsServiceListAppEndpointsRequest(c.Server, appId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourceV2PodServiceDeletePod(ctx context.Context, clusterId string, namespace string, podName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourceV2PodServiceDeletePodRequest(c.Server, clusterId, namespace, podName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourceV2VirtualMachineServiceRestartVirtualMachine(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourceV2VirtualMachineServiceRestartVirtualMachineRequest(c.Server, appId, clusterId, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourceV2VirtualMachineServiceStartVirtualMachine(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourceV2VirtualMachineServiceStartVirtualMachineRequest(c.Server, appId, clusterId, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourceV2VirtualMachineServiceStopVirtualMachine(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourceV2VirtualMachineServiceStopVirtualMachineRequest(c.Server, appId, clusterId, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourceV2VirtualMachineServiceGetVNC(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourceV2VirtualMachineServiceGetVNCRequest(c.Server, appId, clusterId, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourceV2AppWorkloadServiceListAppWorkloads(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourceV2AppWorkloadServiceListAppWorkloadsRequest(c.Server, appId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewResourceV2EndpointsServiceListAppEndpointsRequest generates requests for ResourceV2EndpointsServiceListAppEndpoints
func NewResourceV2EndpointsServiceListAppEndpointsRequest(server string, appId string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/endpoints/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResourceV2PodServiceDeletePodRequest generates requests for ResourceV2PodServiceDeletePod
func NewResourceV2PodServiceDeletePodRequest(server string, clusterId string, namespace string, podName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pod_name", runtime.ParamLocationPath, podName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/workloads/pods/%s/%s/%s/delete", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResourceV2VirtualMachineServiceRestartVirtualMachineRequest generates requests for ResourceV2VirtualMachineServiceRestartVirtualMachine
func NewResourceV2VirtualMachineServiceRestartVirtualMachineRequest(server string, appId string, clusterId string, virtualMachineId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "virtual_machine_id", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/workloads/virtual-machines/%s/%s/%s/restart", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResourceV2VirtualMachineServiceStartVirtualMachineRequest generates requests for ResourceV2VirtualMachineServiceStartVirtualMachine
func NewResourceV2VirtualMachineServiceStartVirtualMachineRequest(server string, appId string, clusterId string, virtualMachineId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "virtual_machine_id", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/workloads/virtual-machines/%s/%s/%s/start", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResourceV2VirtualMachineServiceStopVirtualMachineRequest generates requests for ResourceV2VirtualMachineServiceStopVirtualMachine
func NewResourceV2VirtualMachineServiceStopVirtualMachineRequest(server string, appId string, clusterId string, virtualMachineId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "virtual_machine_id", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/workloads/virtual-machines/%s/%s/%s/stop", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResourceV2VirtualMachineServiceGetVNCRequest generates requests for ResourceV2VirtualMachineServiceGetVNC
func NewResourceV2VirtualMachineServiceGetVNCRequest(server string, appId string, clusterId string, virtualMachineId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "virtual_machine_id", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/workloads/virtual-machines/%s/%s/%s/vnc", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResourceV2AppWorkloadServiceListAppWorkloadsRequest generates requests for ResourceV2AppWorkloadServiceListAppWorkloads
func NewResourceV2AppWorkloadServiceListAppWorkloadsRequest(server string, appId string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/workloads/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ResourceV2EndpointsServiceListAppEndpointsWithResponse request
	ResourceV2EndpointsServiceListAppEndpointsWithResponse(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*ResourceV2EndpointsServiceListAppEndpointsResponse, error)

	// ResourceV2PodServiceDeletePodWithResponse request
	ResourceV2PodServiceDeletePodWithResponse(ctx context.Context, clusterId string, namespace string, podName string, reqEditors ...RequestEditorFn) (*ResourceV2PodServiceDeletePodResponse, error)

	// ResourceV2VirtualMachineServiceRestartVirtualMachineWithResponse request
	ResourceV2VirtualMachineServiceRestartVirtualMachineWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ResourceV2VirtualMachineServiceRestartVirtualMachineResponse, error)

	// ResourceV2VirtualMachineServiceStartVirtualMachineWithResponse request
	ResourceV2VirtualMachineServiceStartVirtualMachineWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ResourceV2VirtualMachineServiceStartVirtualMachineResponse, error)

	// ResourceV2VirtualMachineServiceStopVirtualMachineWithResponse request
	ResourceV2VirtualMachineServiceStopVirtualMachineWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ResourceV2VirtualMachineServiceStopVirtualMachineResponse, error)

	// ResourceV2VirtualMachineServiceGetVNCWithResponse request
	ResourceV2VirtualMachineServiceGetVNCWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ResourceV2VirtualMachineServiceGetVNCResponse, error)

	// ResourceV2AppWorkloadServiceListAppWorkloadsWithResponse request
	ResourceV2AppWorkloadServiceListAppWorkloadsWithResponse(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*ResourceV2AppWorkloadServiceListAppWorkloadsResponse, error)
}

type ResourceV2EndpointsServiceListAppEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceV2ListAppEndpointsResponse
}

// Status returns HTTPResponse.Status
func (r ResourceV2EndpointsServiceListAppEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourceV2EndpointsServiceListAppEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourceV2PodServiceDeletePodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceV2DeletePodResponse
}

// Status returns HTTPResponse.Status
func (r ResourceV2PodServiceDeletePodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourceV2PodServiceDeletePodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourceV2VirtualMachineServiceRestartVirtualMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceV2RestartVirtualMachineResponse
}

// Status returns HTTPResponse.Status
func (r ResourceV2VirtualMachineServiceRestartVirtualMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourceV2VirtualMachineServiceRestartVirtualMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourceV2VirtualMachineServiceStartVirtualMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceV2StartVirtualMachineResponse
}

// Status returns HTTPResponse.Status
func (r ResourceV2VirtualMachineServiceStartVirtualMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourceV2VirtualMachineServiceStartVirtualMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourceV2VirtualMachineServiceStopVirtualMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceV2StopVirtualMachineResponse
}

// Status returns HTTPResponse.Status
func (r ResourceV2VirtualMachineServiceStopVirtualMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourceV2VirtualMachineServiceStopVirtualMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourceV2VirtualMachineServiceGetVNCResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceV2GetVNCResponse
}

// Status returns HTTPResponse.Status
func (r ResourceV2VirtualMachineServiceGetVNCResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourceV2VirtualMachineServiceGetVNCResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourceV2AppWorkloadServiceListAppWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceV2ListAppWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r ResourceV2AppWorkloadServiceListAppWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourceV2AppWorkloadServiceListAppWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ResourceV2EndpointsServiceListAppEndpointsWithResponse request returning *ResourceV2EndpointsServiceListAppEndpointsResponse
func (c *ClientWithResponses) ResourceV2EndpointsServiceListAppEndpointsWithResponse(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*ResourceV2EndpointsServiceListAppEndpointsResponse, error) {
	rsp, err := c.ResourceV2EndpointsServiceListAppEndpoints(ctx, appId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourceV2EndpointsServiceListAppEndpointsResponse(rsp)
}

// ResourceV2PodServiceDeletePodWithResponse request returning *ResourceV2PodServiceDeletePodResponse
func (c *ClientWithResponses) ResourceV2PodServiceDeletePodWithResponse(ctx context.Context, clusterId string, namespace string, podName string, reqEditors ...RequestEditorFn) (*ResourceV2PodServiceDeletePodResponse, error) {
	rsp, err := c.ResourceV2PodServiceDeletePod(ctx, clusterId, namespace, podName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourceV2PodServiceDeletePodResponse(rsp)
}

// ResourceV2VirtualMachineServiceRestartVirtualMachineWithResponse request returning *ResourceV2VirtualMachineServiceRestartVirtualMachineResponse
func (c *ClientWithResponses) ResourceV2VirtualMachineServiceRestartVirtualMachineWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ResourceV2VirtualMachineServiceRestartVirtualMachineResponse, error) {
	rsp, err := c.ResourceV2VirtualMachineServiceRestartVirtualMachine(ctx, appId, clusterId, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourceV2VirtualMachineServiceRestartVirtualMachineResponse(rsp)
}

// ResourceV2VirtualMachineServiceStartVirtualMachineWithResponse request returning *ResourceV2VirtualMachineServiceStartVirtualMachineResponse
func (c *ClientWithResponses) ResourceV2VirtualMachineServiceStartVirtualMachineWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ResourceV2VirtualMachineServiceStartVirtualMachineResponse, error) {
	rsp, err := c.ResourceV2VirtualMachineServiceStartVirtualMachine(ctx, appId, clusterId, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourceV2VirtualMachineServiceStartVirtualMachineResponse(rsp)
}

// ResourceV2VirtualMachineServiceStopVirtualMachineWithResponse request returning *ResourceV2VirtualMachineServiceStopVirtualMachineResponse
func (c *ClientWithResponses) ResourceV2VirtualMachineServiceStopVirtualMachineWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ResourceV2VirtualMachineServiceStopVirtualMachineResponse, error) {
	rsp, err := c.ResourceV2VirtualMachineServiceStopVirtualMachine(ctx, appId, clusterId, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourceV2VirtualMachineServiceStopVirtualMachineResponse(rsp)
}

// ResourceV2VirtualMachineServiceGetVNCWithResponse request returning *ResourceV2VirtualMachineServiceGetVNCResponse
func (c *ClientWithResponses) ResourceV2VirtualMachineServiceGetVNCWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ResourceV2VirtualMachineServiceGetVNCResponse, error) {
	rsp, err := c.ResourceV2VirtualMachineServiceGetVNC(ctx, appId, clusterId, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourceV2VirtualMachineServiceGetVNCResponse(rsp)
}

// ResourceV2AppWorkloadServiceListAppWorkloadsWithResponse request returning *ResourceV2AppWorkloadServiceListAppWorkloadsResponse
func (c *ClientWithResponses) ResourceV2AppWorkloadServiceListAppWorkloadsWithResponse(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*ResourceV2AppWorkloadServiceListAppWorkloadsResponse, error) {
	rsp, err := c.ResourceV2AppWorkloadServiceListAppWorkloads(ctx, appId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourceV2AppWorkloadServiceListAppWorkloadsResponse(rsp)
}

// ParseResourceV2EndpointsServiceListAppEndpointsResponse parses an HTTP response from a ResourceV2EndpointsServiceListAppEndpointsWithResponse call
func ParseResourceV2EndpointsServiceListAppEndpointsResponse(rsp *http.Response) (*ResourceV2EndpointsServiceListAppEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourceV2EndpointsServiceListAppEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceV2ListAppEndpointsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourceV2PodServiceDeletePodResponse parses an HTTP response from a ResourceV2PodServiceDeletePodWithResponse call
func ParseResourceV2PodServiceDeletePodResponse(rsp *http.Response) (*ResourceV2PodServiceDeletePodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourceV2PodServiceDeletePodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceV2DeletePodResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourceV2VirtualMachineServiceRestartVirtualMachineResponse parses an HTTP response from a ResourceV2VirtualMachineServiceRestartVirtualMachineWithResponse call
func ParseResourceV2VirtualMachineServiceRestartVirtualMachineResponse(rsp *http.Response) (*ResourceV2VirtualMachineServiceRestartVirtualMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourceV2VirtualMachineServiceRestartVirtualMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceV2RestartVirtualMachineResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourceV2VirtualMachineServiceStartVirtualMachineResponse parses an HTTP response from a ResourceV2VirtualMachineServiceStartVirtualMachineWithResponse call
func ParseResourceV2VirtualMachineServiceStartVirtualMachineResponse(rsp *http.Response) (*ResourceV2VirtualMachineServiceStartVirtualMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourceV2VirtualMachineServiceStartVirtualMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceV2StartVirtualMachineResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourceV2VirtualMachineServiceStopVirtualMachineResponse parses an HTTP response from a ResourceV2VirtualMachineServiceStopVirtualMachineWithResponse call
func ParseResourceV2VirtualMachineServiceStopVirtualMachineResponse(rsp *http.Response) (*ResourceV2VirtualMachineServiceStopVirtualMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourceV2VirtualMachineServiceStopVirtualMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceV2StopVirtualMachineResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourceV2VirtualMachineServiceGetVNCResponse parses an HTTP response from a ResourceV2VirtualMachineServiceGetVNCWithResponse call
func ParseResourceV2VirtualMachineServiceGetVNCResponse(rsp *http.Response) (*ResourceV2VirtualMachineServiceGetVNCResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourceV2VirtualMachineServiceGetVNCResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceV2GetVNCResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourceV2AppWorkloadServiceListAppWorkloadsResponse parses an HTTP response from a ResourceV2AppWorkloadServiceListAppWorkloadsWithResponse call
func ParseResourceV2AppWorkloadServiceListAppWorkloadsResponse(rsp *http.Response) (*ResourceV2AppWorkloadServiceListAppWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourceV2AppWorkloadServiceListAppWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceV2ListAppWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
