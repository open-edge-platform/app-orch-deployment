// Package restClient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package restClient

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// EndpointsServiceListAppEndpoints request
	EndpointsServiceListAppEndpoints(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PodServiceDeletePod request
	PodServiceDeletePod(ctx context.Context, clusterId string, namespace string, podName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VirtualMachineServiceRestartVirtualMachine request
	VirtualMachineServiceRestartVirtualMachine(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VirtualMachineServiceStartVirtualMachine request
	VirtualMachineServiceStartVirtualMachine(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VirtualMachineServiceStopVirtualMachine request
	VirtualMachineServiceStopVirtualMachine(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VirtualMachineServiceGetVNC request
	VirtualMachineServiceGetVNC(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppWorkloadServiceListAppWorkloads request
	AppWorkloadServiceListAppWorkloads(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) EndpointsServiceListAppEndpoints(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsServiceListAppEndpointsRequest(c.Server, appId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PodServiceDeletePod(ctx context.Context, clusterId string, namespace string, podName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPodServiceDeletePodRequest(c.Server, clusterId, namespace, podName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VirtualMachineServiceRestartVirtualMachine(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVirtualMachineServiceRestartVirtualMachineRequest(c.Server, appId, clusterId, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VirtualMachineServiceStartVirtualMachine(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVirtualMachineServiceStartVirtualMachineRequest(c.Server, appId, clusterId, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VirtualMachineServiceStopVirtualMachine(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVirtualMachineServiceStopVirtualMachineRequest(c.Server, appId, clusterId, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VirtualMachineServiceGetVNC(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVirtualMachineServiceGetVNCRequest(c.Server, appId, clusterId, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppWorkloadServiceListAppWorkloads(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppWorkloadServiceListAppWorkloadsRequest(c.Server, appId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewEndpointsServiceListAppEndpointsRequest generates requests for EndpointsServiceListAppEndpoints
func NewEndpointsServiceListAppEndpointsRequest(server string, appId string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/endpoints/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPodServiceDeletePodRequest generates requests for PodServiceDeletePod
func NewPodServiceDeletePodRequest(server string, clusterId string, namespace string, podName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "podName", runtime.ParamLocationPath, podName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/workloads/pods/%s/%s/%s/delete", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVirtualMachineServiceRestartVirtualMachineRequest generates requests for VirtualMachineServiceRestartVirtualMachine
func NewVirtualMachineServiceRestartVirtualMachineRequest(server string, appId string, clusterId string, virtualMachineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/workloads/virtual-machines/%s/%s/%s/restart", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVirtualMachineServiceStartVirtualMachineRequest generates requests for VirtualMachineServiceStartVirtualMachine
func NewVirtualMachineServiceStartVirtualMachineRequest(server string, appId string, clusterId string, virtualMachineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/workloads/virtual-machines/%s/%s/%s/start", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVirtualMachineServiceStopVirtualMachineRequest generates requests for VirtualMachineServiceStopVirtualMachine
func NewVirtualMachineServiceStopVirtualMachineRequest(server string, appId string, clusterId string, virtualMachineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/workloads/virtual-machines/%s/%s/%s/stop", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVirtualMachineServiceGetVNCRequest generates requests for VirtualMachineServiceGetVNC
func NewVirtualMachineServiceGetVNCRequest(server string, appId string, clusterId string, virtualMachineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/workloads/virtual-machines/%s/%s/%s/vnc", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppWorkloadServiceListAppWorkloadsRequest generates requests for AppWorkloadServiceListAppWorkloads
func NewAppWorkloadServiceListAppWorkloadsRequest(server string, appId string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resource.orchestrator.apis/v2/workloads/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// EndpointsServiceListAppEndpointsWithResponse request
	EndpointsServiceListAppEndpointsWithResponse(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*EndpointsServiceListAppEndpointsResponse, error)

	// PodServiceDeletePodWithResponse request
	PodServiceDeletePodWithResponse(ctx context.Context, clusterId string, namespace string, podName string, reqEditors ...RequestEditorFn) (*PodServiceDeletePodResponse, error)

	// VirtualMachineServiceRestartVirtualMachineWithResponse request
	VirtualMachineServiceRestartVirtualMachineWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*VirtualMachineServiceRestartVirtualMachineResponse, error)

	// VirtualMachineServiceStartVirtualMachineWithResponse request
	VirtualMachineServiceStartVirtualMachineWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*VirtualMachineServiceStartVirtualMachineResponse, error)

	// VirtualMachineServiceStopVirtualMachineWithResponse request
	VirtualMachineServiceStopVirtualMachineWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*VirtualMachineServiceStopVirtualMachineResponse, error)

	// VirtualMachineServiceGetVNCWithResponse request
	VirtualMachineServiceGetVNCWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*VirtualMachineServiceGetVNCResponse, error)

	// AppWorkloadServiceListAppWorkloadsWithResponse request
	AppWorkloadServiceListAppWorkloadsWithResponse(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*AppWorkloadServiceListAppWorkloadsResponse, error)
}

type EndpointsServiceListAppEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAppEndpointsResponse
}

// Status returns HTTPResponse.Status
func (r EndpointsServiceListAppEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsServiceListAppEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PodServiceDeletePodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeletePodResponse
}

// Status returns HTTPResponse.Status
func (r PodServiceDeletePodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PodServiceDeletePodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VirtualMachineServiceRestartVirtualMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RestartVirtualMachineResponse
}

// Status returns HTTPResponse.Status
func (r VirtualMachineServiceRestartVirtualMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VirtualMachineServiceRestartVirtualMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VirtualMachineServiceStartVirtualMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StartVirtualMachineResponse
}

// Status returns HTTPResponse.Status
func (r VirtualMachineServiceStartVirtualMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VirtualMachineServiceStartVirtualMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VirtualMachineServiceStopVirtualMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StopVirtualMachineResponse
}

// Status returns HTTPResponse.Status
func (r VirtualMachineServiceStopVirtualMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VirtualMachineServiceStopVirtualMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VirtualMachineServiceGetVNCResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetVNCResponse
}

// Status returns HTTPResponse.Status
func (r VirtualMachineServiceGetVNCResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VirtualMachineServiceGetVNCResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppWorkloadServiceListAppWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAppWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r AppWorkloadServiceListAppWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppWorkloadServiceListAppWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// EndpointsServiceListAppEndpointsWithResponse request returning *EndpointsServiceListAppEndpointsResponse
func (c *ClientWithResponses) EndpointsServiceListAppEndpointsWithResponse(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*EndpointsServiceListAppEndpointsResponse, error) {
	rsp, err := c.EndpointsServiceListAppEndpoints(ctx, appId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsServiceListAppEndpointsResponse(rsp)
}

// PodServiceDeletePodWithResponse request returning *PodServiceDeletePodResponse
func (c *ClientWithResponses) PodServiceDeletePodWithResponse(ctx context.Context, clusterId string, namespace string, podName string, reqEditors ...RequestEditorFn) (*PodServiceDeletePodResponse, error) {
	rsp, err := c.PodServiceDeletePod(ctx, clusterId, namespace, podName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePodServiceDeletePodResponse(rsp)
}

// VirtualMachineServiceRestartVirtualMachineWithResponse request returning *VirtualMachineServiceRestartVirtualMachineResponse
func (c *ClientWithResponses) VirtualMachineServiceRestartVirtualMachineWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*VirtualMachineServiceRestartVirtualMachineResponse, error) {
	rsp, err := c.VirtualMachineServiceRestartVirtualMachine(ctx, appId, clusterId, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVirtualMachineServiceRestartVirtualMachineResponse(rsp)
}

// VirtualMachineServiceStartVirtualMachineWithResponse request returning *VirtualMachineServiceStartVirtualMachineResponse
func (c *ClientWithResponses) VirtualMachineServiceStartVirtualMachineWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*VirtualMachineServiceStartVirtualMachineResponse, error) {
	rsp, err := c.VirtualMachineServiceStartVirtualMachine(ctx, appId, clusterId, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVirtualMachineServiceStartVirtualMachineResponse(rsp)
}

// VirtualMachineServiceStopVirtualMachineWithResponse request returning *VirtualMachineServiceStopVirtualMachineResponse
func (c *ClientWithResponses) VirtualMachineServiceStopVirtualMachineWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*VirtualMachineServiceStopVirtualMachineResponse, error) {
	rsp, err := c.VirtualMachineServiceStopVirtualMachine(ctx, appId, clusterId, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVirtualMachineServiceStopVirtualMachineResponse(rsp)
}

// VirtualMachineServiceGetVNCWithResponse request returning *VirtualMachineServiceGetVNCResponse
func (c *ClientWithResponses) VirtualMachineServiceGetVNCWithResponse(ctx context.Context, appId string, clusterId string, virtualMachineId string, reqEditors ...RequestEditorFn) (*VirtualMachineServiceGetVNCResponse, error) {
	rsp, err := c.VirtualMachineServiceGetVNC(ctx, appId, clusterId, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVirtualMachineServiceGetVNCResponse(rsp)
}

// AppWorkloadServiceListAppWorkloadsWithResponse request returning *AppWorkloadServiceListAppWorkloadsResponse
func (c *ClientWithResponses) AppWorkloadServiceListAppWorkloadsWithResponse(ctx context.Context, appId string, clusterId string, reqEditors ...RequestEditorFn) (*AppWorkloadServiceListAppWorkloadsResponse, error) {
	rsp, err := c.AppWorkloadServiceListAppWorkloads(ctx, appId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppWorkloadServiceListAppWorkloadsResponse(rsp)
}

// ParseEndpointsServiceListAppEndpointsResponse parses an HTTP response from a EndpointsServiceListAppEndpointsWithResponse call
func ParseEndpointsServiceListAppEndpointsResponse(rsp *http.Response) (*EndpointsServiceListAppEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsServiceListAppEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAppEndpointsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePodServiceDeletePodResponse parses an HTTP response from a PodServiceDeletePodWithResponse call
func ParsePodServiceDeletePodResponse(rsp *http.Response) (*PodServiceDeletePodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PodServiceDeletePodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeletePodResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVirtualMachineServiceRestartVirtualMachineResponse parses an HTTP response from a VirtualMachineServiceRestartVirtualMachineWithResponse call
func ParseVirtualMachineServiceRestartVirtualMachineResponse(rsp *http.Response) (*VirtualMachineServiceRestartVirtualMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VirtualMachineServiceRestartVirtualMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RestartVirtualMachineResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVirtualMachineServiceStartVirtualMachineResponse parses an HTTP response from a VirtualMachineServiceStartVirtualMachineWithResponse call
func ParseVirtualMachineServiceStartVirtualMachineResponse(rsp *http.Response) (*VirtualMachineServiceStartVirtualMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VirtualMachineServiceStartVirtualMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StartVirtualMachineResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVirtualMachineServiceStopVirtualMachineResponse parses an HTTP response from a VirtualMachineServiceStopVirtualMachineWithResponse call
func ParseVirtualMachineServiceStopVirtualMachineResponse(rsp *http.Response) (*VirtualMachineServiceStopVirtualMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VirtualMachineServiceStopVirtualMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StopVirtualMachineResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVirtualMachineServiceGetVNCResponse parses an HTTP response from a VirtualMachineServiceGetVNCWithResponse call
func ParseVirtualMachineServiceGetVNCResponse(rsp *http.Response) (*VirtualMachineServiceGetVNCResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VirtualMachineServiceGetVNCResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetVNCResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAppWorkloadServiceListAppWorkloadsResponse parses an HTTP response from a AppWorkloadServiceListAppWorkloadsWithResponse call
func ParseAppWorkloadServiceListAppWorkloadsResponse(rsp *http.Response) (*AppWorkloadServiceListAppWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppWorkloadServiceListAppWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAppWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
