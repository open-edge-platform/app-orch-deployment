// Package restClient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package restClient

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AdminStatusState.
const (
	STATEDOWN AdminStatusState = "STATE_DOWN"
	STATEUP   AdminStatusState = "STATE_UP"
)

// Defines values for AppWorkloadType.
const (
	TYPEPOD            AppWorkloadType = "TYPE_POD"
	TYPEVIRTUALMACHINE AppWorkloadType = "TYPE_VIRTUAL_MACHINE"
)

// Defines values for EndpointStatusState.
const (
	STATENOTREADY EndpointStatusState = "STATE_NOT_READY"
	STATEREADY    EndpointStatusState = "STATE_READY"
)

// Defines values for PodStatusState.
const (
	PodStatusStateSTATEFAILED    PodStatusState = "STATE_FAILED"
	PodStatusStateSTATEPENDING   PodStatusState = "STATE_PENDING"
	PodStatusStateSTATERUNNING   PodStatusState = "STATE_RUNNING"
	PodStatusStateSTATESUCCEEDED PodStatusState = "STATE_SUCCEEDED"
)

// Defines values for VirtualMachineStatusState.
const (
	VirtualMachineStatusStateSTATECRASHLOOPBACKOFF        VirtualMachineStatusState = "STATE_CRASH_LOOP_BACKOFF"
	VirtualMachineStatusStateSTATEERRORDATAVOLUME         VirtualMachineStatusState = "STATE_ERROR_DATA_VOLUME"
	VirtualMachineStatusStateSTATEERRORIMAGEPULL          VirtualMachineStatusState = "STATE_ERROR_IMAGE_PULL"
	VirtualMachineStatusStateSTATEERRORIMAGEPULLBACKOFF   VirtualMachineStatusState = "STATE_ERROR_IMAGE_PULL_BACKOFF"
	VirtualMachineStatusStateSTATEERRORPVCNOTFOUND        VirtualMachineStatusState = "STATE_ERROR_PVC_NOT_FOUND"
	VirtualMachineStatusStateSTATEERRORUNSCHEDULABLE      VirtualMachineStatusState = "STATE_ERROR_UNSCHEDULABLE"
	VirtualMachineStatusStateSTATEMIGRATING               VirtualMachineStatusState = "STATE_MIGRATING"
	VirtualMachineStatusStateSTATEPAUSED                  VirtualMachineStatusState = "STATE_PAUSED"
	VirtualMachineStatusStateSTATEPROVISIONING            VirtualMachineStatusState = "STATE_PROVISIONING"
	VirtualMachineStatusStateSTATERUNNING                 VirtualMachineStatusState = "STATE_RUNNING"
	VirtualMachineStatusStateSTATESTARTING                VirtualMachineStatusState = "STATE_STARTING"
	VirtualMachineStatusStateSTATESTOPPED                 VirtualMachineStatusState = "STATE_STOPPED"
	VirtualMachineStatusStateSTATESTOPPING                VirtualMachineStatusState = "STATE_STOPPING"
	VirtualMachineStatusStateSTATETERMINATING             VirtualMachineStatusState = "STATE_TERMINATING"
	VirtualMachineStatusStateSTATEWAITINGFORVOLUMEBINDING VirtualMachineStatusState = "STATE_WAITING_FOR_VOLUME_BINDING"
)

// AdminStatus Represents the associated VirtualMachineInstance's state, either created (up state) or not (down state).
type AdminStatus struct {
	// State State information
	State *AdminStatusState `json:"state,omitempty"`
}

// AdminStatusState State information
type AdminStatusState string

// AppEndpoint Represents an endpoint for accessing the application outside of a cluster.
type AppEndpoint struct {
	// EndpointStatus Status of the endpoint.
	EndpointStatus *EndpointStatus `json:"endpointStatus,omitempty"`

	// Fqdns Fully qualified domain name (FQDN) for external access.
	Fqdns *[]Fqdn `json:"fqdns,omitempty"`

	// Id Endpoint object UID (e.g. service or ingress UID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Endpoint name
	Name *string `json:"name,omitempty"`

	// Ports List of ports exposed by a service for external access
	Ports *[]Port `json:"ports,omitempty"`
}

// AppWorkload AppWorkload a high-level abstraction for representing different types of application workloads. The application workloads can be virtual machine-based or container-based.
type AppWorkload struct {
	// CreateTime The time when the workload is created.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Id Workload UUID
	Id openapi_types.UUID `json:"id"`

	// Name Workload name
	Name string `json:"name"`

	// Namespace Namespace where the workload is created.
	Namespace *string `json:"namespace,omitempty"`

	// Pod Represents a pod resource.
	Pod *Pod `json:"pod,omitempty"`

	// Type Application workload type, e.g. virtual machine and pod.
	Type *AppWorkloadType `json:"type,omitempty"`

	// VirtualMachine Represents a virtual machine.
	VirtualMachine *VirtualMachine `json:"virtualMachine,omitempty"`

	// WorkloadReady Ready status to determines if a workload is fully functional or not.
	WorkloadReady *bool `json:"workloadReady,omitempty"`
}

// AppWorkloadType Application workload type, e.g. virtual machine and pod.
type AppWorkloadType string

// Container Represents a container resource.
type Container struct {
	// ImageName image_name container image name
	ImageName *string `json:"imageName,omitempty"`

	// Name Container name
	Name string `json:"name"`

	// RestartCount Number of times that a container is restarted.
	RestartCount *int32 `json:"restartCount,omitempty"`

	// Status ContainerStatus status of a container
	Status *ContainerStatus `json:"status,omitempty"`
}

// ContainerStateRunning Running status of a container.
type ContainerStateRunning = map[string]interface{}

// ContainerStateTerminated Termination status of a container.
type ContainerStateTerminated struct {
	// ExitCode Exit code of the termination status.
	ExitCode *int32 `json:"exitCode,omitempty"`

	// Message Message of the termination status.
	Message *string `json:"message,omitempty"`

	// Reason Reason of the termination.
	Reason *string `json:"reason,omitempty"`
}

// ContainerStateWaiting Waiting status of a container including the reason and message.
type ContainerStateWaiting struct {
	// Message Message of the waiting status.
	Message *string `json:"message,omitempty"`

	// Reason Reason of the waiting status.
	Reason *string `json:"reason,omitempty"`
}

// ContainerStatus ContainerStatus status of a container
type ContainerStatus struct {
	// ContainerStateRunning Running status of a container.
	ContainerStateRunning *ContainerStateRunning `json:"containerStateRunning,omitempty"`

	// ContainerStateTerminated Termination status of a container.
	ContainerStateTerminated *ContainerStateTerminated `json:"containerStateTerminated,omitempty"`

	// ContainerStateWaiting Waiting status of a container including the reason and message.
	ContainerStateWaiting *ContainerStateWaiting `json:"containerStateWaiting,omitempty"`
}

// DeletePodResponse Response message for the DeletePod method.
type DeletePodResponse = map[string]interface{}

// EndpointStatus Status of the endpoint.
type EndpointStatus struct {
	// State Endpoint state, either Ready or NotReady.
	State *EndpointStatusState `json:"state,omitempty"`
}

// EndpointStatusState Endpoint state, either Ready or NotReady.
type EndpointStatusState string

// Fqdn Fully qualified domain name.
type Fqdn struct {
	Fqdn *string `json:"fqdn,omitempty"`
}

// GetVNCResponse Response message for the GetVNC method.
type GetVNCResponse struct {
	Address string `json:"address"`
}

// ListAppEndpointsResponse Response message for the ListAppEndpoints method.
type ListAppEndpointsResponse struct {
	// AppEndpoints List of services.
	AppEndpoints *[]AppEndpoint `json:"appEndpoints,omitempty"`
}

// ListAppWorkloadsResponse Response message for the ListAppWorkloadsResponse method.
type ListAppWorkloadsResponse struct {
	// AppWorkloads A list of virtual machines.
	AppWorkloads *[]AppWorkload `json:"appWorkloads,omitempty"`
}

// Pod Represents a pod resource.
type Pod struct {
	// Containers containers list of containers per pod
	Containers *[]Container `json:"containers,omitempty"`

	// Status The status of the pod during its lifecycle.
	Status *PodStatus `json:"status,omitempty"`
}

// PodStatus The status of the pod during its lifecycle.
type PodStatus struct {
	// State State information
	State *PodStatusState `json:"state,omitempty"`
}

// PodStatusState State information
type PodStatusState string

// Port Port information
type Port struct {
	// Name Port name
	Name *string `json:"name,omitempty"`

	// Protocol Protocol for a port.
	Protocol *string `json:"protocol,omitempty"`

	// ServiceProxyUrl Service proxy URL for a port.
	ServiceProxyUrl *string `json:"serviceProxyUrl,omitempty"`

	// Value Port value
	Value *int32 `json:"value,omitempty"`
}

// RestartVirtualMachineResponse Response message for the RestartVirtualMachine method.
type RestartVirtualMachineResponse = map[string]interface{}

// StartVirtualMachineResponse Response message for the StartVirtualMachine method.
type StartVirtualMachineResponse = map[string]interface{}

// StopVirtualMachineResponse Response message for the StopVirtualMachine method.
type StopVirtualMachineResponse = map[string]interface{}

// VirtualMachine Represents a virtual machine.
type VirtualMachine struct {
	// AdminStatus Represents the associated VirtualMachineInstance's state, either created (up state) or not (down state).
	AdminStatus *AdminStatus `json:"adminStatus,omitempty"`

	// Status Status of a virtual machine.
	Status *VirtualMachineStatus `json:"status,omitempty"`
}

// VirtualMachineStatus Status of a virtual machine.
type VirtualMachineStatus struct {
	// State Virtual machine state
	State *VirtualMachineStatusState `json:"state,omitempty"`
}

// VirtualMachineStatusState Virtual machine state
type VirtualMachineStatusState string
