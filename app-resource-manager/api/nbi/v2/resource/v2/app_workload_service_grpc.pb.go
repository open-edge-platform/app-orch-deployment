// SPDX-FileCopyrightText: (C) 2023 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: resource/v2/app_workload_service.proto

package resourcev2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppWorkloadService_ListAppWorkloads_FullMethodName = "/resource.v2.AppWorkloadService/ListAppWorkloads"
)

// AppWorkloadServiceClient is the client API for AppWorkloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Provides API endpoints for listing and lifecycle management of workloads, including virtual machines and container-based workloads.
type AppWorkloadServiceClient interface {
	// Gets a list of all workloads for an application of a deployment in a cluster.
	ListAppWorkloads(ctx context.Context, in *ListAppWorkloadsRequest, opts ...grpc.CallOption) (*ListAppWorkloadsResponse, error)
}

type appWorkloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppWorkloadServiceClient(cc grpc.ClientConnInterface) AppWorkloadServiceClient {
	return &appWorkloadServiceClient{cc}
}

func (c *appWorkloadServiceClient) ListAppWorkloads(ctx context.Context, in *ListAppWorkloadsRequest, opts ...grpc.CallOption) (*ListAppWorkloadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppWorkloadsResponse)
	err := c.cc.Invoke(ctx, AppWorkloadService_ListAppWorkloads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppWorkloadServiceServer is the server API for AppWorkloadService service.
// All implementations should embed UnimplementedAppWorkloadServiceServer
// for forward compatibility.
//
// Provides API endpoints for listing and lifecycle management of workloads, including virtual machines and container-based workloads.
type AppWorkloadServiceServer interface {
	// Gets a list of all workloads for an application of a deployment in a cluster.
	ListAppWorkloads(context.Context, *ListAppWorkloadsRequest) (*ListAppWorkloadsResponse, error)
}

// UnimplementedAppWorkloadServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppWorkloadServiceServer struct{}

func (UnimplementedAppWorkloadServiceServer) ListAppWorkloads(context.Context, *ListAppWorkloadsRequest) (*ListAppWorkloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppWorkloads not implemented")
}
func (UnimplementedAppWorkloadServiceServer) testEmbeddedByValue() {}

// UnsafeAppWorkloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppWorkloadServiceServer will
// result in compilation errors.
type UnsafeAppWorkloadServiceServer interface {
	mustEmbedUnimplementedAppWorkloadServiceServer()
}

func RegisterAppWorkloadServiceServer(s grpc.ServiceRegistrar, srv AppWorkloadServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppWorkloadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppWorkloadService_ServiceDesc, srv)
}

func _AppWorkloadService_ListAppWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppWorkloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppWorkloadServiceServer).ListAppWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppWorkloadService_ListAppWorkloads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppWorkloadServiceServer).ListAppWorkloads(ctx, req.(*ListAppWorkloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppWorkloadService_ServiceDesc is the grpc.ServiceDesc for AppWorkloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppWorkloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource.v2.AppWorkloadService",
	HandlerType: (*AppWorkloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAppWorkloads",
			Handler:    _AppWorkloadService_ListAppWorkloads_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource/v2/app_workload_service.proto",
}
