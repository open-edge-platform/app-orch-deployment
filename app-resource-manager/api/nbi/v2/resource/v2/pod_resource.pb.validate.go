// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resource/v2/pod_resource.proto

package resourcev2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Pod with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pod with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PodMultiError, or nil if none found.
func (m *Pod) ValidateAll() error {
	return m.validate(true)
}

func (m *Pod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PodValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PodValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PodMultiError(errors)
	}

	return nil
}

// PodMultiError is an error wrapping multiple validation errors returned by
// Pod.ValidateAll() if the designated constraints aren't met.
type PodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodMultiError) AllErrors() []error { return m }

// PodValidationError is the validation error returned by Pod.Validate if the
// designated constraints aren't met.
type PodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodValidationError) ErrorName() string { return "PodValidationError" }

// Error satisfies the builtin error interface
func (e PodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodValidationError{}

// Validate checks the field values on PodStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PodStatusMultiError, or nil
// if none found.
func (m *PodStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *PodStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	if len(errors) > 0 {
		return PodStatusMultiError(errors)
	}

	return nil
}

// PodStatusMultiError is an error wrapping multiple validation errors returned
// by PodStatus.ValidateAll() if the designated constraints aren't met.
type PodStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodStatusMultiError) AllErrors() []error { return m }

// PodStatusValidationError is the validation error returned by
// PodStatus.Validate if the designated constraints aren't met.
type PodStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodStatusValidationError) ErrorName() string { return "PodStatusValidationError" }

// Error satisfies the builtin error interface
func (e PodStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodStatusValidationError{}

// Validate checks the field values on Container with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerMultiError, or nil
// if none found.
func (m *Container) ValidateAll() error {
	return m.validate(true)
}

func (m *Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := ContainerValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Container_Name_Pattern.MatchString(m.GetName()) {
		err := ContainerValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z0-9]([-a-z0-9-]*[a-z0-9])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ImageName

	// no validation rules for RestartCount

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContainerMultiError(errors)
	}

	return nil
}

// ContainerMultiError is an error wrapping multiple validation errors returned
// by Container.ValidateAll() if the designated constraints aren't met.
type ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerMultiError) AllErrors() []error { return m }

// ContainerValidationError is the validation error returned by
// Container.Validate if the designated constraints aren't met.
type ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerValidationError) ErrorName() string { return "ContainerValidationError" }

// Error satisfies the builtin error interface
func (e ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerValidationError{}

var _Container_Name_Pattern = regexp.MustCompile("^[a-z0-9]([-a-z0-9-]*[a-z0-9])?$")

// Validate checks the field values on ContainerStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContainerStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerStatusMultiError, or nil if none found.
func (m *ContainerStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.State.(type) {
	case *ContainerStatus_ContainerStateWaiting:
		if v == nil {
			err := ContainerStatusValidationError{
				field:  "State",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainerStateWaiting()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContainerStatusValidationError{
						field:  "ContainerStateWaiting",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContainerStatusValidationError{
						field:  "ContainerStateWaiting",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainerStateWaiting()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerStatusValidationError{
					field:  "ContainerStateWaiting",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ContainerStatus_ContainerStateRunning:
		if v == nil {
			err := ContainerStatusValidationError{
				field:  "State",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainerStateRunning()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContainerStatusValidationError{
						field:  "ContainerStateRunning",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContainerStatusValidationError{
						field:  "ContainerStateRunning",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainerStateRunning()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerStatusValidationError{
					field:  "ContainerStateRunning",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ContainerStatus_ContainerStateTerminated:
		if v == nil {
			err := ContainerStatusValidationError{
				field:  "State",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainerStateTerminated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContainerStatusValidationError{
						field:  "ContainerStateTerminated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContainerStatusValidationError{
						field:  "ContainerStateTerminated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainerStateTerminated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerStatusValidationError{
					field:  "ContainerStateTerminated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ContainerStatusMultiError(errors)
	}

	return nil
}

// ContainerStatusMultiError is an error wrapping multiple validation errors
// returned by ContainerStatus.ValidateAll() if the designated constraints
// aren't met.
type ContainerStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerStatusMultiError) AllErrors() []error { return m }

// ContainerStatusValidationError is the validation error returned by
// ContainerStatus.Validate if the designated constraints aren't met.
type ContainerStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerStatusValidationError) ErrorName() string { return "ContainerStatusValidationError" }

// Error satisfies the builtin error interface
func (e ContainerStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerStatusValidationError{}

// Validate checks the field values on ContainerStateWaiting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerStateWaiting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerStateWaiting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerStateWaitingMultiError, or nil if none found.
func (m *ContainerStateWaiting) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerStateWaiting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reason

	// no validation rules for Message

	if len(errors) > 0 {
		return ContainerStateWaitingMultiError(errors)
	}

	return nil
}

// ContainerStateWaitingMultiError is an error wrapping multiple validation
// errors returned by ContainerStateWaiting.ValidateAll() if the designated
// constraints aren't met.
type ContainerStateWaitingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerStateWaitingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerStateWaitingMultiError) AllErrors() []error { return m }

// ContainerStateWaitingValidationError is the validation error returned by
// ContainerStateWaiting.Validate if the designated constraints aren't met.
type ContainerStateWaitingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerStateWaitingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerStateWaitingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerStateWaitingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerStateWaitingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerStateWaitingValidationError) ErrorName() string {
	return "ContainerStateWaitingValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerStateWaitingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerStateWaiting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerStateWaitingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerStateWaitingValidationError{}

// Validate checks the field values on ContainerStateRunning with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerStateRunning) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerStateRunning with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerStateRunningMultiError, or nil if none found.
func (m *ContainerStateRunning) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerStateRunning) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContainerStateRunningMultiError(errors)
	}

	return nil
}

// ContainerStateRunningMultiError is an error wrapping multiple validation
// errors returned by ContainerStateRunning.ValidateAll() if the designated
// constraints aren't met.
type ContainerStateRunningMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerStateRunningMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerStateRunningMultiError) AllErrors() []error { return m }

// ContainerStateRunningValidationError is the validation error returned by
// ContainerStateRunning.Validate if the designated constraints aren't met.
type ContainerStateRunningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerStateRunningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerStateRunningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerStateRunningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerStateRunningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerStateRunningValidationError) ErrorName() string {
	return "ContainerStateRunningValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerStateRunningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerStateRunning.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerStateRunningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerStateRunningValidationError{}

// Validate checks the field values on ContainerStateTerminated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerStateTerminated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerStateTerminated with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerStateTerminatedMultiError, or nil if none found.
func (m *ContainerStateTerminated) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerStateTerminated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for ExitCode

	if len(errors) > 0 {
		return ContainerStateTerminatedMultiError(errors)
	}

	return nil
}

// ContainerStateTerminatedMultiError is an error wrapping multiple validation
// errors returned by ContainerStateTerminated.ValidateAll() if the designated
// constraints aren't met.
type ContainerStateTerminatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerStateTerminatedMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerStateTerminatedMultiError) AllErrors() []error { return m }

// ContainerStateTerminatedValidationError is the validation error returned by
// ContainerStateTerminated.Validate if the designated constraints aren't met.
type ContainerStateTerminatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerStateTerminatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerStateTerminatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerStateTerminatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerStateTerminatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerStateTerminatedValidationError) ErrorName() string {
	return "ContainerStateTerminatedValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerStateTerminatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerStateTerminated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerStateTerminatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerStateTerminatedValidationError{}
