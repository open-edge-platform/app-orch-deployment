// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resource/v2/vm_service.proto

package resourcev2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _vm_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on StartVirtualMachineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartVirtualMachineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartVirtualMachineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartVirtualMachineRequestMultiError, or nil if none found.
func (m *StartVirtualMachineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartVirtualMachineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 80 {
		err := StartVirtualMachineRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 80 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_StartVirtualMachineRequest_AppId_Pattern.MatchString(m.GetAppId()) {
		err := StartVirtualMachineRequestValidationError{
			field:  "AppId",
			reason: "value does not match regex pattern \"^[a-z0-9][a-z0-9-]{0,78}[a-z0-9]{0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterId()); l < 1 || l > 40 {
		err := StartVirtualMachineRequestValidationError{
			field:  "ClusterId",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_StartVirtualMachineRequest_ClusterId_Pattern.MatchString(m.GetClusterId()) {
		err := StartVirtualMachineRequestValidationError{
			field:  "ClusterId",
			reason: "value does not match regex pattern \"^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetVirtualMachineId()); err != nil {
		err = StartVirtualMachineRequestValidationError{
			field:  "VirtualMachineId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StartVirtualMachineRequestMultiError(errors)
	}

	return nil
}

func (m *StartVirtualMachineRequest) _validateUuid(uuid string) error {
	if matched := _vm_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// StartVirtualMachineRequestMultiError is an error wrapping multiple
// validation errors returned by StartVirtualMachineRequest.ValidateAll() if
// the designated constraints aren't met.
type StartVirtualMachineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartVirtualMachineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartVirtualMachineRequestMultiError) AllErrors() []error { return m }

// StartVirtualMachineRequestValidationError is the validation error returned
// by StartVirtualMachineRequest.Validate if the designated constraints aren't met.
type StartVirtualMachineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartVirtualMachineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartVirtualMachineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartVirtualMachineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartVirtualMachineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartVirtualMachineRequestValidationError) ErrorName() string {
	return "StartVirtualMachineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartVirtualMachineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartVirtualMachineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartVirtualMachineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartVirtualMachineRequestValidationError{}

var _StartVirtualMachineRequest_AppId_Pattern = regexp.MustCompile("^[a-z0-9][a-z0-9-]{0,78}[a-z0-9]{0,1}$")

var _StartVirtualMachineRequest_ClusterId_Pattern = regexp.MustCompile("^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$")

// Validate checks the field values on StartVirtualMachineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartVirtualMachineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartVirtualMachineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartVirtualMachineResponseMultiError, or nil if none found.
func (m *StartVirtualMachineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartVirtualMachineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartVirtualMachineResponseMultiError(errors)
	}

	return nil
}

// StartVirtualMachineResponseMultiError is an error wrapping multiple
// validation errors returned by StartVirtualMachineResponse.ValidateAll() if
// the designated constraints aren't met.
type StartVirtualMachineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartVirtualMachineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartVirtualMachineResponseMultiError) AllErrors() []error { return m }

// StartVirtualMachineResponseValidationError is the validation error returned
// by StartVirtualMachineResponse.Validate if the designated constraints
// aren't met.
type StartVirtualMachineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartVirtualMachineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartVirtualMachineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartVirtualMachineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartVirtualMachineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartVirtualMachineResponseValidationError) ErrorName() string {
	return "StartVirtualMachineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartVirtualMachineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartVirtualMachineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartVirtualMachineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartVirtualMachineResponseValidationError{}

// Validate checks the field values on StopVirtualMachineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopVirtualMachineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopVirtualMachineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopVirtualMachineRequestMultiError, or nil if none found.
func (m *StopVirtualMachineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopVirtualMachineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 80 {
		err := StopVirtualMachineRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 80 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_StopVirtualMachineRequest_AppId_Pattern.MatchString(m.GetAppId()) {
		err := StopVirtualMachineRequestValidationError{
			field:  "AppId",
			reason: "value does not match regex pattern \"^[a-z0-9][a-z0-9-]{0,78}[a-z0-9]{0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterId()); l < 1 || l > 40 {
		err := StopVirtualMachineRequestValidationError{
			field:  "ClusterId",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_StopVirtualMachineRequest_ClusterId_Pattern.MatchString(m.GetClusterId()) {
		err := StopVirtualMachineRequestValidationError{
			field:  "ClusterId",
			reason: "value does not match regex pattern \"^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetVirtualMachineId()); err != nil {
		err = StopVirtualMachineRequestValidationError{
			field:  "VirtualMachineId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StopVirtualMachineRequestMultiError(errors)
	}

	return nil
}

func (m *StopVirtualMachineRequest) _validateUuid(uuid string) error {
	if matched := _vm_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// StopVirtualMachineRequestMultiError is an error wrapping multiple validation
// errors returned by StopVirtualMachineRequest.ValidateAll() if the
// designated constraints aren't met.
type StopVirtualMachineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopVirtualMachineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopVirtualMachineRequestMultiError) AllErrors() []error { return m }

// StopVirtualMachineRequestValidationError is the validation error returned by
// StopVirtualMachineRequest.Validate if the designated constraints aren't met.
type StopVirtualMachineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopVirtualMachineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopVirtualMachineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopVirtualMachineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopVirtualMachineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopVirtualMachineRequestValidationError) ErrorName() string {
	return "StopVirtualMachineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopVirtualMachineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopVirtualMachineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopVirtualMachineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopVirtualMachineRequestValidationError{}

var _StopVirtualMachineRequest_AppId_Pattern = regexp.MustCompile("^[a-z0-9][a-z0-9-]{0,78}[a-z0-9]{0,1}$")

var _StopVirtualMachineRequest_ClusterId_Pattern = regexp.MustCompile("^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$")

// Validate checks the field values on StopVirtualMachineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopVirtualMachineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopVirtualMachineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopVirtualMachineResponseMultiError, or nil if none found.
func (m *StopVirtualMachineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopVirtualMachineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopVirtualMachineResponseMultiError(errors)
	}

	return nil
}

// StopVirtualMachineResponseMultiError is an error wrapping multiple
// validation errors returned by StopVirtualMachineResponse.ValidateAll() if
// the designated constraints aren't met.
type StopVirtualMachineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopVirtualMachineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopVirtualMachineResponseMultiError) AllErrors() []error { return m }

// StopVirtualMachineResponseValidationError is the validation error returned
// by StopVirtualMachineResponse.Validate if the designated constraints aren't met.
type StopVirtualMachineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopVirtualMachineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopVirtualMachineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopVirtualMachineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopVirtualMachineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopVirtualMachineResponseValidationError) ErrorName() string {
	return "StopVirtualMachineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopVirtualMachineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopVirtualMachineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopVirtualMachineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopVirtualMachineResponseValidationError{}

// Validate checks the field values on RestartVirtualMachineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartVirtualMachineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartVirtualMachineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartVirtualMachineRequestMultiError, or nil if none found.
func (m *RestartVirtualMachineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartVirtualMachineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 80 {
		err := RestartVirtualMachineRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 80 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RestartVirtualMachineRequest_AppId_Pattern.MatchString(m.GetAppId()) {
		err := RestartVirtualMachineRequestValidationError{
			field:  "AppId",
			reason: "value does not match regex pattern \"^[a-z0-9][a-z0-9-]{0,78}[a-z0-9]{0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterId()); l < 1 || l > 40 {
		err := RestartVirtualMachineRequestValidationError{
			field:  "ClusterId",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RestartVirtualMachineRequest_ClusterId_Pattern.MatchString(m.GetClusterId()) {
		err := RestartVirtualMachineRequestValidationError{
			field:  "ClusterId",
			reason: "value does not match regex pattern \"^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetVirtualMachineId()); err != nil {
		err = RestartVirtualMachineRequestValidationError{
			field:  "VirtualMachineId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RestartVirtualMachineRequestMultiError(errors)
	}

	return nil
}

func (m *RestartVirtualMachineRequest) _validateUuid(uuid string) error {
	if matched := _vm_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RestartVirtualMachineRequestMultiError is an error wrapping multiple
// validation errors returned by RestartVirtualMachineRequest.ValidateAll() if
// the designated constraints aren't met.
type RestartVirtualMachineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartVirtualMachineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartVirtualMachineRequestMultiError) AllErrors() []error { return m }

// RestartVirtualMachineRequestValidationError is the validation error returned
// by RestartVirtualMachineRequest.Validate if the designated constraints
// aren't met.
type RestartVirtualMachineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartVirtualMachineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartVirtualMachineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartVirtualMachineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartVirtualMachineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartVirtualMachineRequestValidationError) ErrorName() string {
	return "RestartVirtualMachineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestartVirtualMachineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartVirtualMachineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartVirtualMachineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartVirtualMachineRequestValidationError{}

var _RestartVirtualMachineRequest_AppId_Pattern = regexp.MustCompile("^[a-z0-9][a-z0-9-]{0,78}[a-z0-9]{0,1}$")

var _RestartVirtualMachineRequest_ClusterId_Pattern = regexp.MustCompile("^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$")

// Validate checks the field values on RestartVirtualMachineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartVirtualMachineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartVirtualMachineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RestartVirtualMachineResponseMultiError, or nil if none found.
func (m *RestartVirtualMachineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartVirtualMachineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestartVirtualMachineResponseMultiError(errors)
	}

	return nil
}

// RestartVirtualMachineResponseMultiError is an error wrapping multiple
// validation errors returned by RestartVirtualMachineResponse.ValidateAll()
// if the designated constraints aren't met.
type RestartVirtualMachineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartVirtualMachineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartVirtualMachineResponseMultiError) AllErrors() []error { return m }

// RestartVirtualMachineResponseValidationError is the validation error
// returned by RestartVirtualMachineResponse.Validate if the designated
// constraints aren't met.
type RestartVirtualMachineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartVirtualMachineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartVirtualMachineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartVirtualMachineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartVirtualMachineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartVirtualMachineResponseValidationError) ErrorName() string {
	return "RestartVirtualMachineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestartVirtualMachineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartVirtualMachineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartVirtualMachineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartVirtualMachineResponseValidationError{}

// Validate checks the field values on GetVNCRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetVNCRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVNCRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetVNCRequestMultiError, or
// nil if none found.
func (m *GetVNCRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVNCRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 80 {
		err := GetVNCRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 80 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetVNCRequest_AppId_Pattern.MatchString(m.GetAppId()) {
		err := GetVNCRequestValidationError{
			field:  "AppId",
			reason: "value does not match regex pattern \"^[a-z0-9][a-z0-9-]{0,78}[a-z0-9]{0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterId()); l < 1 || l > 40 {
		err := GetVNCRequestValidationError{
			field:  "ClusterId",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetVNCRequest_ClusterId_Pattern.MatchString(m.GetClusterId()) {
		err := GetVNCRequestValidationError{
			field:  "ClusterId",
			reason: "value does not match regex pattern \"^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetVirtualMachineId()); err != nil {
		err = GetVNCRequestValidationError{
			field:  "VirtualMachineId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetVNCRequestMultiError(errors)
	}

	return nil
}

func (m *GetVNCRequest) _validateUuid(uuid string) error {
	if matched := _vm_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetVNCRequestMultiError is an error wrapping multiple validation errors
// returned by GetVNCRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVNCRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVNCRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVNCRequestMultiError) AllErrors() []error { return m }

// GetVNCRequestValidationError is the validation error returned by
// GetVNCRequest.Validate if the designated constraints aren't met.
type GetVNCRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVNCRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVNCRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVNCRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVNCRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVNCRequestValidationError) ErrorName() string { return "GetVNCRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetVNCRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVNCRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVNCRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVNCRequestValidationError{}

var _GetVNCRequest_AppId_Pattern = regexp.MustCompile("^[a-z0-9][a-z0-9-]{0,78}[a-z0-9]{0,1}$")

var _GetVNCRequest_ClusterId_Pattern = regexp.MustCompile("^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$")

// Validate checks the field values on GetVNCResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetVNCResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVNCResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetVNCResponseMultiError,
// or nil if none found.
func (m *GetVNCResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVNCResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if len(errors) > 0 {
		return GetVNCResponseMultiError(errors)
	}

	return nil
}

// GetVNCResponseMultiError is an error wrapping multiple validation errors
// returned by GetVNCResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVNCResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVNCResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVNCResponseMultiError) AllErrors() []error { return m }

// GetVNCResponseValidationError is the validation error returned by
// GetVNCResponse.Validate if the designated constraints aren't met.
type GetVNCResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVNCResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVNCResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVNCResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVNCResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVNCResponseValidationError) ErrorName() string { return "GetVNCResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetVNCResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVNCResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVNCResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVNCResponseValidationError{}
