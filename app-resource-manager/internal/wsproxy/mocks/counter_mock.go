// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockCounter is an autogenerated mock type for the Counter type
type MockCounter struct {
	mock.Mock
}

// Decrease provides a mock function with given fields: key
func (_m *MockCounter) Decrease(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Decrease")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Increase provides a mock function with given fields: key
func (_m *MockCounter) Increase(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Increase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Print provides a mock function with given fields:
func (_m *MockCounter) Print() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Print")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMockCounter creates a new instance of MockCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCounter {
	mock := &MockCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
