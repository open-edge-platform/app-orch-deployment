// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	apiserverinternalv1alpha1 "k8s.io/client-go/kubernetes/typed/apiserverinternal/v1alpha1"
	appsv1 "k8s.io/client-go/kubernetes/typed/apps/v1"

	appsv1beta1 "k8s.io/client-go/kubernetes/typed/apps/v1beta1"

	authenticationv1 "k8s.io/client-go/kubernetes/typed/authentication/v1"

	authenticationv1alpha1 "k8s.io/client-go/kubernetes/typed/authentication/v1alpha1"

	authenticationv1beta1 "k8s.io/client-go/kubernetes/typed/authentication/v1beta1"

	authorizationv1 "k8s.io/client-go/kubernetes/typed/authorization/v1"

	authorizationv1beta1 "k8s.io/client-go/kubernetes/typed/authorization/v1beta1"

	autoscalingv1 "k8s.io/client-go/kubernetes/typed/autoscaling/v1"

	batchv1 "k8s.io/client-go/kubernetes/typed/batch/v1"

	batchv1beta1 "k8s.io/client-go/kubernetes/typed/batch/v1beta1"

	certificatesv1 "k8s.io/client-go/kubernetes/typed/certificates/v1"

	certificatesv1beta1 "k8s.io/client-go/kubernetes/typed/certificates/v1beta1"

	clientset "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"

	clientsetversioned "kubevirt.io/client-go/generated/kubevirt/clientset/versioned"

	clonev1alpha1 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned/typed/clone/v1alpha1"

	coordinationv1 "k8s.io/client-go/kubernetes/typed/coordination/v1"

	coordinationv1beta1 "k8s.io/client-go/kubernetes/typed/coordination/v1beta1"

	corev1 "k8s.io/client-go/kubernetes/typed/core/v1"

	discovery "k8s.io/client-go/discovery"

	discoveryv1 "k8s.io/client-go/kubernetes/typed/discovery/v1"

	discoveryv1beta1 "k8s.io/client-go/kubernetes/typed/discovery/v1beta1"

	dynamic "k8s.io/client-go/dynamic"

	eventsv1 "k8s.io/client-go/kubernetes/typed/events/v1"

	eventsv1beta1 "k8s.io/client-go/kubernetes/typed/events/v1beta1"

	exportv1alpha1 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned/typed/export/v1alpha1"

	extensionsv1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"

	external_snapshotterclientsetversioned "kubevirt.io/client-go/generated/external-snapshotter/clientset/versioned"

	flowcontrolv1alpha1 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1alpha1"

	flowcontrolv1beta1 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta1"

	flowcontrolv1beta2 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta2"

	instancetypev1beta1 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned/typed/instancetype/v1beta1"

	kubecli "kubevirt.io/client-go/kubecli"

	migrationsv1alpha1 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned/typed/migrations/v1alpha1"

	mock "github.com/stretchr/testify/mock"

	network_attachment_definition_clientclientsetversioned "kubevirt.io/client-go/generated/network-attachment-definition-client/clientset/versioned"

	networkingv1 "k8s.io/client-go/kubernetes/typed/networking/v1"

	networkingv1alpha1 "k8s.io/client-go/kubernetes/typed/networking/v1alpha1"

	networkingv1beta1 "k8s.io/client-go/kubernetes/typed/networking/v1beta1"

	nodev1 "k8s.io/client-go/kubernetes/typed/node/v1"

	nodev1alpha1 "k8s.io/client-go/kubernetes/typed/node/v1alpha1"

	nodev1beta1 "k8s.io/client-go/kubernetes/typed/node/v1beta1"

	policyv1 "k8s.io/client-go/kubernetes/typed/policy/v1"

	policyv1beta1 "k8s.io/client-go/kubernetes/typed/policy/v1beta1"

	poolv1alpha1 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned/typed/pool/v1alpha1"

	prometheus_operatorclientsetversioned "kubevirt.io/client-go/generated/prometheus-operator/clientset/versioned"

	rbacv1 "k8s.io/client-go/kubernetes/typed/rbac/v1"

	rbacv1alpha1 "k8s.io/client-go/kubernetes/typed/rbac/v1alpha1"

	rbacv1beta1 "k8s.io/client-go/kubernetes/typed/rbac/v1beta1"

	resourcev1alpha1 "k8s.io/client-go/kubernetes/typed/resource/v1alpha1"

	rest "k8s.io/client-go/rest"

	routev1 "github.com/openshift/client-go/route/clientset/versioned/typed/route/v1"

	schedulingv1 "k8s.io/client-go/kubernetes/typed/scheduling/v1"

	schedulingv1alpha1 "k8s.io/client-go/kubernetes/typed/scheduling/v1alpha1"

	schedulingv1beta1 "k8s.io/client-go/kubernetes/typed/scheduling/v1beta1"

	securityv1 "github.com/openshift/client-go/security/clientset/versioned/typed/security/v1"

	snapshotv1alpha1 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned/typed/snapshot/v1alpha1"

	storagev1 "k8s.io/client-go/kubernetes/typed/storage/v1"

	storagev1alpha1 "k8s.io/client-go/kubernetes/typed/storage/v1alpha1"

	storagev1beta1 "k8s.io/client-go/kubernetes/typed/storage/v1beta1"

	v1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1"

	v1alpha1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1alpha1"

	v1beta1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1beta1"

	v1beta2 "k8s.io/client-go/kubernetes/typed/apps/v1beta2"

	v1beta3 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta3"

	v2 "k8s.io/client-go/kubernetes/typed/autoscaling/v2"

	v2beta1 "k8s.io/client-go/kubernetes/typed/autoscaling/v2beta1"

	v2beta2 "k8s.io/client-go/kubernetes/typed/autoscaling/v2beta2"

	versioned "kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned"
)

// MockKubevirtClient is an autogenerated mock type for the KubevirtClient type
type MockKubevirtClient struct {
	mock.Mock
}

// AdmissionregistrationV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) AdmissionregistrationV1() v1.AdmissionregistrationV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AdmissionregistrationV1")
	}

	var r0 v1.AdmissionregistrationV1Interface
	if rf, ok := ret.Get(0).(func() v1.AdmissionregistrationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.AdmissionregistrationV1Interface)
		}
	}

	return r0
}

// AdmissionregistrationV1alpha1 provides a mock function with given fields:
func (_m *MockKubevirtClient) AdmissionregistrationV1alpha1() v1alpha1.AdmissionregistrationV1alpha1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AdmissionregistrationV1alpha1")
	}

	var r0 v1alpha1.AdmissionregistrationV1alpha1Interface
	if rf, ok := ret.Get(0).(func() v1alpha1.AdmissionregistrationV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.AdmissionregistrationV1alpha1Interface)
		}
	}

	return r0
}

// AdmissionregistrationV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) AdmissionregistrationV1beta1() v1beta1.AdmissionregistrationV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AdmissionregistrationV1beta1")
	}

	var r0 v1beta1.AdmissionregistrationV1beta1Interface
	if rf, ok := ret.Get(0).(func() v1beta1.AdmissionregistrationV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.AdmissionregistrationV1beta1Interface)
		}
	}

	return r0
}

// AppsV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) AppsV1() appsv1.AppsV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AppsV1")
	}

	var r0 appsv1.AppsV1Interface
	if rf, ok := ret.Get(0).(func() appsv1.AppsV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(appsv1.AppsV1Interface)
		}
	}

	return r0
}

// AppsV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) AppsV1beta1() appsv1beta1.AppsV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AppsV1beta1")
	}

	var r0 appsv1beta1.AppsV1beta1Interface
	if rf, ok := ret.Get(0).(func() appsv1beta1.AppsV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(appsv1beta1.AppsV1beta1Interface)
		}
	}

	return r0
}

// AppsV1beta2 provides a mock function with given fields:
func (_m *MockKubevirtClient) AppsV1beta2() v1beta2.AppsV1beta2Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AppsV1beta2")
	}

	var r0 v1beta2.AppsV1beta2Interface
	if rf, ok := ret.Get(0).(func() v1beta2.AppsV1beta2Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta2.AppsV1beta2Interface)
		}
	}

	return r0
}

// AuthenticationV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) AuthenticationV1() authenticationv1.AuthenticationV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthenticationV1")
	}

	var r0 authenticationv1.AuthenticationV1Interface
	if rf, ok := ret.Get(0).(func() authenticationv1.AuthenticationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authenticationv1.AuthenticationV1Interface)
		}
	}

	return r0
}

// AuthenticationV1alpha1 provides a mock function with given fields:
func (_m *MockKubevirtClient) AuthenticationV1alpha1() authenticationv1alpha1.AuthenticationV1alpha1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthenticationV1alpha1")
	}

	var r0 authenticationv1alpha1.AuthenticationV1alpha1Interface
	if rf, ok := ret.Get(0).(func() authenticationv1alpha1.AuthenticationV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authenticationv1alpha1.AuthenticationV1alpha1Interface)
		}
	}

	return r0
}

// AuthenticationV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) AuthenticationV1beta1() authenticationv1beta1.AuthenticationV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthenticationV1beta1")
	}

	var r0 authenticationv1beta1.AuthenticationV1beta1Interface
	if rf, ok := ret.Get(0).(func() authenticationv1beta1.AuthenticationV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authenticationv1beta1.AuthenticationV1beta1Interface)
		}
	}

	return r0
}

// AuthorizationV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) AuthorizationV1() authorizationv1.AuthorizationV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthorizationV1")
	}

	var r0 authorizationv1.AuthorizationV1Interface
	if rf, ok := ret.Get(0).(func() authorizationv1.AuthorizationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authorizationv1.AuthorizationV1Interface)
		}
	}

	return r0
}

// AuthorizationV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) AuthorizationV1beta1() authorizationv1beta1.AuthorizationV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthorizationV1beta1")
	}

	var r0 authorizationv1beta1.AuthorizationV1beta1Interface
	if rf, ok := ret.Get(0).(func() authorizationv1beta1.AuthorizationV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authorizationv1beta1.AuthorizationV1beta1Interface)
		}
	}

	return r0
}

// AutoscalingV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) AutoscalingV1() autoscalingv1.AutoscalingV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AutoscalingV1")
	}

	var r0 autoscalingv1.AutoscalingV1Interface
	if rf, ok := ret.Get(0).(func() autoscalingv1.AutoscalingV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(autoscalingv1.AutoscalingV1Interface)
		}
	}

	return r0
}

// AutoscalingV2 provides a mock function with given fields:
func (_m *MockKubevirtClient) AutoscalingV2() v2.AutoscalingV2Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AutoscalingV2")
	}

	var r0 v2.AutoscalingV2Interface
	if rf, ok := ret.Get(0).(func() v2.AutoscalingV2Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.AutoscalingV2Interface)
		}
	}

	return r0
}

// AutoscalingV2beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) AutoscalingV2beta1() v2beta1.AutoscalingV2beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AutoscalingV2beta1")
	}

	var r0 v2beta1.AutoscalingV2beta1Interface
	if rf, ok := ret.Get(0).(func() v2beta1.AutoscalingV2beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2beta1.AutoscalingV2beta1Interface)
		}
	}

	return r0
}

// AutoscalingV2beta2 provides a mock function with given fields:
func (_m *MockKubevirtClient) AutoscalingV2beta2() v2beta2.AutoscalingV2beta2Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AutoscalingV2beta2")
	}

	var r0 v2beta2.AutoscalingV2beta2Interface
	if rf, ok := ret.Get(0).(func() v2beta2.AutoscalingV2beta2Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2beta2.AutoscalingV2beta2Interface)
		}
	}

	return r0
}

// BatchV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) BatchV1() batchv1.BatchV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BatchV1")
	}

	var r0 batchv1.BatchV1Interface
	if rf, ok := ret.Get(0).(func() batchv1.BatchV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(batchv1.BatchV1Interface)
		}
	}

	return r0
}

// BatchV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) BatchV1beta1() batchv1beta1.BatchV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BatchV1beta1")
	}

	var r0 batchv1beta1.BatchV1beta1Interface
	if rf, ok := ret.Get(0).(func() batchv1beta1.BatchV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(batchv1beta1.BatchV1beta1Interface)
		}
	}

	return r0
}

// CdiClient provides a mock function with given fields:
func (_m *MockKubevirtClient) CdiClient() versioned.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CdiClient")
	}

	var r0 versioned.Interface
	if rf, ok := ret.Get(0).(func() versioned.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(versioned.Interface)
		}
	}

	return r0
}

// CertificatesV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) CertificatesV1() certificatesv1.CertificatesV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CertificatesV1")
	}

	var r0 certificatesv1.CertificatesV1Interface
	if rf, ok := ret.Get(0).(func() certificatesv1.CertificatesV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificatesv1.CertificatesV1Interface)
		}
	}

	return r0
}

// CertificatesV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) CertificatesV1beta1() certificatesv1beta1.CertificatesV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CertificatesV1beta1")
	}

	var r0 certificatesv1beta1.CertificatesV1beta1Interface
	if rf, ok := ret.Get(0).(func() certificatesv1beta1.CertificatesV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificatesv1beta1.CertificatesV1beta1Interface)
		}
	}

	return r0
}

// ClusterProfiler provides a mock function with given fields:
func (_m *MockKubevirtClient) ClusterProfiler() *kubecli.ClusterProfiler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClusterProfiler")
	}

	var r0 *kubecli.ClusterProfiler
	if rf, ok := ret.Get(0).(func() *kubecli.ClusterProfiler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubecli.ClusterProfiler)
		}
	}

	return r0
}

// Config provides a mock function with given fields:
func (_m *MockKubevirtClient) Config() *rest.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	return r0
}

// CoordinationV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) CoordinationV1() coordinationv1.CoordinationV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CoordinationV1")
	}

	var r0 coordinationv1.CoordinationV1Interface
	if rf, ok := ret.Get(0).(func() coordinationv1.CoordinationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(coordinationv1.CoordinationV1Interface)
		}
	}

	return r0
}

// CoordinationV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) CoordinationV1beta1() coordinationv1beta1.CoordinationV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CoordinationV1beta1")
	}

	var r0 coordinationv1beta1.CoordinationV1beta1Interface
	if rf, ok := ret.Get(0).(func() coordinationv1beta1.CoordinationV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(coordinationv1beta1.CoordinationV1beta1Interface)
		}
	}

	return r0
}

// CoreV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) CoreV1() corev1.CoreV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CoreV1")
	}

	var r0 corev1.CoreV1Interface
	if rf, ok := ret.Get(0).(func() corev1.CoreV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1.CoreV1Interface)
		}
	}

	return r0
}

// Discovery provides a mock function with given fields:
func (_m *MockKubevirtClient) Discovery() discovery.DiscoveryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Discovery")
	}

	var r0 discovery.DiscoveryInterface
	if rf, ok := ret.Get(0).(func() discovery.DiscoveryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.DiscoveryInterface)
		}
	}

	return r0
}

// DiscoveryClient provides a mock function with given fields:
func (_m *MockKubevirtClient) DiscoveryClient() discovery.DiscoveryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DiscoveryClient")
	}

	var r0 discovery.DiscoveryInterface
	if rf, ok := ret.Get(0).(func() discovery.DiscoveryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.DiscoveryInterface)
		}
	}

	return r0
}

// DiscoveryV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) DiscoveryV1() discoveryv1.DiscoveryV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DiscoveryV1")
	}

	var r0 discoveryv1.DiscoveryV1Interface
	if rf, ok := ret.Get(0).(func() discoveryv1.DiscoveryV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discoveryv1.DiscoveryV1Interface)
		}
	}

	return r0
}

// DiscoveryV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) DiscoveryV1beta1() discoveryv1beta1.DiscoveryV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DiscoveryV1beta1")
	}

	var r0 discoveryv1beta1.DiscoveryV1beta1Interface
	if rf, ok := ret.Get(0).(func() discoveryv1beta1.DiscoveryV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discoveryv1beta1.DiscoveryV1beta1Interface)
		}
	}

	return r0
}

// DynamicClient provides a mock function with given fields:
func (_m *MockKubevirtClient) DynamicClient() dynamic.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DynamicClient")
	}

	var r0 dynamic.Interface
	if rf, ok := ret.Get(0).(func() dynamic.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynamic.Interface)
		}
	}

	return r0
}

// EventsV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) EventsV1() eventsv1.EventsV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventsV1")
	}

	var r0 eventsv1.EventsV1Interface
	if rf, ok := ret.Get(0).(func() eventsv1.EventsV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eventsv1.EventsV1Interface)
		}
	}

	return r0
}

// EventsV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) EventsV1beta1() eventsv1beta1.EventsV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventsV1beta1")
	}

	var r0 eventsv1beta1.EventsV1beta1Interface
	if rf, ok := ret.Get(0).(func() eventsv1beta1.EventsV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eventsv1beta1.EventsV1beta1Interface)
		}
	}

	return r0
}

// ExpandSpec provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) ExpandSpec(namespace string) kubecli.ExpandSpecInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for ExpandSpec")
	}

	var r0 kubecli.ExpandSpecInterface
	if rf, ok := ret.Get(0).(func(string) kubecli.ExpandSpecInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.ExpandSpecInterface)
		}
	}

	return r0
}

// ExtensionsClient provides a mock function with given fields:
func (_m *MockKubevirtClient) ExtensionsClient() clientset.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExtensionsClient")
	}

	var r0 clientset.Interface
	if rf, ok := ret.Get(0).(func() clientset.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientset.Interface)
		}
	}

	return r0
}

// ExtensionsV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) ExtensionsV1beta1() extensionsv1beta1.ExtensionsV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExtensionsV1beta1")
	}

	var r0 extensionsv1beta1.ExtensionsV1beta1Interface
	if rf, ok := ret.Get(0).(func() extensionsv1beta1.ExtensionsV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(extensionsv1beta1.ExtensionsV1beta1Interface)
		}
	}

	return r0
}

// FlowcontrolV1alpha1 provides a mock function with given fields:
func (_m *MockKubevirtClient) FlowcontrolV1alpha1() flowcontrolv1alpha1.FlowcontrolV1alpha1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FlowcontrolV1alpha1")
	}

	var r0 flowcontrolv1alpha1.FlowcontrolV1alpha1Interface
	if rf, ok := ret.Get(0).(func() flowcontrolv1alpha1.FlowcontrolV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flowcontrolv1alpha1.FlowcontrolV1alpha1Interface)
		}
	}

	return r0
}

// FlowcontrolV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) FlowcontrolV1beta1() flowcontrolv1beta1.FlowcontrolV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FlowcontrolV1beta1")
	}

	var r0 flowcontrolv1beta1.FlowcontrolV1beta1Interface
	if rf, ok := ret.Get(0).(func() flowcontrolv1beta1.FlowcontrolV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flowcontrolv1beta1.FlowcontrolV1beta1Interface)
		}
	}

	return r0
}

// FlowcontrolV1beta2 provides a mock function with given fields:
func (_m *MockKubevirtClient) FlowcontrolV1beta2() flowcontrolv1beta2.FlowcontrolV1beta2Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FlowcontrolV1beta2")
	}

	var r0 flowcontrolv1beta2.FlowcontrolV1beta2Interface
	if rf, ok := ret.Get(0).(func() flowcontrolv1beta2.FlowcontrolV1beta2Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flowcontrolv1beta2.FlowcontrolV1beta2Interface)
		}
	}

	return r0
}

// FlowcontrolV1beta3 provides a mock function with given fields:
func (_m *MockKubevirtClient) FlowcontrolV1beta3() v1beta3.FlowcontrolV1beta3Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FlowcontrolV1beta3")
	}

	var r0 v1beta3.FlowcontrolV1beta3Interface
	if rf, ok := ret.Get(0).(func() v1beta3.FlowcontrolV1beta3Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta3.FlowcontrolV1beta3Interface)
		}
	}

	return r0
}

// GeneratedKubeVirtClient provides a mock function with given fields:
func (_m *MockKubevirtClient) GeneratedKubeVirtClient() clientsetversioned.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GeneratedKubeVirtClient")
	}

	var r0 clientsetversioned.Interface
	if rf, ok := ret.Get(0).(func() clientsetversioned.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientsetversioned.Interface)
		}
	}

	return r0
}

// GuestfsVersion provides a mock function with given fields:
func (_m *MockKubevirtClient) GuestfsVersion() *kubecli.GuestfsVersion {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GuestfsVersion")
	}

	var r0 *kubecli.GuestfsVersion
	if rf, ok := ret.Get(0).(func() *kubecli.GuestfsVersion); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubecli.GuestfsVersion)
		}
	}

	return r0
}

// InternalV1alpha1 provides a mock function with given fields:
func (_m *MockKubevirtClient) InternalV1alpha1() apiserverinternalv1alpha1.InternalV1alpha1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InternalV1alpha1")
	}

	var r0 apiserverinternalv1alpha1.InternalV1alpha1Interface
	if rf, ok := ret.Get(0).(func() apiserverinternalv1alpha1.InternalV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apiserverinternalv1alpha1.InternalV1alpha1Interface)
		}
	}

	return r0
}

// KubeVirt provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) KubeVirt(namespace string) kubecli.KubeVirtInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for KubeVirt")
	}

	var r0 kubecli.KubeVirtInterface
	if rf, ok := ret.Get(0).(func(string) kubecli.KubeVirtInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.KubeVirtInterface)
		}
	}

	return r0
}

// KubernetesSnapshotClient provides a mock function with given fields:
func (_m *MockKubevirtClient) KubernetesSnapshotClient() external_snapshotterclientsetversioned.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KubernetesSnapshotClient")
	}

	var r0 external_snapshotterclientsetversioned.Interface
	if rf, ok := ret.Get(0).(func() external_snapshotterclientsetversioned.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(external_snapshotterclientsetversioned.Interface)
		}
	}

	return r0
}

// MigrationPolicy provides a mock function with given fields:
func (_m *MockKubevirtClient) MigrationPolicy() migrationsv1alpha1.MigrationPolicyInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MigrationPolicy")
	}

	var r0 migrationsv1alpha1.MigrationPolicyInterface
	if rf, ok := ret.Get(0).(func() migrationsv1alpha1.MigrationPolicyInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(migrationsv1alpha1.MigrationPolicyInterface)
		}
	}

	return r0
}

// MigrationPolicyClient provides a mock function with given fields:
func (_m *MockKubevirtClient) MigrationPolicyClient() *migrationsv1alpha1.MigrationsV1alpha1Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MigrationPolicyClient")
	}

	var r0 *migrationsv1alpha1.MigrationsV1alpha1Client
	if rf, ok := ret.Get(0).(func() *migrationsv1alpha1.MigrationsV1alpha1Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*migrationsv1alpha1.MigrationsV1alpha1Client)
		}
	}

	return r0
}

// NetworkClient provides a mock function with given fields:
func (_m *MockKubevirtClient) NetworkClient() network_attachment_definition_clientclientsetversioned.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NetworkClient")
	}

	var r0 network_attachment_definition_clientclientsetversioned.Interface
	if rf, ok := ret.Get(0).(func() network_attachment_definition_clientclientsetversioned.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network_attachment_definition_clientclientsetversioned.Interface)
		}
	}

	return r0
}

// NetworkingV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) NetworkingV1() networkingv1.NetworkingV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NetworkingV1")
	}

	var r0 networkingv1.NetworkingV1Interface
	if rf, ok := ret.Get(0).(func() networkingv1.NetworkingV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(networkingv1.NetworkingV1Interface)
		}
	}

	return r0
}

// NetworkingV1alpha1 provides a mock function with given fields:
func (_m *MockKubevirtClient) NetworkingV1alpha1() networkingv1alpha1.NetworkingV1alpha1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NetworkingV1alpha1")
	}

	var r0 networkingv1alpha1.NetworkingV1alpha1Interface
	if rf, ok := ret.Get(0).(func() networkingv1alpha1.NetworkingV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(networkingv1alpha1.NetworkingV1alpha1Interface)
		}
	}

	return r0
}

// NetworkingV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) NetworkingV1beta1() networkingv1beta1.NetworkingV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NetworkingV1beta1")
	}

	var r0 networkingv1beta1.NetworkingV1beta1Interface
	if rf, ok := ret.Get(0).(func() networkingv1beta1.NetworkingV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(networkingv1beta1.NetworkingV1beta1Interface)
		}
	}

	return r0
}

// NodeV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) NodeV1() nodev1.NodeV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeV1")
	}

	var r0 nodev1.NodeV1Interface
	if rf, ok := ret.Get(0).(func() nodev1.NodeV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodev1.NodeV1Interface)
		}
	}

	return r0
}

// NodeV1alpha1 provides a mock function with given fields:
func (_m *MockKubevirtClient) NodeV1alpha1() nodev1alpha1.NodeV1alpha1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeV1alpha1")
	}

	var r0 nodev1alpha1.NodeV1alpha1Interface
	if rf, ok := ret.Get(0).(func() nodev1alpha1.NodeV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodev1alpha1.NodeV1alpha1Interface)
		}
	}

	return r0
}

// NodeV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) NodeV1beta1() nodev1beta1.NodeV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeV1beta1")
	}

	var r0 nodev1beta1.NodeV1beta1Interface
	if rf, ok := ret.Get(0).(func() nodev1beta1.NodeV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodev1beta1.NodeV1beta1Interface)
		}
	}

	return r0
}

// PolicyV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) PolicyV1() policyv1.PolicyV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PolicyV1")
	}

	var r0 policyv1.PolicyV1Interface
	if rf, ok := ret.Get(0).(func() policyv1.PolicyV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(policyv1.PolicyV1Interface)
		}
	}

	return r0
}

// PolicyV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) PolicyV1beta1() policyv1beta1.PolicyV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PolicyV1beta1")
	}

	var r0 policyv1beta1.PolicyV1beta1Interface
	if rf, ok := ret.Get(0).(func() policyv1beta1.PolicyV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(policyv1beta1.PolicyV1beta1Interface)
		}
	}

	return r0
}

// PrometheusClient provides a mock function with given fields:
func (_m *MockKubevirtClient) PrometheusClient() prometheus_operatorclientsetversioned.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrometheusClient")
	}

	var r0 prometheus_operatorclientsetversioned.Interface
	if rf, ok := ret.Get(0).(func() prometheus_operatorclientsetversioned.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prometheus_operatorclientsetversioned.Interface)
		}
	}

	return r0
}

// RbacV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) RbacV1() rbacv1.RbacV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RbacV1")
	}

	var r0 rbacv1.RbacV1Interface
	if rf, ok := ret.Get(0).(func() rbacv1.RbacV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rbacv1.RbacV1Interface)
		}
	}

	return r0
}

// RbacV1alpha1 provides a mock function with given fields:
func (_m *MockKubevirtClient) RbacV1alpha1() rbacv1alpha1.RbacV1alpha1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RbacV1alpha1")
	}

	var r0 rbacv1alpha1.RbacV1alpha1Interface
	if rf, ok := ret.Get(0).(func() rbacv1alpha1.RbacV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rbacv1alpha1.RbacV1alpha1Interface)
		}
	}

	return r0
}

// RbacV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) RbacV1beta1() rbacv1beta1.RbacV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RbacV1beta1")
	}

	var r0 rbacv1beta1.RbacV1beta1Interface
	if rf, ok := ret.Get(0).(func() rbacv1beta1.RbacV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rbacv1beta1.RbacV1beta1Interface)
		}
	}

	return r0
}

// ReplicaSet provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) ReplicaSet(namespace string) kubecli.ReplicaSetInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for ReplicaSet")
	}

	var r0 kubecli.ReplicaSetInterface
	if rf, ok := ret.Get(0).(func(string) kubecli.ReplicaSetInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.ReplicaSetInterface)
		}
	}

	return r0
}

// ResourceV1alpha1 provides a mock function with given fields:
func (_m *MockKubevirtClient) ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResourceV1alpha1")
	}

	var r0 resourcev1alpha1.ResourceV1alpha1Interface
	if rf, ok := ret.Get(0).(func() resourcev1alpha1.ResourceV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resourcev1alpha1.ResourceV1alpha1Interface)
		}
	}

	return r0
}

// RestClient provides a mock function with given fields:
func (_m *MockKubevirtClient) RestClient() *rest.RESTClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RestClient")
	}

	var r0 *rest.RESTClient
	if rf, ok := ret.Get(0).(func() *rest.RESTClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.RESTClient)
		}
	}

	return r0
}

// RouteClient provides a mock function with given fields:
func (_m *MockKubevirtClient) RouteClient() routev1.RouteV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RouteClient")
	}

	var r0 routev1.RouteV1Interface
	if rf, ok := ret.Get(0).(func() routev1.RouteV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(routev1.RouteV1Interface)
		}
	}

	return r0
}

// SchedulingV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) SchedulingV1() schedulingv1.SchedulingV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SchedulingV1")
	}

	var r0 schedulingv1.SchedulingV1Interface
	if rf, ok := ret.Get(0).(func() schedulingv1.SchedulingV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedulingv1.SchedulingV1Interface)
		}
	}

	return r0
}

// SchedulingV1alpha1 provides a mock function with given fields:
func (_m *MockKubevirtClient) SchedulingV1alpha1() schedulingv1alpha1.SchedulingV1alpha1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SchedulingV1alpha1")
	}

	var r0 schedulingv1alpha1.SchedulingV1alpha1Interface
	if rf, ok := ret.Get(0).(func() schedulingv1alpha1.SchedulingV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedulingv1alpha1.SchedulingV1alpha1Interface)
		}
	}

	return r0
}

// SchedulingV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) SchedulingV1beta1() schedulingv1beta1.SchedulingV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SchedulingV1beta1")
	}

	var r0 schedulingv1beta1.SchedulingV1beta1Interface
	if rf, ok := ret.Get(0).(func() schedulingv1beta1.SchedulingV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedulingv1beta1.SchedulingV1beta1Interface)
		}
	}

	return r0
}

// SecClient provides a mock function with given fields:
func (_m *MockKubevirtClient) SecClient() securityv1.SecurityV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SecClient")
	}

	var r0 securityv1.SecurityV1Interface
	if rf, ok := ret.Get(0).(func() securityv1.SecurityV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(securityv1.SecurityV1Interface)
		}
	}

	return r0
}

// ServerVersion provides a mock function with given fields:
func (_m *MockKubevirtClient) ServerVersion() kubecli.ServerVersionInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerVersion")
	}

	var r0 kubecli.ServerVersionInterface
	if rf, ok := ret.Get(0).(func() kubecli.ServerVersionInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.ServerVersionInterface)
		}
	}

	return r0
}

// StorageV1 provides a mock function with given fields:
func (_m *MockKubevirtClient) StorageV1() storagev1.StorageV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StorageV1")
	}

	var r0 storagev1.StorageV1Interface
	if rf, ok := ret.Get(0).(func() storagev1.StorageV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storagev1.StorageV1Interface)
		}
	}

	return r0
}

// StorageV1alpha1 provides a mock function with given fields:
func (_m *MockKubevirtClient) StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StorageV1alpha1")
	}

	var r0 storagev1alpha1.StorageV1alpha1Interface
	if rf, ok := ret.Get(0).(func() storagev1alpha1.StorageV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storagev1alpha1.StorageV1alpha1Interface)
		}
	}

	return r0
}

// StorageV1beta1 provides a mock function with given fields:
func (_m *MockKubevirtClient) StorageV1beta1() storagev1beta1.StorageV1beta1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StorageV1beta1")
	}

	var r0 storagev1beta1.StorageV1beta1Interface
	if rf, ok := ret.Get(0).(func() storagev1beta1.StorageV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storagev1beta1.StorageV1beta1Interface)
		}
	}

	return r0
}

// VirtualMachine provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) VirtualMachine(namespace string) kubecli.VirtualMachineInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachine")
	}

	var r0 kubecli.VirtualMachineInterface
	if rf, ok := ret.Get(0).(func(string) kubecli.VirtualMachineInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.VirtualMachineInterface)
		}
	}

	return r0
}

// VirtualMachineClone provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) VirtualMachineClone(namespace string) clonev1alpha1.VirtualMachineCloneInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachineClone")
	}

	var r0 clonev1alpha1.VirtualMachineCloneInterface
	if rf, ok := ret.Get(0).(func(string) clonev1alpha1.VirtualMachineCloneInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clonev1alpha1.VirtualMachineCloneInterface)
		}
	}

	return r0
}

// VirtualMachineClusterInstancetype provides a mock function with given fields:
func (_m *MockKubevirtClient) VirtualMachineClusterInstancetype() instancetypev1beta1.VirtualMachineClusterInstancetypeInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachineClusterInstancetype")
	}

	var r0 instancetypev1beta1.VirtualMachineClusterInstancetypeInterface
	if rf, ok := ret.Get(0).(func() instancetypev1beta1.VirtualMachineClusterInstancetypeInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(instancetypev1beta1.VirtualMachineClusterInstancetypeInterface)
		}
	}

	return r0
}

// VirtualMachineClusterPreference provides a mock function with given fields:
func (_m *MockKubevirtClient) VirtualMachineClusterPreference() instancetypev1beta1.VirtualMachineClusterPreferenceInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachineClusterPreference")
	}

	var r0 instancetypev1beta1.VirtualMachineClusterPreferenceInterface
	if rf, ok := ret.Get(0).(func() instancetypev1beta1.VirtualMachineClusterPreferenceInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(instancetypev1beta1.VirtualMachineClusterPreferenceInterface)
		}
	}

	return r0
}

// VirtualMachineExport provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) VirtualMachineExport(namespace string) exportv1alpha1.VirtualMachineExportInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachineExport")
	}

	var r0 exportv1alpha1.VirtualMachineExportInterface
	if rf, ok := ret.Get(0).(func(string) exportv1alpha1.VirtualMachineExportInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exportv1alpha1.VirtualMachineExportInterface)
		}
	}

	return r0
}

// VirtualMachineInstance provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) VirtualMachineInstance(namespace string) kubecli.VirtualMachineInstanceInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachineInstance")
	}

	var r0 kubecli.VirtualMachineInstanceInterface
	if rf, ok := ret.Get(0).(func(string) kubecli.VirtualMachineInstanceInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.VirtualMachineInstanceInterface)
		}
	}

	return r0
}

// VirtualMachineInstanceMigration provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) VirtualMachineInstanceMigration(namespace string) kubecli.VirtualMachineInstanceMigrationInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachineInstanceMigration")
	}

	var r0 kubecli.VirtualMachineInstanceMigrationInterface
	if rf, ok := ret.Get(0).(func(string) kubecli.VirtualMachineInstanceMigrationInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.VirtualMachineInstanceMigrationInterface)
		}
	}

	return r0
}

// VirtualMachineInstancePreset provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) VirtualMachineInstancePreset(namespace string) kubecli.VirtualMachineInstancePresetInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachineInstancePreset")
	}

	var r0 kubecli.VirtualMachineInstancePresetInterface
	if rf, ok := ret.Get(0).(func(string) kubecli.VirtualMachineInstancePresetInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.VirtualMachineInstancePresetInterface)
		}
	}

	return r0
}

// VirtualMachineInstancetype provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) VirtualMachineInstancetype(namespace string) instancetypev1beta1.VirtualMachineInstancetypeInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachineInstancetype")
	}

	var r0 instancetypev1beta1.VirtualMachineInstancetypeInterface
	if rf, ok := ret.Get(0).(func(string) instancetypev1beta1.VirtualMachineInstancetypeInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(instancetypev1beta1.VirtualMachineInstancetypeInterface)
		}
	}

	return r0
}

// VirtualMachinePool provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) VirtualMachinePool(namespace string) poolv1alpha1.VirtualMachinePoolInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachinePool")
	}

	var r0 poolv1alpha1.VirtualMachinePoolInterface
	if rf, ok := ret.Get(0).(func(string) poolv1alpha1.VirtualMachinePoolInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(poolv1alpha1.VirtualMachinePoolInterface)
		}
	}

	return r0
}

// VirtualMachinePreference provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) VirtualMachinePreference(namespace string) instancetypev1beta1.VirtualMachinePreferenceInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachinePreference")
	}

	var r0 instancetypev1beta1.VirtualMachinePreferenceInterface
	if rf, ok := ret.Get(0).(func(string) instancetypev1beta1.VirtualMachinePreferenceInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(instancetypev1beta1.VirtualMachinePreferenceInterface)
		}
	}

	return r0
}

// VirtualMachineRestore provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) VirtualMachineRestore(namespace string) snapshotv1alpha1.VirtualMachineRestoreInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachineRestore")
	}

	var r0 snapshotv1alpha1.VirtualMachineRestoreInterface
	if rf, ok := ret.Get(0).(func(string) snapshotv1alpha1.VirtualMachineRestoreInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(snapshotv1alpha1.VirtualMachineRestoreInterface)
		}
	}

	return r0
}

// VirtualMachineSnapshot provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) VirtualMachineSnapshot(namespace string) snapshotv1alpha1.VirtualMachineSnapshotInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachineSnapshot")
	}

	var r0 snapshotv1alpha1.VirtualMachineSnapshotInterface
	if rf, ok := ret.Get(0).(func(string) snapshotv1alpha1.VirtualMachineSnapshotInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(snapshotv1alpha1.VirtualMachineSnapshotInterface)
		}
	}

	return r0
}

// VirtualMachineSnapshotContent provides a mock function with given fields: namespace
func (_m *MockKubevirtClient) VirtualMachineSnapshotContent(namespace string) snapshotv1alpha1.VirtualMachineSnapshotContentInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for VirtualMachineSnapshotContent")
	}

	var r0 snapshotv1alpha1.VirtualMachineSnapshotContentInterface
	if rf, ok := ret.Get(0).(func(string) snapshotv1alpha1.VirtualMachineSnapshotContentInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(snapshotv1alpha1.VirtualMachineSnapshotContentInterface)
		}
	}

	return r0
}

// NewMockKubevirtClient creates a new instance of MockKubevirtClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKubevirtClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKubevirtClient {
	mock := &MockKubevirtClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
