// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	openpolicyagent "github.com/open-edge-platform/orch-library/go/pkg/openpolicyagent"

	resourcev2 "github.com/open-edge-platform/app-orch-deployment/app-resource-manager/api/nbi/v2/resource/v2"

	wsproxy "github.com/open-edge-platform/app-orch-deployment/app-resource-manager/internal/wsproxy"
)

// MockKubevirtManager is an autogenerated mock type for the Manager type
type MockKubevirtManager struct {
	mock.Mock
}

// GetVMWorkloads provides a mock function with given fields: ctx, appID, clusterID
func (_m *MockKubevirtManager) GetVMWorkloads(ctx context.Context, appID string, clusterID string) ([]*resourcev2.AppWorkload, error) {
	ret := _m.Called(ctx, appID, clusterID)

	if len(ret) == 0 {
		panic("no return value specified for GetVMWorkloads")
	}

	var r0 []*resourcev2.AppWorkload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*resourcev2.AppWorkload, error)); ok {
		return rf(ctx, appID, clusterID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*resourcev2.AppWorkload); ok {
		r0 = rf(ctx, appID, clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*resourcev2.AppWorkload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appID, clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVNCAddress provides a mock function with given fields: ctx, appID, clusterID, vmID
func (_m *MockKubevirtManager) GetVNCAddress(ctx context.Context, appID string, clusterID string, vmID string) (string, error) {
	ret := _m.Called(ctx, appID, clusterID, vmID)

	if len(ret) == 0 {
		panic("no return value specified for GetVNCAddress")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, appID, clusterID, vmID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, appID, clusterID, vmID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, appID, clusterID, vmID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVNCWebSocketHandler provides a mock function with given fields: ctx, opaClient, ipSessionCounter, accountSessionCounter
func (_m *MockKubevirtManager) GetVNCWebSocketHandler(ctx context.Context, opaClient openpolicyagent.ClientWithResponsesInterface, ipSessionCounter wsproxy.Counter, accountSessionCounter wsproxy.Counter) func(http.ResponseWriter, *http.Request) {
	ret := _m.Called(ctx, opaClient, ipSessionCounter, accountSessionCounter)

	if len(ret) == 0 {
		panic("no return value specified for GetVNCWebSocketHandler")
	}

	var r0 func(http.ResponseWriter, *http.Request)
	if rf, ok := ret.Get(0).(func(context.Context, openpolicyagent.ClientWithResponsesInterface, wsproxy.Counter, wsproxy.Counter) func(http.ResponseWriter, *http.Request)); ok {
		r0 = rf(ctx, opaClient, ipSessionCounter, accountSessionCounter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(http.ResponseWriter, *http.Request))
		}
	}

	return r0
}

// RestartVM provides a mock function with given fields: ctx, appID, clusterID, vmID
func (_m *MockKubevirtManager) RestartVM(ctx context.Context, appID string, clusterID string, vmID string) error {
	ret := _m.Called(ctx, appID, clusterID, vmID)

	if len(ret) == 0 {
		panic("no return value specified for RestartVM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, appID, clusterID, vmID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartVM provides a mock function with given fields: ctx, appID, clusterID, vmID
func (_m *MockKubevirtManager) StartVM(ctx context.Context, appID string, clusterID string, vmID string) error {
	ret := _m.Called(ctx, appID, clusterID, vmID)

	if len(ret) == 0 {
		panic("no return value specified for StartVM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, appID, clusterID, vmID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopVM provides a mock function with given fields: ctx, appID, clusterID, vmID
func (_m *MockKubevirtManager) StopVM(ctx context.Context, appID string, clusterID string, vmID string) error {
	ret := _m.Called(ctx, appID, clusterID, vmID)

	if len(ret) == 0 {
		panic("no return value specified for StopVM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, appID, clusterID, vmID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockKubevirtManager creates a new instance of MockKubevirtManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKubevirtManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKubevirtManager {
	mock := &MockKubevirtManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
