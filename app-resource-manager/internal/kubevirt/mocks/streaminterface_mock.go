// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	kubecli "kubevirt.io/client-go/kubecli"

	net "net"
)

// MockStreamInterface is an autogenerated mock type for the StreamInterface type
type MockStreamInterface struct {
	mock.Mock
}

// AsConn provides a mock function with given fields:
func (_m *MockStreamInterface) AsConn() net.Conn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AsConn")
	}

	var r0 net.Conn
	if rf, ok := ret.Get(0).(func() net.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	return r0
}

// Stream provides a mock function with given fields: options
func (_m *MockStreamInterface) Stream(options kubecli.StreamOptions) error {
	ret := _m.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(kubecli.StreamOptions) error); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockStreamInterface creates a new instance of MockStreamInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStreamInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStreamInterface {
	mock := &MockStreamInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
