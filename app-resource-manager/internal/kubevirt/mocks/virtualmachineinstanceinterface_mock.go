// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kubecli "kubevirt.io/client-go/kubecli"

	mock "github.com/stretchr/testify/mock"

	time "time"

	types "k8s.io/apimachinery/pkg/types"

	v1 "kubevirt.io/api/core/v1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// MockVirtualMachineInstanceInterface is an autogenerated mock type for the VirtualMachineInstanceInterface type
type MockVirtualMachineInstanceInterface struct {
	mock.Mock
}

// AddVolume provides a mock function with given fields: ctx, name, addVolumeOptions
func (_m *MockVirtualMachineInstanceInterface) AddVolume(ctx context.Context, name string, addVolumeOptions *v1.AddVolumeOptions) error {
	ret := _m.Called(ctx, name, addVolumeOptions)

	if len(ret) == 0 {
		panic("no return value specified for AddVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.AddVolumeOptions) error); ok {
		r0 = rf(ctx, name, addVolumeOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, instance
func (_m *MockVirtualMachineInstanceInterface) Create(ctx context.Context, instance *v1.VirtualMachineInstance) (*v1.VirtualMachineInstance, error) {
	ret := _m.Called(ctx, instance)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.VirtualMachineInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachineInstance) (*v1.VirtualMachineInstance, error)); ok {
		return rf(ctx, instance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachineInstance) *v1.VirtualMachineInstance); ok {
		r0 = rf(ctx, instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachineInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.VirtualMachineInstance) error); ok {
		r1 = rf(ctx, instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, name, options
func (_m *MockVirtualMachineInstanceInterface) Delete(ctx context.Context, name string, options *metav1.DeleteOptions) error {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *metav1.DeleteOptions) error); ok {
		r0 = rf(ctx, name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilesystemList provides a mock function with given fields: ctx, name
func (_m *MockVirtualMachineInstanceInterface) FilesystemList(ctx context.Context, name string) (v1.VirtualMachineInstanceFileSystemList, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for FilesystemList")
	}

	var r0 v1.VirtualMachineInstanceFileSystemList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (v1.VirtualMachineInstanceFileSystemList, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.VirtualMachineInstanceFileSystemList); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(v1.VirtualMachineInstanceFileSystemList)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Freeze provides a mock function with given fields: ctx, name, unfreezeTimeout
func (_m *MockVirtualMachineInstanceInterface) Freeze(ctx context.Context, name string, unfreezeTimeout time.Duration) error {
	ret := _m.Called(ctx, name, unfreezeTimeout)

	if len(ret) == 0 {
		panic("no return value specified for Freeze")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, name, unfreezeTimeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, name, options
func (_m *MockVirtualMachineInstanceInterface) Get(ctx context.Context, name string, options *metav1.GetOptions) (*v1.VirtualMachineInstance, error) {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.VirtualMachineInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *metav1.GetOptions) (*v1.VirtualMachineInstance, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *metav1.GetOptions) *v1.VirtualMachineInstance); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachineInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *metav1.GetOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuestOsInfo provides a mock function with given fields: ctx, name
func (_m *MockVirtualMachineInstanceInterface) GuestOsInfo(ctx context.Context, name string) (v1.VirtualMachineInstanceGuestAgentInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GuestOsInfo")
	}

	var r0 v1.VirtualMachineInstanceGuestAgentInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (v1.VirtualMachineInstanceGuestAgentInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.VirtualMachineInstanceGuestAgentInfo); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(v1.VirtualMachineInstanceGuestAgentInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, opts
func (_m *MockVirtualMachineInstanceInterface) List(ctx context.Context, opts *metav1.ListOptions) (*v1.VirtualMachineInstanceList, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1.VirtualMachineInstanceList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metav1.ListOptions) (*v1.VirtualMachineInstanceList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metav1.ListOptions) *v1.VirtualMachineInstanceList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachineInstanceList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: ctx, name, pt, data, patchOptions, subresources
func (_m *MockVirtualMachineInstanceInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, patchOptions *metav1.PatchOptions, subresources ...string) (*v1.VirtualMachineInstance, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, pt, data, patchOptions)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *v1.VirtualMachineInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, *metav1.PatchOptions, ...string) (*v1.VirtualMachineInstance, error)); ok {
		return rf(ctx, name, pt, data, patchOptions, subresources...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, *metav1.PatchOptions, ...string) *v1.VirtualMachineInstance); ok {
		r0 = rf(ctx, name, pt, data, patchOptions, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachineInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, *metav1.PatchOptions, ...string) error); ok {
		r1 = rf(ctx, name, pt, data, patchOptions, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pause provides a mock function with given fields: ctx, name, pauseOptions
func (_m *MockVirtualMachineInstanceInterface) Pause(ctx context.Context, name string, pauseOptions *v1.PauseOptions) error {
	ret := _m.Called(ctx, name, pauseOptions)

	if len(ret) == 0 {
		panic("no return value specified for Pause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.PauseOptions) error); ok {
		r0 = rf(ctx, name, pauseOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PortForward provides a mock function with given fields: name, port, protocol
func (_m *MockVirtualMachineInstanceInterface) PortForward(name string, port int, protocol string) (kubecli.StreamInterface, error) {
	ret := _m.Called(name, port, protocol)

	if len(ret) == 0 {
		panic("no return value specified for PortForward")
	}

	var r0 kubecli.StreamInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, string) (kubecli.StreamInterface, error)); ok {
		return rf(name, port, protocol)
	}
	if rf, ok := ret.Get(0).(func(string, int, string) kubecli.StreamInterface); ok {
		r0 = rf(name, port, protocol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.StreamInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, string) error); ok {
		r1 = rf(name, port, protocol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveVolume provides a mock function with given fields: ctx, name, removeVolumeOptions
func (_m *MockVirtualMachineInstanceInterface) RemoveVolume(ctx context.Context, name string, removeVolumeOptions *v1.RemoveVolumeOptions) error {
	ret := _m.Called(ctx, name, removeVolumeOptions)

	if len(ret) == 0 {
		panic("no return value specified for RemoveVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.RemoveVolumeOptions) error); ok {
		r0 = rf(ctx, name, removeVolumeOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Screenshot provides a mock function with given fields: ctx, name, options
func (_m *MockVirtualMachineInstanceInterface) Screenshot(ctx context.Context, name string, options *v1.ScreenshotOptions) ([]byte, error) {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for Screenshot")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.ScreenshotOptions) ([]byte, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.ScreenshotOptions) []byte); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.ScreenshotOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SerialConsole provides a mock function with given fields: name, options
func (_m *MockVirtualMachineInstanceInterface) SerialConsole(name string, options *kubecli.SerialConsoleOptions) (kubecli.StreamInterface, error) {
	ret := _m.Called(name, options)

	if len(ret) == 0 {
		panic("no return value specified for SerialConsole")
	}

	var r0 kubecli.StreamInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *kubecli.SerialConsoleOptions) (kubecli.StreamInterface, error)); ok {
		return rf(name, options)
	}
	if rf, ok := ret.Get(0).(func(string, *kubecli.SerialConsoleOptions) kubecli.StreamInterface); ok {
		r0 = rf(name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.StreamInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *kubecli.SerialConsoleOptions) error); ok {
		r1 = rf(name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftReboot provides a mock function with given fields: ctx, name
func (_m *MockVirtualMachineInstanceInterface) SoftReboot(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for SoftReboot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// USBRedir provides a mock function with given fields: vmiName
func (_m *MockVirtualMachineInstanceInterface) USBRedir(vmiName string) (kubecli.StreamInterface, error) {
	ret := _m.Called(vmiName)

	if len(ret) == 0 {
		panic("no return value specified for USBRedir")
	}

	var r0 kubecli.StreamInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (kubecli.StreamInterface, error)); ok {
		return rf(vmiName)
	}
	if rf, ok := ret.Get(0).(func(string) kubecli.StreamInterface); ok {
		r0 = rf(vmiName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.StreamInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(vmiName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unfreeze provides a mock function with given fields: ctx, name
func (_m *MockVirtualMachineInstanceInterface) Unfreeze(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Unfreeze")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unpause provides a mock function with given fields: ctx, name, unpauseOptions
func (_m *MockVirtualMachineInstanceInterface) Unpause(ctx context.Context, name string, unpauseOptions *v1.UnpauseOptions) error {
	ret := _m.Called(ctx, name, unpauseOptions)

	if len(ret) == 0 {
		panic("no return value specified for Unpause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.UnpauseOptions) error); ok {
		r0 = rf(ctx, name, unpauseOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, instance
func (_m *MockVirtualMachineInstanceInterface) Update(ctx context.Context, instance *v1.VirtualMachineInstance) (*v1.VirtualMachineInstance, error) {
	ret := _m.Called(ctx, instance)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.VirtualMachineInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachineInstance) (*v1.VirtualMachineInstance, error)); ok {
		return rf(ctx, instance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachineInstance) *v1.VirtualMachineInstance); ok {
		r0 = rf(ctx, instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachineInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.VirtualMachineInstance) error); ok {
		r1 = rf(ctx, instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserList provides a mock function with given fields: ctx, name
func (_m *MockVirtualMachineInstanceInterface) UserList(ctx context.Context, name string) (v1.VirtualMachineInstanceGuestOSUserList, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for UserList")
	}

	var r0 v1.VirtualMachineInstanceGuestOSUserList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (v1.VirtualMachineInstanceGuestOSUserList, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.VirtualMachineInstanceGuestOSUserList); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(v1.VirtualMachineInstanceGuestOSUserList)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VNC provides a mock function with given fields: name
func (_m *MockVirtualMachineInstanceInterface) VNC(name string) (kubecli.StreamInterface, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for VNC")
	}

	var r0 kubecli.StreamInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (kubecli.StreamInterface, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) kubecli.StreamInterface); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.StreamInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VSOCK provides a mock function with given fields: name, options
func (_m *MockVirtualMachineInstanceInterface) VSOCK(name string, options *v1.VSOCKOptions) (kubecli.StreamInterface, error) {
	ret := _m.Called(name, options)

	if len(ret) == 0 {
		panic("no return value specified for VSOCK")
	}

	var r0 kubecli.StreamInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *v1.VSOCKOptions) (kubecli.StreamInterface, error)); ok {
		return rf(name, options)
	}
	if rf, ok := ret.Get(0).(func(string, *v1.VSOCKOptions) kubecli.StreamInterface); ok {
		r0 = rf(name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.StreamInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *v1.VSOCKOptions) error); ok {
		r1 = rf(name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: ctx, opts
func (_m *MockVirtualMachineInstanceInterface) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) (watch.Interface, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) watch.Interface); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockVirtualMachineInstanceInterface creates a new instance of MockVirtualMachineInstanceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVirtualMachineInstanceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVirtualMachineInstanceInterface {
	mock := &MockVirtualMachineInstanceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
