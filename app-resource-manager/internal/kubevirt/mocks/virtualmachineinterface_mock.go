// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kubecli "kubevirt.io/client-go/kubecli"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	v1 "kubevirt.io/api/core/v1"
)

// MockVirtualMachineInterface is an autogenerated mock type for the VirtualMachineInterface type
type MockVirtualMachineInterface struct {
	mock.Mock
}

// AddInterface provides a mock function with given fields: ctx, name, addInterfaceOptions
func (_m *MockVirtualMachineInterface) AddInterface(ctx context.Context, name string, addInterfaceOptions *v1.AddInterfaceOptions) error {
	ret := _m.Called(ctx, name, addInterfaceOptions)

	if len(ret) == 0 {
		panic("no return value specified for AddInterface")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.AddInterfaceOptions) error); ok {
		r0 = rf(ctx, name, addInterfaceOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddVolume provides a mock function with given fields: ctx, name, addVolumeOptions
func (_m *MockVirtualMachineInterface) AddVolume(ctx context.Context, name string, addVolumeOptions *v1.AddVolumeOptions) error {
	ret := _m.Called(ctx, name, addVolumeOptions)

	if len(ret) == 0 {
		panic("no return value specified for AddVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.AddVolumeOptions) error); ok {
		r0 = rf(ctx, name, addVolumeOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, vm
func (_m *MockVirtualMachineInterface) Create(ctx context.Context, vm *v1.VirtualMachine) (*v1.VirtualMachine, error) {
	ret := _m.Called(ctx, vm)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.VirtualMachine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachine) (*v1.VirtualMachine, error)); ok {
		return rf(ctx, vm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachine) *v1.VirtualMachine); ok {
		r0 = rf(ctx, vm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.VirtualMachine) error); ok {
		r1 = rf(ctx, vm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, name, options
func (_m *MockVirtualMachineInterface) Delete(ctx context.Context, name string, options *metav1.DeleteOptions) error {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *metav1.DeleteOptions) error); ok {
		r0 = rf(ctx, name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForceRestart provides a mock function with given fields: ctx, name, restartOptions
func (_m *MockVirtualMachineInterface) ForceRestart(ctx context.Context, name string, restartOptions *v1.RestartOptions) error {
	ret := _m.Called(ctx, name, restartOptions)

	if len(ret) == 0 {
		panic("no return value specified for ForceRestart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.RestartOptions) error); ok {
		r0 = rf(ctx, name, restartOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForceStop provides a mock function with given fields: ctx, name, stopOptions
func (_m *MockVirtualMachineInterface) ForceStop(ctx context.Context, name string, stopOptions *v1.StopOptions) error {
	ret := _m.Called(ctx, name, stopOptions)

	if len(ret) == 0 {
		panic("no return value specified for ForceStop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.StopOptions) error); ok {
		r0 = rf(ctx, name, stopOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, name, options
func (_m *MockVirtualMachineInterface) Get(ctx context.Context, name string, options *metav1.GetOptions) (*v1.VirtualMachine, error) {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.VirtualMachine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *metav1.GetOptions) (*v1.VirtualMachine, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *metav1.GetOptions) *v1.VirtualMachine); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *metav1.GetOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithExpandedSpec provides a mock function with given fields: ctx, name
func (_m *MockVirtualMachineInterface) GetWithExpandedSpec(ctx context.Context, name string) (*v1.VirtualMachine, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetWithExpandedSpec")
	}

	var r0 *v1.VirtualMachine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1.VirtualMachine, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.VirtualMachine); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, opts
func (_m *MockVirtualMachineInterface) List(ctx context.Context, opts *metav1.ListOptions) (*v1.VirtualMachineList, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1.VirtualMachineList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metav1.ListOptions) (*v1.VirtualMachineList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metav1.ListOptions) *v1.VirtualMachineList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachineList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MemoryDump provides a mock function with given fields: ctx, name, memoryDumpRequest
func (_m *MockVirtualMachineInterface) MemoryDump(ctx context.Context, name string, memoryDumpRequest *v1.VirtualMachineMemoryDumpRequest) error {
	ret := _m.Called(ctx, name, memoryDumpRequest)

	if len(ret) == 0 {
		panic("no return value specified for MemoryDump")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.VirtualMachineMemoryDumpRequest) error); ok {
		r0 = rf(ctx, name, memoryDumpRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrate provides a mock function with given fields: ctx, name, migrateOptions
func (_m *MockVirtualMachineInterface) Migrate(ctx context.Context, name string, migrateOptions *v1.MigrateOptions) error {
	ret := _m.Called(ctx, name, migrateOptions)

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.MigrateOptions) error); ok {
		r0 = rf(ctx, name, migrateOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Patch provides a mock function with given fields: ctx, name, pt, data, patchOptions, subresources
func (_m *MockVirtualMachineInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, patchOptions *metav1.PatchOptions, subresources ...string) (*v1.VirtualMachine, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, pt, data, patchOptions)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *v1.VirtualMachine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, *metav1.PatchOptions, ...string) (*v1.VirtualMachine, error)); ok {
		return rf(ctx, name, pt, data, patchOptions, subresources...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, *metav1.PatchOptions, ...string) *v1.VirtualMachine); ok {
		r0 = rf(ctx, name, pt, data, patchOptions, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, *metav1.PatchOptions, ...string) error); ok {
		r1 = rf(ctx, name, pt, data, patchOptions, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchStatus provides a mock function with given fields: ctx, name, pt, data, patchOptions
func (_m *MockVirtualMachineInterface) PatchStatus(ctx context.Context, name string, pt types.PatchType, data []byte, patchOptions *metav1.PatchOptions) (*v1.VirtualMachine, error) {
	ret := _m.Called(ctx, name, pt, data, patchOptions)

	if len(ret) == 0 {
		panic("no return value specified for PatchStatus")
	}

	var r0 *v1.VirtualMachine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, *metav1.PatchOptions) (*v1.VirtualMachine, error)); ok {
		return rf(ctx, name, pt, data, patchOptions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, *metav1.PatchOptions) *v1.VirtualMachine); ok {
		r0 = rf(ctx, name, pt, data, patchOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, *metav1.PatchOptions) error); ok {
		r1 = rf(ctx, name, pt, data, patchOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortForward provides a mock function with given fields: name, port, protocol
func (_m *MockVirtualMachineInterface) PortForward(name string, port int, protocol string) (kubecli.StreamInterface, error) {
	ret := _m.Called(name, port, protocol)

	if len(ret) == 0 {
		panic("no return value specified for PortForward")
	}

	var r0 kubecli.StreamInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, string) (kubecli.StreamInterface, error)); ok {
		return rf(name, port, protocol)
	}
	if rf, ok := ret.Get(0).(func(string, int, string) kubecli.StreamInterface); ok {
		r0 = rf(name, port, protocol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecli.StreamInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, string) error); ok {
		r1 = rf(name, port, protocol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveInterface provides a mock function with given fields: ctx, name, removeInterfaceOptions
func (_m *MockVirtualMachineInterface) RemoveInterface(ctx context.Context, name string, removeInterfaceOptions *v1.RemoveInterfaceOptions) error {
	ret := _m.Called(ctx, name, removeInterfaceOptions)

	if len(ret) == 0 {
		panic("no return value specified for RemoveInterface")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.RemoveInterfaceOptions) error); ok {
		r0 = rf(ctx, name, removeInterfaceOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveMemoryDump provides a mock function with given fields: ctx, name
func (_m *MockVirtualMachineInterface) RemoveMemoryDump(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMemoryDump")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveVolume provides a mock function with given fields: ctx, name, removeVolumeOptions
func (_m *MockVirtualMachineInterface) RemoveVolume(ctx context.Context, name string, removeVolumeOptions *v1.RemoveVolumeOptions) error {
	ret := _m.Called(ctx, name, removeVolumeOptions)

	if len(ret) == 0 {
		panic("no return value specified for RemoveVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.RemoveVolumeOptions) error); ok {
		r0 = rf(ctx, name, removeVolumeOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Restart provides a mock function with given fields: ctx, name, restartOptions
func (_m *MockVirtualMachineInterface) Restart(ctx context.Context, name string, restartOptions *v1.RestartOptions) error {
	ret := _m.Called(ctx, name, restartOptions)

	if len(ret) == 0 {
		panic("no return value specified for Restart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.RestartOptions) error); ok {
		r0 = rf(ctx, name, restartOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx, name, startOptions
func (_m *MockVirtualMachineInterface) Start(ctx context.Context, name string, startOptions *v1.StartOptions) error {
	ret := _m.Called(ctx, name, startOptions)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.StartOptions) error); ok {
		r0 = rf(ctx, name, startOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx, name, stopOptions
func (_m *MockVirtualMachineInterface) Stop(ctx context.Context, name string, stopOptions *v1.StopOptions) error {
	ret := _m.Called(ctx, name, stopOptions)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.StopOptions) error); ok {
		r0 = rf(ctx, name, stopOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, vm
func (_m *MockVirtualMachineInterface) Update(ctx context.Context, vm *v1.VirtualMachine) (*v1.VirtualMachine, error) {
	ret := _m.Called(ctx, vm)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.VirtualMachine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachine) (*v1.VirtualMachine, error)); ok {
		return rf(ctx, vm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachine) *v1.VirtualMachine); ok {
		r0 = rf(ctx, vm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.VirtualMachine) error); ok {
		r1 = rf(ctx, vm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, vm
func (_m *MockVirtualMachineInterface) UpdateStatus(ctx context.Context, vm *v1.VirtualMachine) (*v1.VirtualMachine, error) {
	ret := _m.Called(ctx, vm)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *v1.VirtualMachine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachine) (*v1.VirtualMachine, error)); ok {
		return rf(ctx, vm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachine) *v1.VirtualMachine); ok {
		r0 = rf(ctx, vm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.VirtualMachine) error); ok {
		r1 = rf(ctx, vm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockVirtualMachineInterface creates a new instance of MockVirtualMachineInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVirtualMachineInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVirtualMachineInterface {
	mock := &MockVirtualMachineInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
