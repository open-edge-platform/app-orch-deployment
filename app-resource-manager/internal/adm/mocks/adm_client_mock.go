// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockADMClient is an autogenerated mock type for the Client type
type MockADMClient struct {
	mock.Mock
}

// GetAppNamespace provides a mock function with given fields: ctx, appID
func (_m *MockADMClient) GetAppNamespace(ctx context.Context, appID string) (string, error) {
	ret := _m.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppNamespace")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, appID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, appID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKubeConfig provides a mock function with given fields: ctx, clusterID
func (_m *MockADMClient) GetKubeConfig(ctx context.Context, clusterID string) ([]byte, error) {
	ret := _m.Called(ctx, clusterID)

	if len(ret) == 0 {
		panic("no return value specified for GetKubeConfig")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, clusterID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockADMClient creates a new instance of MockADMClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockADMClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockADMClient {
	mock := &MockADMClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
