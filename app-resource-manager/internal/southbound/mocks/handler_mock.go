// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	resourcev2 "github.com/open-edge-platform/app-orch-deployment/app-resource-manager/api/nbi/v2/resource/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

// AccessVMWithVNC provides a mock function with given fields: ctx, appID, clusterID, vmID
func (_m *MockHandler) AccessVMWithVNC(ctx context.Context, appID string, clusterID string, vmID string) (string, error) {
	ret := _m.Called(ctx, appID, clusterID, vmID)

	if len(ret) == 0 {
		panic("no return value specified for AccessVMWithVNC")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, appID, clusterID, vmID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, appID, clusterID, vmID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, appID, clusterID, vmID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePod provides a mock function with given fields: ctx, clusterID, namespace, podName
func (_m *MockHandler) DeletePod(ctx context.Context, clusterID string, namespace string, podName string) error {
	ret := _m.Called(ctx, clusterID, namespace, podName)

	if len(ret) == 0 {
		panic("no return value specified for DeletePod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, clusterID, namespace, podName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAppEndpointsV2 provides a mock function with given fields: ctx, appID, clusterID
func (_m *MockHandler) GetAppEndpointsV2(ctx context.Context, appID string, clusterID string) ([]*resourcev2.AppEndpoint, error) {
	ret := _m.Called(ctx, appID, clusterID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppEndpointsV2")
	}

	var r0 []*resourcev2.AppEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*resourcev2.AppEndpoint, error)); ok {
		return rf(ctx, appID, clusterID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*resourcev2.AppEndpoint); ok {
		r0 = rf(ctx, appID, clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*resourcev2.AppEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appID, clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppWorkLoads provides a mock function with given fields: ctx, appID, clusterID
func (_m *MockHandler) GetAppWorkLoads(ctx context.Context, appID string, clusterID string) ([]*resourcev2.AppWorkload, error) {
	ret := _m.Called(ctx, appID, clusterID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppWorkLoads")
	}

	var r0 []*resourcev2.AppWorkload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*resourcev2.AppWorkload, error)); ok {
		return rf(ctx, appID, clusterID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*resourcev2.AppWorkload); ok {
		r0 = rf(ctx, appID, clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*resourcev2.AppWorkload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appID, clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartVM provides a mock function with given fields: ctx, appID, clusterID, vmID
func (_m *MockHandler) RestartVM(ctx context.Context, appID string, clusterID string, vmID string) error {
	ret := _m.Called(ctx, appID, clusterID, vmID)

	if len(ret) == 0 {
		panic("no return value specified for RestartVM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, appID, clusterID, vmID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartVM provides a mock function with given fields: ctx, appID, clusterID, vmID
func (_m *MockHandler) StartVM(ctx context.Context, appID string, clusterID string, vmID string) error {
	ret := _m.Called(ctx, appID, clusterID, vmID)

	if len(ret) == 0 {
		panic("no return value specified for StartVM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, appID, clusterID, vmID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopVM provides a mock function with given fields: ctx, appID, clusterID, vmID
func (_m *MockHandler) StopVM(ctx context.Context, appID string, clusterID string, vmID string) error {
	ret := _m.Called(ctx, appID, clusterID, vmID)

	if len(ret) == 0 {
		panic("no return value specified for StopVM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, appID, clusterID, vmID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
