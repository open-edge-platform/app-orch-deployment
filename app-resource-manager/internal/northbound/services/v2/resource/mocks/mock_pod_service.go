// SPDX-FileCopyrightText: (C) 2024 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: api/nbi/v2/resource/v2/pod_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=api/nbi/v2/resource/v2/pod_service_grpc.pb.go -destination=internal/northbound/services/v2/resource/mocks/mock_pod_service.go -package=mocks PodServiceServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	resourcev2 "github.com/open-edge-platform/app-orch-deployment/app-resource-manager/api/nbi/v2/resource/v2"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPodServiceClient is a mock of PodServiceClient interface.
type MockPodServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPodServiceClientMockRecorder
	isgomock struct{}
}

// MockPodServiceClientMockRecorder is the mock recorder for MockPodServiceClient.
type MockPodServiceClientMockRecorder struct {
	mock *MockPodServiceClient
}

// NewMockPodServiceClient creates a new mock instance.
func NewMockPodServiceClient(ctrl *gomock.Controller) *MockPodServiceClient {
	mock := &MockPodServiceClient{ctrl: ctrl}
	mock.recorder = &MockPodServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodServiceClient) EXPECT() *MockPodServiceClientMockRecorder {
	return m.recorder
}

// DeletePod mocks base method.
func (m *MockPodServiceClient) DeletePod(ctx context.Context, in *resourcev2.DeletePodRequest, opts ...grpc.CallOption) (*resourcev2.DeletePodResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePod", varargs...)
	ret0, _ := ret[0].(*resourcev2.DeletePodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePod indicates an expected call of DeletePod.
func (mr *MockPodServiceClientMockRecorder) DeletePod(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockPodServiceClient)(nil).DeletePod), varargs...)
}

// MockPodServiceServer is a mock of PodServiceServer interface.
type MockPodServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPodServiceServerMockRecorder
	isgomock struct{}
}

func (m *MockPodServiceServer) Register(s *grpc.Server) {
	resourcev2.RegisterPodServiceServer(s, m)
}

// MockPodServiceServerMockRecorder is the mock recorder for MockPodServiceServer.
type MockPodServiceServerMockRecorder struct {
	mock *MockPodServiceServer
}

// NewMockPodServiceServer creates a new mock instance.
func NewMockPodServiceServer(ctrl *gomock.Controller) *MockPodServiceServer {
	mock := &MockPodServiceServer{ctrl: ctrl}
	mock.recorder = &MockPodServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodServiceServer) EXPECT() *MockPodServiceServerMockRecorder {
	return m.recorder
}

// DeletePod mocks base method.
func (m *MockPodServiceServer) DeletePod(arg0 context.Context, arg1 *resourcev2.DeletePodRequest) (*resourcev2.DeletePodResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePod", arg0, arg1)
	ret0, _ := ret[0].(*resourcev2.DeletePodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePod indicates an expected call of DeletePod.
func (mr *MockPodServiceServerMockRecorder) DeletePod(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockPodServiceServer)(nil).DeletePod), arg0, arg1)
}

// MockUnsafePodServiceServer is a mock of UnsafePodServiceServer interface.
type MockUnsafePodServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePodServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafePodServiceServerMockRecorder is the mock recorder for MockUnsafePodServiceServer.
type MockUnsafePodServiceServerMockRecorder struct {
	mock *MockUnsafePodServiceServer
}

// NewMockUnsafePodServiceServer creates a new mock instance.
func NewMockUnsafePodServiceServer(ctrl *gomock.Controller) *MockUnsafePodServiceServer {
	mock := &MockUnsafePodServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePodServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePodServiceServer) EXPECT() *MockUnsafePodServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPodServiceServer mocks base method.
func (m *MockUnsafePodServiceServer) mustEmbedUnimplementedPodServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPodServiceServer")
}

// mustEmbedUnimplementedPodServiceServer indicates an expected call of mustEmbedUnimplementedPodServiceServer.
func (mr *MockUnsafePodServiceServerMockRecorder) mustEmbedUnimplementedPodServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPodServiceServer", reflect.TypeOf((*MockUnsafePodServiceServer)(nil).mustEmbedUnimplementedPodServiceServer))
}
