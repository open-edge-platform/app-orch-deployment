// SPDX-FileCopyrightText: (C) 2024 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: api/nbi/v2/resource/v2/app_workload_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=api/nbi/v2/resource/v2/app_workload_service_grpc.pb.go -destination=internal/northbound/services/v2/resource/mocks/mock_app_workload_service.go -package=mocks AppWorkloadServiceServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	resourcev2 "github.com/open-edge-platform/app-orch-deployment/app-resource-manager/api/nbi/v2/resource/v2"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAppWorkloadServiceClient is a mock of AppWorkloadServiceClient interface.
type MockAppWorkloadServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppWorkloadServiceClientMockRecorder
	isgomock struct{}
}

// MockAppWorkloadServiceClientMockRecorder is the mock recorder for MockAppWorkloadServiceClient.
type MockAppWorkloadServiceClientMockRecorder struct {
	mock *MockAppWorkloadServiceClient
}

// NewMockAppWorkloadServiceClient creates a new mock instance.
func NewMockAppWorkloadServiceClient(ctrl *gomock.Controller) *MockAppWorkloadServiceClient {
	mock := &MockAppWorkloadServiceClient{ctrl: ctrl}
	mock.recorder = &MockAppWorkloadServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppWorkloadServiceClient) EXPECT() *MockAppWorkloadServiceClientMockRecorder {
	return m.recorder
}

// ListAppWorkloads mocks base method.
func (m *MockAppWorkloadServiceClient) ListAppWorkloads(ctx context.Context, in *resourcev2.ListAppWorkloadsRequest, opts ...grpc.CallOption) (*resourcev2.ListAppWorkloadsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppWorkloads", varargs...)
	ret0, _ := ret[0].(*resourcev2.ListAppWorkloadsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppWorkloads indicates an expected call of ListAppWorkloads.
func (mr *MockAppWorkloadServiceClientMockRecorder) ListAppWorkloads(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppWorkloads", reflect.TypeOf((*MockAppWorkloadServiceClient)(nil).ListAppWorkloads), varargs...)
}

// MockAppWorkloadServiceServer is a mock of AppWorkloadServiceServer interface.
type MockAppWorkloadServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAppWorkloadServiceServerMockRecorder
	isgomock struct{}
}

func (m *MockAppWorkloadServiceServer) Register(s *grpc.Server) {
	resourcev2.RegisterAppWorkloadServiceServer(s, m)
}

// MockAppWorkloadServiceServerMockRecorder is the mock recorder for MockAppWorkloadServiceServer.
type MockAppWorkloadServiceServerMockRecorder struct {
	mock *MockAppWorkloadServiceServer
}

// NewMockAppWorkloadServiceServer creates a new mock instance.
func NewMockAppWorkloadServiceServer(ctrl *gomock.Controller) *MockAppWorkloadServiceServer {
	mock := &MockAppWorkloadServiceServer{ctrl: ctrl}
	mock.recorder = &MockAppWorkloadServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppWorkloadServiceServer) EXPECT() *MockAppWorkloadServiceServerMockRecorder {
	return m.recorder
}

// ListAppWorkloads mocks base method.
func (m *MockAppWorkloadServiceServer) ListAppWorkloads(arg0 context.Context, arg1 *resourcev2.ListAppWorkloadsRequest) (*resourcev2.ListAppWorkloadsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppWorkloads", arg0, arg1)
	ret0, _ := ret[0].(*resourcev2.ListAppWorkloadsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppWorkloads indicates an expected call of ListAppWorkloads.
func (mr *MockAppWorkloadServiceServerMockRecorder) ListAppWorkloads(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppWorkloads", reflect.TypeOf((*MockAppWorkloadServiceServer)(nil).ListAppWorkloads), arg0, arg1)
}

// MockUnsafeAppWorkloadServiceServer is a mock of UnsafeAppWorkloadServiceServer interface.
type MockUnsafeAppWorkloadServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAppWorkloadServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeAppWorkloadServiceServerMockRecorder is the mock recorder for MockUnsafeAppWorkloadServiceServer.
type MockUnsafeAppWorkloadServiceServerMockRecorder struct {
	mock *MockUnsafeAppWorkloadServiceServer
}

// NewMockUnsafeAppWorkloadServiceServer creates a new mock instance.
func NewMockUnsafeAppWorkloadServiceServer(ctrl *gomock.Controller) *MockUnsafeAppWorkloadServiceServer {
	mock := &MockUnsafeAppWorkloadServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAppWorkloadServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAppWorkloadServiceServer) EXPECT() *MockUnsafeAppWorkloadServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAppWorkloadServiceServer mocks base method.
func (m *MockUnsafeAppWorkloadServiceServer) mustEmbedUnimplementedAppWorkloadServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAppWorkloadServiceServer")
}

// mustEmbedUnimplementedAppWorkloadServiceServer indicates an expected call of mustEmbedUnimplementedAppWorkloadServiceServer.
func (mr *MockUnsafeAppWorkloadServiceServerMockRecorder) mustEmbedUnimplementedAppWorkloadServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAppWorkloadServiceServer", reflect.TypeOf((*MockUnsafeAppWorkloadServiceServer)(nil).mustEmbedUnimplementedAppWorkloadServiceServer))
}
