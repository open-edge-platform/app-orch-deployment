// SPDX-FileCopyrightText: (C) 2024 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: api/nbi/v2/resource/v2/vm_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=api/nbi/v2/resource/v2/vm_service_grpc.pb.go -destination=internal/northbound/services/v2/resource/mocks/mock_vm_service.go -package=mocks VirtualMachineServiceServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	resourcev2 "github.com/open-edge-platform/app-orch-deployment/app-resource-manager/api/nbi/v2/resource/v2"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockVirtualMachineServiceClient is a mock of VirtualMachineServiceClient interface.
type MockVirtualMachineServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineServiceClientMockRecorder
	isgomock struct{}
}

// MockVirtualMachineServiceClientMockRecorder is the mock recorder for MockVirtualMachineServiceClient.
type MockVirtualMachineServiceClientMockRecorder struct {
	mock *MockVirtualMachineServiceClient
}

// NewMockVirtualMachineServiceClient creates a new mock instance.
func NewMockVirtualMachineServiceClient(ctrl *gomock.Controller) *MockVirtualMachineServiceClient {
	mock := &MockVirtualMachineServiceClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineServiceClient) EXPECT() *MockVirtualMachineServiceClientMockRecorder {
	return m.recorder
}

// GetVNC mocks base method.
func (m *MockVirtualMachineServiceClient) GetVNC(ctx context.Context, in *resourcev2.GetVNCRequest, opts ...grpc.CallOption) (*resourcev2.GetVNCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVNC", varargs...)
	ret0, _ := ret[0].(*resourcev2.GetVNCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVNC indicates an expected call of GetVNC.
func (mr *MockVirtualMachineServiceClientMockRecorder) GetVNC(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVNC", reflect.TypeOf((*MockVirtualMachineServiceClient)(nil).GetVNC), varargs...)
}

// RestartVirtualMachine mocks base method.
func (m *MockVirtualMachineServiceClient) RestartVirtualMachine(ctx context.Context, in *resourcev2.RestartVirtualMachineRequest, opts ...grpc.CallOption) (*resourcev2.RestartVirtualMachineResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartVirtualMachine", varargs...)
	ret0, _ := ret[0].(*resourcev2.RestartVirtualMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartVirtualMachine indicates an expected call of RestartVirtualMachine.
func (mr *MockVirtualMachineServiceClientMockRecorder) RestartVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartVirtualMachine", reflect.TypeOf((*MockVirtualMachineServiceClient)(nil).RestartVirtualMachine), varargs...)
}

// StartVirtualMachine mocks base method.
func (m *MockVirtualMachineServiceClient) StartVirtualMachine(ctx context.Context, in *resourcev2.StartVirtualMachineRequest, opts ...grpc.CallOption) (*resourcev2.StartVirtualMachineResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartVirtualMachine", varargs...)
	ret0, _ := ret[0].(*resourcev2.StartVirtualMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartVirtualMachine indicates an expected call of StartVirtualMachine.
func (mr *MockVirtualMachineServiceClientMockRecorder) StartVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVirtualMachine", reflect.TypeOf((*MockVirtualMachineServiceClient)(nil).StartVirtualMachine), varargs...)
}

// StopVirtualMachine mocks base method.
func (m *MockVirtualMachineServiceClient) StopVirtualMachine(ctx context.Context, in *resourcev2.StopVirtualMachineRequest, opts ...grpc.CallOption) (*resourcev2.StopVirtualMachineResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopVirtualMachine", varargs...)
	ret0, _ := ret[0].(*resourcev2.StopVirtualMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopVirtualMachine indicates an expected call of StopVirtualMachine.
func (mr *MockVirtualMachineServiceClientMockRecorder) StopVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVirtualMachine", reflect.TypeOf((*MockVirtualMachineServiceClient)(nil).StopVirtualMachine), varargs...)
}

// MockVirtualMachineServiceServer is a mock of VirtualMachineServiceServer interface.
type MockVirtualMachineServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineServiceServerMockRecorder
	isgomock struct{}
}

func (m *MockVirtualMachineServiceServer) Register(s *grpc.Server) {
	resourcev2.RegisterVirtualMachineServiceServer(s, m)
}

// MockVirtualMachineServiceServerMockRecorder is the mock recorder for MockVirtualMachineServiceServer.
type MockVirtualMachineServiceServerMockRecorder struct {
	mock *MockVirtualMachineServiceServer
}

// NewMockVirtualMachineServiceServer creates a new mock instance.
func NewMockVirtualMachineServiceServer(ctrl *gomock.Controller) *MockVirtualMachineServiceServer {
	mock := &MockVirtualMachineServiceServer{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineServiceServer) EXPECT() *MockVirtualMachineServiceServerMockRecorder {
	return m.recorder
}

// GetVNC mocks base method.
func (m *MockVirtualMachineServiceServer) GetVNC(arg0 context.Context, arg1 *resourcev2.GetVNCRequest) (*resourcev2.GetVNCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVNC", arg0, arg1)
	ret0, _ := ret[0].(*resourcev2.GetVNCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVNC indicates an expected call of GetVNC.
func (mr *MockVirtualMachineServiceServerMockRecorder) GetVNC(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVNC", reflect.TypeOf((*MockVirtualMachineServiceServer)(nil).GetVNC), arg0, arg1)
}

// RestartVirtualMachine mocks base method.
func (m *MockVirtualMachineServiceServer) RestartVirtualMachine(arg0 context.Context, arg1 *resourcev2.RestartVirtualMachineRequest) (*resourcev2.RestartVirtualMachineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*resourcev2.RestartVirtualMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartVirtualMachine indicates an expected call of RestartVirtualMachine.
func (mr *MockVirtualMachineServiceServerMockRecorder) RestartVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartVirtualMachine", reflect.TypeOf((*MockVirtualMachineServiceServer)(nil).RestartVirtualMachine), arg0, arg1)
}

// StartVirtualMachine mocks base method.
func (m *MockVirtualMachineServiceServer) StartVirtualMachine(arg0 context.Context, arg1 *resourcev2.StartVirtualMachineRequest) (*resourcev2.StartVirtualMachineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*resourcev2.StartVirtualMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartVirtualMachine indicates an expected call of StartVirtualMachine.
func (mr *MockVirtualMachineServiceServerMockRecorder) StartVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVirtualMachine", reflect.TypeOf((*MockVirtualMachineServiceServer)(nil).StartVirtualMachine), arg0, arg1)
}

// StopVirtualMachine mocks base method.
func (m *MockVirtualMachineServiceServer) StopVirtualMachine(arg0 context.Context, arg1 *resourcev2.StopVirtualMachineRequest) (*resourcev2.StopVirtualMachineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*resourcev2.StopVirtualMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopVirtualMachine indicates an expected call of StopVirtualMachine.
func (mr *MockVirtualMachineServiceServerMockRecorder) StopVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVirtualMachine", reflect.TypeOf((*MockVirtualMachineServiceServer)(nil).StopVirtualMachine), arg0, arg1)
}

// MockUnsafeVirtualMachineServiceServer is a mock of UnsafeVirtualMachineServiceServer interface.
type MockUnsafeVirtualMachineServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeVirtualMachineServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeVirtualMachineServiceServerMockRecorder is the mock recorder for MockUnsafeVirtualMachineServiceServer.
type MockUnsafeVirtualMachineServiceServerMockRecorder struct {
	mock *MockUnsafeVirtualMachineServiceServer
}

// NewMockUnsafeVirtualMachineServiceServer creates a new mock instance.
func NewMockUnsafeVirtualMachineServiceServer(ctrl *gomock.Controller) *MockUnsafeVirtualMachineServiceServer {
	mock := &MockUnsafeVirtualMachineServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeVirtualMachineServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeVirtualMachineServiceServer) EXPECT() *MockUnsafeVirtualMachineServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedVirtualMachineServiceServer mocks base method.
func (m *MockUnsafeVirtualMachineServiceServer) mustEmbedUnimplementedVirtualMachineServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVirtualMachineServiceServer")
}

// mustEmbedUnimplementedVirtualMachineServiceServer indicates an expected call of mustEmbedUnimplementedVirtualMachineServiceServer.
func (mr *MockUnsafeVirtualMachineServiceServerMockRecorder) mustEmbedUnimplementedVirtualMachineServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVirtualMachineServiceServer", reflect.TypeOf((*MockUnsafeVirtualMachineServiceServer)(nil).mustEmbedUnimplementedVirtualMachineServiceServer))
}
