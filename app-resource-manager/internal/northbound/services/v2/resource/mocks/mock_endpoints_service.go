// SPDX-FileCopyrightText: (C) 2024 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: api/nbi/v2/resource/v2/endpoint_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=api/nbi/v2/resource/v2/endpoint_service_grpc.pb.go -destination=internal/northbound/services/v2/resource/mocks/mock_endpoints_service.go -package=mocks EndpointsServiceServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	resourcev2 "github.com/open-edge-platform/app-orch-deployment/app-resource-manager/api/nbi/v2/resource/v2"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEndpointsServiceClient is a mock of EndpointsServiceClient interface.
type MockEndpointsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointsServiceClientMockRecorder
	isgomock struct{}
}

// MockEndpointsServiceClientMockRecorder is the mock recorder for MockEndpointsServiceClient.
type MockEndpointsServiceClientMockRecorder struct {
	mock *MockEndpointsServiceClient
}

// NewMockEndpointsServiceClient creates a new mock instance.
func NewMockEndpointsServiceClient(ctrl *gomock.Controller) *MockEndpointsServiceClient {
	mock := &MockEndpointsServiceClient{ctrl: ctrl}
	mock.recorder = &MockEndpointsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointsServiceClient) EXPECT() *MockEndpointsServiceClientMockRecorder {
	return m.recorder
}

// ListAppEndpoints mocks base method.
func (m *MockEndpointsServiceClient) ListAppEndpoints(ctx context.Context, in *resourcev2.ListAppEndpointsRequest, opts ...grpc.CallOption) (*resourcev2.ListAppEndpointsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppEndpoints", varargs...)
	ret0, _ := ret[0].(*resourcev2.ListAppEndpointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppEndpoints indicates an expected call of ListAppEndpoints.
func (mr *MockEndpointsServiceClientMockRecorder) ListAppEndpoints(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppEndpoints", reflect.TypeOf((*MockEndpointsServiceClient)(nil).ListAppEndpoints), varargs...)
}

// MockEndpointsServiceServer is a mock of EndpointsServiceServer interface.
type MockEndpointsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointsServiceServerMockRecorder
	isgomock struct{}
}

func (m *MockEndpointsServiceServer) Register(s *grpc.Server) {
	resourcev2.RegisterEndpointsServiceServer(s, m)
}

// MockEndpointsServiceServerMockRecorder is the mock recorder for MockEndpointsServiceServer.
type MockEndpointsServiceServerMockRecorder struct {
	mock *MockEndpointsServiceServer
}

// NewMockEndpointsServiceServer creates a new mock instance.
func NewMockEndpointsServiceServer(ctrl *gomock.Controller) *MockEndpointsServiceServer {
	mock := &MockEndpointsServiceServer{ctrl: ctrl}
	mock.recorder = &MockEndpointsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointsServiceServer) EXPECT() *MockEndpointsServiceServerMockRecorder {
	return m.recorder
}

// ListAppEndpoints mocks base method.
func (m *MockEndpointsServiceServer) ListAppEndpoints(arg0 context.Context, arg1 *resourcev2.ListAppEndpointsRequest) (*resourcev2.ListAppEndpointsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppEndpoints", arg0, arg1)
	ret0, _ := ret[0].(*resourcev2.ListAppEndpointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppEndpoints indicates an expected call of ListAppEndpoints.
func (mr *MockEndpointsServiceServerMockRecorder) ListAppEndpoints(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppEndpoints", reflect.TypeOf((*MockEndpointsServiceServer)(nil).ListAppEndpoints), arg0, arg1)
}

// MockUnsafeEndpointsServiceServer is a mock of UnsafeEndpointsServiceServer interface.
type MockUnsafeEndpointsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEndpointsServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeEndpointsServiceServerMockRecorder is the mock recorder for MockUnsafeEndpointsServiceServer.
type MockUnsafeEndpointsServiceServerMockRecorder struct {
	mock *MockUnsafeEndpointsServiceServer
}

// NewMockUnsafeEndpointsServiceServer creates a new mock instance.
func NewMockUnsafeEndpointsServiceServer(ctrl *gomock.Controller) *MockUnsafeEndpointsServiceServer {
	mock := &MockUnsafeEndpointsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEndpointsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEndpointsServiceServer) EXPECT() *MockUnsafeEndpointsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEndpointsServiceServer mocks base method.
func (m *MockUnsafeEndpointsServiceServer) mustEmbedUnimplementedEndpointsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEndpointsServiceServer")
}

// mustEmbedUnimplementedEndpointsServiceServer indicates an expected call of mustEmbedUnimplementedEndpointsServiceServer.
func (mr *MockUnsafeEndpointsServiceServerMockRecorder) mustEmbedUnimplementedEndpointsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEndpointsServiceServer", reflect.TypeOf((*MockUnsafeEndpointsServiceServer)(nil).mustEmbedUnimplementedEndpointsServiceServer))
}
