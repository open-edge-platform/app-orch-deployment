// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoryResponseItem HistoryResponseItem individual image layer information in response to ImageHistory operation
//
// swagger:model HistoryResponseItem
type HistoryResponseItem struct {

	// comment
	// Required: true
	Comment *string `json:"Comment"`

	// created
	// Required: true
	Created *int64 `json:"Created"`

	// created by
	// Required: true
	CreatedBy *string `json:"CreatedBy"`

	// Id
	// Required: true
	ID *string `json:"Id"`

	// size
	// Required: true
	Size *int64 `json:"Size"`

	// tags
	// Required: true
	Tags []string `json:"Tags"`
}

// Validate validates this history response item
func (m *HistoryResponseItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistoryResponseItem) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("Comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *HistoryResponseItem) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("Created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *HistoryResponseItem) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("CreatedBy", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *HistoryResponseItem) validateID(formats strfmt.Registry) error {

	if err := validate.Required("Id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *HistoryResponseItem) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("Size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *HistoryResponseItem) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("Tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this history response item based on context it is used
func (m *HistoryResponseItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HistoryResponseItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoryResponseItem) UnmarshalBinary(b []byte) error {
	var res HistoryResponseItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
