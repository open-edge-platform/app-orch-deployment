// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LinuxCPU LinuxCPU for Linux cgroup 'cpu' resource management
//
// swagger:model LinuxCPU
type LinuxCPU struct {

	// CPUs to use within the cpuset. Default is to use any CPU available.
	Cpus string `json:"cpus,omitempty"`

	// List of memory nodes in the cpuset. Default is to use any available memory node.
	Mems string `json:"mems,omitempty"`

	// CPU period to be used for hardcapping (in usecs).
	Period uint64 `json:"period,omitempty"`

	// CPU hardcap limit (in usecs). Allowed cpu time in a given period.
	Quota int64 `json:"quota,omitempty"`

	// CPU period to be used for realtime scheduling (in usecs).
	RealtimePeriod uint64 `json:"realtimePeriod,omitempty"`

	// How much time realtime scheduling may use (in usecs).
	RealtimeRuntime int64 `json:"realtimeRuntime,omitempty"`

	// CPU shares (relative weight (ratio) vs. other cgroups with cpu shares).
	Shares uint64 `json:"shares,omitempty"`
}

// Validate validates this linux CPU
func (m *LinuxCPU) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this linux CPU based on context it is used
func (m *LinuxCPU) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LinuxCPU) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LinuxCPU) UnmarshalBinary(b []byte) error {
	var res LinuxCPU
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
