// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContainerState ContainerState stores container's running state
// it's part of ContainerJSONBase and will return by "inspect" command
//
// swagger:model ContainerState
type ContainerState struct {

	// dead
	Dead bool `json:"Dead,omitempty"`

	// error
	Error string `json:"Error,omitempty"`

	// exit code
	ExitCode int64 `json:"ExitCode,omitempty"`

	// finished at
	FinishedAt string `json:"FinishedAt,omitempty"`

	// health
	Health *Health `json:"Health,omitempty"`

	// o o m killed
	OOMKilled bool `json:"OOMKilled,omitempty"`

	// paused
	Paused bool `json:"Paused,omitempty"`

	// pid
	Pid int64 `json:"Pid,omitempty"`

	// restarting
	Restarting bool `json:"Restarting,omitempty"`

	// running
	Running bool `json:"Running,omitempty"`

	// started at
	StartedAt string `json:"StartedAt,omitempty"`

	// status
	Status string `json:"Status,omitempty"`
}

// Validate validates this container state
func (m *ContainerState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerState) validateHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Health")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this container state based on the context it is used
func (m *ContainerState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerState) contextValidateHealth(ctx context.Context, formats strfmt.Registry) error {

	if m.Health != nil {
		if err := m.Health.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Health")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainerState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerState) UnmarshalBinary(b []byte) error {
	var res ContainerState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
