// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ManifestAddOptions ManifestAddOptions provides model for adding digests to manifest list
//
// swagger:model ManifestAddOptions
type ManifestAddOptions struct {

	// True when operating on a list to include all images
	All bool `json:"all,omitempty"`

	// Annotation to add to manifest list
	Annotation []string `json:"annotation"`

	// Arch overrides the architecture for the image
	Arch string `json:"arch,omitempty"`

	// Feature list for the image
	Features []string `json:"features"`

	// Images is an optional list of images to add to manifest list
	Images []string `json:"images"`

	// OS overrides the operating system for the image
	OS string `json:"os,omitempty"`

	// OS features for the image
	OSFeatures []string `json:"os_features"`

	// OSVersion overrides the operating system for the image
	OSVersion string `json:"os_version,omitempty"`

	// Variant for the image
	Variant string `json:"variant,omitempty"`
}

// Validate validates this manifest add options
func (m *ManifestAddOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this manifest add options based on context it is used
func (m *ManifestAddOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ManifestAddOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManifestAddOptions) UnmarshalBinary(b []byte) error {
	var res ManifestAddOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
