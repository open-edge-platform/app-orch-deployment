// Code generated by go-swagger; DO NOT EDIT.

package manifests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/open-edge-platform/app-orch-deployment/app-interconnect/internal/skupper/client/generated/libpod/models"
)

// ManifestPushV3LibpodReader is a Reader for the ManifestPushV3Libpod structure.
type ManifestPushV3LibpodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ManifestPushV3LibpodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewManifestPushV3LibpodOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewManifestPushV3LibpodBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewManifestPushV3LibpodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewManifestPushV3LibpodInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewManifestPushV3LibpodOK creates a ManifestPushV3LibpodOK with default headers values
func NewManifestPushV3LibpodOK() *ManifestPushV3LibpodOK {
	return &ManifestPushV3LibpodOK{}
}

/*
ManifestPushV3LibpodOK describes a response with status code 200, with default header values.

ManifestPushV3LibpodOK manifest push v3 libpod o k
*/
type ManifestPushV3LibpodOK struct {
	Payload *models.IDResponse
}

// IsSuccess returns true when this manifest push v3 libpod o k response has a 2xx status code
func (o *ManifestPushV3LibpodOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this manifest push v3 libpod o k response has a 3xx status code
func (o *ManifestPushV3LibpodOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this manifest push v3 libpod o k response has a 4xx status code
func (o *ManifestPushV3LibpodOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this manifest push v3 libpod o k response has a 5xx status code
func (o *ManifestPushV3LibpodOK) IsServerError() bool {
	return false
}

// IsCode returns true when this manifest push v3 libpod o k response a status code equal to that given
func (o *ManifestPushV3LibpodOK) IsCode(code int) bool {
	return code == 200
}

func (o *ManifestPushV3LibpodOK) Error() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name}/push][%d] manifestPushV3LibpodOK  %+v", 200, o.Payload)
}

func (o *ManifestPushV3LibpodOK) String() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name}/push][%d] manifestPushV3LibpodOK  %+v", 200, o.Payload)
}

func (o *ManifestPushV3LibpodOK) GetPayload() *models.IDResponse {
	return o.Payload
}

func (o *ManifestPushV3LibpodOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewManifestPushV3LibpodBadRequest creates a ManifestPushV3LibpodBadRequest with default headers values
func NewManifestPushV3LibpodBadRequest() *ManifestPushV3LibpodBadRequest {
	return &ManifestPushV3LibpodBadRequest{}
}

/*
ManifestPushV3LibpodBadRequest describes a response with status code 400, with default header values.

Bad parameter in request
*/
type ManifestPushV3LibpodBadRequest struct {
	Payload *ManifestPushV3LibpodBadRequestBody
}

// IsSuccess returns true when this manifest push v3 libpod bad request response has a 2xx status code
func (o *ManifestPushV3LibpodBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this manifest push v3 libpod bad request response has a 3xx status code
func (o *ManifestPushV3LibpodBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this manifest push v3 libpod bad request response has a 4xx status code
func (o *ManifestPushV3LibpodBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this manifest push v3 libpod bad request response has a 5xx status code
func (o *ManifestPushV3LibpodBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this manifest push v3 libpod bad request response a status code equal to that given
func (o *ManifestPushV3LibpodBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ManifestPushV3LibpodBadRequest) Error() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name}/push][%d] manifestPushV3LibpodBadRequest  %+v", 400, o.Payload)
}

func (o *ManifestPushV3LibpodBadRequest) String() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name}/push][%d] manifestPushV3LibpodBadRequest  %+v", 400, o.Payload)
}

func (o *ManifestPushV3LibpodBadRequest) GetPayload() *ManifestPushV3LibpodBadRequestBody {
	return o.Payload
}

func (o *ManifestPushV3LibpodBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ManifestPushV3LibpodBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewManifestPushV3LibpodNotFound creates a ManifestPushV3LibpodNotFound with default headers values
func NewManifestPushV3LibpodNotFound() *ManifestPushV3LibpodNotFound {
	return &ManifestPushV3LibpodNotFound{}
}

/*
ManifestPushV3LibpodNotFound describes a response with status code 404, with default header values.

No such manifest
*/
type ManifestPushV3LibpodNotFound struct {
	Payload *ManifestPushV3LibpodNotFoundBody
}

// IsSuccess returns true when this manifest push v3 libpod not found response has a 2xx status code
func (o *ManifestPushV3LibpodNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this manifest push v3 libpod not found response has a 3xx status code
func (o *ManifestPushV3LibpodNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this manifest push v3 libpod not found response has a 4xx status code
func (o *ManifestPushV3LibpodNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this manifest push v3 libpod not found response has a 5xx status code
func (o *ManifestPushV3LibpodNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this manifest push v3 libpod not found response a status code equal to that given
func (o *ManifestPushV3LibpodNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ManifestPushV3LibpodNotFound) Error() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name}/push][%d] manifestPushV3LibpodNotFound  %+v", 404, o.Payload)
}

func (o *ManifestPushV3LibpodNotFound) String() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name}/push][%d] manifestPushV3LibpodNotFound  %+v", 404, o.Payload)
}

func (o *ManifestPushV3LibpodNotFound) GetPayload() *ManifestPushV3LibpodNotFoundBody {
	return o.Payload
}

func (o *ManifestPushV3LibpodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ManifestPushV3LibpodNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewManifestPushV3LibpodInternalServerError creates a ManifestPushV3LibpodInternalServerError with default headers values
func NewManifestPushV3LibpodInternalServerError() *ManifestPushV3LibpodInternalServerError {
	return &ManifestPushV3LibpodInternalServerError{}
}

/*
ManifestPushV3LibpodInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ManifestPushV3LibpodInternalServerError struct {
	Payload *ManifestPushV3LibpodInternalServerErrorBody
}

// IsSuccess returns true when this manifest push v3 libpod internal server error response has a 2xx status code
func (o *ManifestPushV3LibpodInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this manifest push v3 libpod internal server error response has a 3xx status code
func (o *ManifestPushV3LibpodInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this manifest push v3 libpod internal server error response has a 4xx status code
func (o *ManifestPushV3LibpodInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this manifest push v3 libpod internal server error response has a 5xx status code
func (o *ManifestPushV3LibpodInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this manifest push v3 libpod internal server error response a status code equal to that given
func (o *ManifestPushV3LibpodInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ManifestPushV3LibpodInternalServerError) Error() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name}/push][%d] manifestPushV3LibpodInternalServerError  %+v", 500, o.Payload)
}

func (o *ManifestPushV3LibpodInternalServerError) String() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name}/push][%d] manifestPushV3LibpodInternalServerError  %+v", 500, o.Payload)
}

func (o *ManifestPushV3LibpodInternalServerError) GetPayload() *ManifestPushV3LibpodInternalServerErrorBody {
	return o.Payload
}

func (o *ManifestPushV3LibpodInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ManifestPushV3LibpodInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ManifestPushV3LibpodBadRequestBody manifest push v3 libpod bad request body
swagger:model ManifestPushV3LibpodBadRequestBody
*/
type ManifestPushV3LibpodBadRequestBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this manifest push v3 libpod bad request body
func (o *ManifestPushV3LibpodBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this manifest push v3 libpod bad request body based on context it is used
func (o *ManifestPushV3LibpodBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ManifestPushV3LibpodBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ManifestPushV3LibpodBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ManifestPushV3LibpodBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ManifestPushV3LibpodInternalServerErrorBody manifest push v3 libpod internal server error body
swagger:model ManifestPushV3LibpodInternalServerErrorBody
*/
type ManifestPushV3LibpodInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this manifest push v3 libpod internal server error body
func (o *ManifestPushV3LibpodInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this manifest push v3 libpod internal server error body based on context it is used
func (o *ManifestPushV3LibpodInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ManifestPushV3LibpodInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ManifestPushV3LibpodInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ManifestPushV3LibpodInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ManifestPushV3LibpodNotFoundBody manifest push v3 libpod not found body
swagger:model ManifestPushV3LibpodNotFoundBody
*/
type ManifestPushV3LibpodNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this manifest push v3 libpod not found body
func (o *ManifestPushV3LibpodNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this manifest push v3 libpod not found body based on context it is used
func (o *ManifestPushV3LibpodNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ManifestPushV3LibpodNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ManifestPushV3LibpodNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ManifestPushV3LibpodNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
