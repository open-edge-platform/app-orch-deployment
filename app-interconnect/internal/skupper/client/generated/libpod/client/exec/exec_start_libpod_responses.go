// Code generated by go-swagger; DO NOT EDIT.

package exec

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExecStartLibpodReader is a Reader for the ExecStartLibpod structure.
type ExecStartLibpodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecStartLibpodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecStartLibpodOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewExecStartLibpodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewExecStartLibpodConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecStartLibpodInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExecStartLibpodOK creates a ExecStartLibpodOK with default headers values
func NewExecStartLibpodOK() *ExecStartLibpodOK {
	return &ExecStartLibpodOK{}
}

/*
ExecStartLibpodOK describes a response with status code 200, with default header values.

no error
*/
type ExecStartLibpodOK struct {
}

// IsSuccess returns true when this exec start libpod o k response has a 2xx status code
func (o *ExecStartLibpodOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this exec start libpod o k response has a 3xx status code
func (o *ExecStartLibpodOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this exec start libpod o k response has a 4xx status code
func (o *ExecStartLibpodOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this exec start libpod o k response has a 5xx status code
func (o *ExecStartLibpodOK) IsServerError() bool {
	return false
}

// IsCode returns true when this exec start libpod o k response a status code equal to that given
func (o *ExecStartLibpodOK) IsCode(code int) bool {
	return code == 200
}

func (o *ExecStartLibpodOK) Error() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/start][%d] execStartLibpodOK ", 200)
}

func (o *ExecStartLibpodOK) String() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/start][%d] execStartLibpodOK ", 200)
}

func (o *ExecStartLibpodOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExecStartLibpodNotFound creates a ExecStartLibpodNotFound with default headers values
func NewExecStartLibpodNotFound() *ExecStartLibpodNotFound {
	return &ExecStartLibpodNotFound{}
}

/*
ExecStartLibpodNotFound describes a response with status code 404, with default header values.

No such exec instance
*/
type ExecStartLibpodNotFound struct {
	Payload *ExecStartLibpodNotFoundBody
}

// IsSuccess returns true when this exec start libpod not found response has a 2xx status code
func (o *ExecStartLibpodNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this exec start libpod not found response has a 3xx status code
func (o *ExecStartLibpodNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this exec start libpod not found response has a 4xx status code
func (o *ExecStartLibpodNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this exec start libpod not found response has a 5xx status code
func (o *ExecStartLibpodNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this exec start libpod not found response a status code equal to that given
func (o *ExecStartLibpodNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ExecStartLibpodNotFound) Error() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/start][%d] execStartLibpodNotFound  %+v", 404, o.Payload)
}

func (o *ExecStartLibpodNotFound) String() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/start][%d] execStartLibpodNotFound  %+v", 404, o.Payload)
}

func (o *ExecStartLibpodNotFound) GetPayload() *ExecStartLibpodNotFoundBody {
	return o.Payload
}

func (o *ExecStartLibpodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ExecStartLibpodNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecStartLibpodConflict creates a ExecStartLibpodConflict with default headers values
func NewExecStartLibpodConflict() *ExecStartLibpodConflict {
	return &ExecStartLibpodConflict{}
}

/*
ExecStartLibpodConflict describes a response with status code 409, with default header values.

container is not running.
*/
type ExecStartLibpodConflict struct {
}

// IsSuccess returns true when this exec start libpod conflict response has a 2xx status code
func (o *ExecStartLibpodConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this exec start libpod conflict response has a 3xx status code
func (o *ExecStartLibpodConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this exec start libpod conflict response has a 4xx status code
func (o *ExecStartLibpodConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this exec start libpod conflict response has a 5xx status code
func (o *ExecStartLibpodConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this exec start libpod conflict response a status code equal to that given
func (o *ExecStartLibpodConflict) IsCode(code int) bool {
	return code == 409
}

func (o *ExecStartLibpodConflict) Error() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/start][%d] execStartLibpodConflict ", 409)
}

func (o *ExecStartLibpodConflict) String() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/start][%d] execStartLibpodConflict ", 409)
}

func (o *ExecStartLibpodConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExecStartLibpodInternalServerError creates a ExecStartLibpodInternalServerError with default headers values
func NewExecStartLibpodInternalServerError() *ExecStartLibpodInternalServerError {
	return &ExecStartLibpodInternalServerError{}
}

/*
ExecStartLibpodInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ExecStartLibpodInternalServerError struct {
	Payload *ExecStartLibpodInternalServerErrorBody
}

// IsSuccess returns true when this exec start libpod internal server error response has a 2xx status code
func (o *ExecStartLibpodInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this exec start libpod internal server error response has a 3xx status code
func (o *ExecStartLibpodInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this exec start libpod internal server error response has a 4xx status code
func (o *ExecStartLibpodInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this exec start libpod internal server error response has a 5xx status code
func (o *ExecStartLibpodInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this exec start libpod internal server error response a status code equal to that given
func (o *ExecStartLibpodInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ExecStartLibpodInternalServerError) Error() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/start][%d] execStartLibpodInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecStartLibpodInternalServerError) String() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/start][%d] execStartLibpodInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecStartLibpodInternalServerError) GetPayload() *ExecStartLibpodInternalServerErrorBody {
	return o.Payload
}

func (o *ExecStartLibpodInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ExecStartLibpodInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ExecStartLibpodBody exec start libpod body
swagger:model ExecStartLibpodBody
*/
type ExecStartLibpodBody struct {

	// Detach from the command.
	Detach bool `json:"Detach,omitempty"`

	// Allocate a pseudo-TTY.
	Tty bool `json:"Tty,omitempty"`

	// Height of the TTY session in characters. Tty must be set to true to use it.
	H int64 `json:"h,omitempty"`

	// Width of the TTY session in characters. Tty must be set to true to use it.
	W int64 `json:"w,omitempty"`
}

// Validate validates this exec start libpod body
func (o *ExecStartLibpodBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this exec start libpod body based on context it is used
func (o *ExecStartLibpodBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExecStartLibpodBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExecStartLibpodBody) UnmarshalBinary(b []byte) error {
	var res ExecStartLibpodBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ExecStartLibpodInternalServerErrorBody exec start libpod internal server error body
swagger:model ExecStartLibpodInternalServerErrorBody
*/
type ExecStartLibpodInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this exec start libpod internal server error body
func (o *ExecStartLibpodInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this exec start libpod internal server error body based on context it is used
func (o *ExecStartLibpodInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExecStartLibpodInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExecStartLibpodInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ExecStartLibpodInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ExecStartLibpodNotFoundBody exec start libpod not found body
swagger:model ExecStartLibpodNotFoundBody
*/
type ExecStartLibpodNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this exec start libpod not found body
func (o *ExecStartLibpodNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this exec start libpod not found body based on context it is used
func (o *ExecStartLibpodNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExecStartLibpodNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExecStartLibpodNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ExecStartLibpodNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
