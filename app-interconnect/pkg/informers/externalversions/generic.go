// SPDX-FileCopyrightText: (C) 2024 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	"fmt"

	v1alpha1 "github.com/open-edge-platform/app-orch-deployment/app-interconnect/pkg/apis/interconnect/v1alpha1"
	networkv1alpha1 "github.com/open-edge-platform/app-orch-deployment/app-interconnect/pkg/apis/network/v1alpha1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=interconnect.app.edge-orchestrator.intel.com, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithResource("clusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Interconnect().V1alpha1().Clusters().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("links"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Interconnect().V1alpha1().Links().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("services"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Interconnect().V1alpha1().Services().Informer()}, nil

		// Group=network.app.edge-orchestrator.intel.com, Version=v1alpha1
	case networkv1alpha1.SchemeGroupVersion.WithResource("networks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Network().V1alpha1().Networks().Informer()}, nil
	case networkv1alpha1.SchemeGroupVersion.WithResource("networkclusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Network().V1alpha1().NetworkClusters().Informer()}, nil
	case networkv1alpha1.SchemeGroupVersion.WithResource("networklinks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Network().V1alpha1().NetworkLinks().Informer()}, nil
	case networkv1alpha1.SchemeGroupVersion.WithResource("networkservices"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Network().V1alpha1().NetworkServices().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
