// SPDX-FileCopyrightText: (C) 2024 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/open-edge-platform/app-orch-deployment/app-interconnect/pkg/apis/network/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeNetworkLinks implements NetworkLinkInterface
type FakeNetworkLinks struct {
	Fake *FakeNetworkV1alpha1
}

var networklinksResource = v1alpha1.SchemeGroupVersion.WithResource("networklinks")

var networklinksKind = v1alpha1.SchemeGroupVersion.WithKind("NetworkLink")

// Get takes name of the networkLink, and returns the corresponding networkLink object, and an error if there is any.
func (c *FakeNetworkLinks) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.NetworkLink, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(networklinksResource, name), &v1alpha1.NetworkLink{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NetworkLink), err
}

// List takes label and field selectors, and returns the list of NetworkLinks that match those selectors.
func (c *FakeNetworkLinks) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.NetworkLinkList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(networklinksResource, networklinksKind, opts), &v1alpha1.NetworkLinkList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.NetworkLinkList{ListMeta: obj.(*v1alpha1.NetworkLinkList).ListMeta}
	for _, item := range obj.(*v1alpha1.NetworkLinkList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested networkLinks.
func (c *FakeNetworkLinks) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(networklinksResource, opts))
}

// Create takes the representation of a networkLink and creates it.  Returns the server's representation of the networkLink, and an error, if there is any.
func (c *FakeNetworkLinks) Create(ctx context.Context, networkLink *v1alpha1.NetworkLink, opts v1.CreateOptions) (result *v1alpha1.NetworkLink, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(networklinksResource, networkLink), &v1alpha1.NetworkLink{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NetworkLink), err
}

// Update takes the representation of a networkLink and updates it. Returns the server's representation of the networkLink, and an error, if there is any.
func (c *FakeNetworkLinks) Update(ctx context.Context, networkLink *v1alpha1.NetworkLink, opts v1.UpdateOptions) (result *v1alpha1.NetworkLink, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(networklinksResource, networkLink), &v1alpha1.NetworkLink{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NetworkLink), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeNetworkLinks) UpdateStatus(ctx context.Context, networkLink *v1alpha1.NetworkLink, opts v1.UpdateOptions) (*v1alpha1.NetworkLink, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(networklinksResource, "status", networkLink), &v1alpha1.NetworkLink{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NetworkLink), err
}

// Delete takes name of the networkLink and deletes it. Returns an error if one occurs.
func (c *FakeNetworkLinks) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(networklinksResource, name, opts), &v1alpha1.NetworkLink{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNetworkLinks) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(networklinksResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.NetworkLinkList{})
	return err
}

// Patch applies the patch and returns the patched networkLink.
func (c *FakeNetworkLinks) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.NetworkLink, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(networklinksResource, name, pt, data, subresources...), &v1alpha1.NetworkLink{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NetworkLink), err
}
