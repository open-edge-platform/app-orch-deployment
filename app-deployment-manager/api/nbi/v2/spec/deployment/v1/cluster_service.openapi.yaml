openapi: 3.1.0
info:
  title: deployment.v1
paths:
  /deployment.orchestrator.apis/v1/clusters:
    get:
      tags:
        - deployment.v1.ClusterService
      summary: ListClusters
      description: Gets a list of all cluster objects.
      operationId: deployment.v1.ClusterService.ListClusters
      parameters:
        - name: labels
          in: query
          description: |-
            Optional. A string array that filters cluster labels to be
             displayed ie color=blue,customer=intel. Labels separated by a comma.
          schema:
            type: array
            items:
              type: string
              description: '(OPTIONAL) '
            title: labels
            description: |-
              (OPTIONAL) Optional. A string array that filters cluster labels to be
               displayed ie color=blue,customer=intel. Labels separated by a comma.
        - name: orderBy
          in: query
          description: Optional. Select field and order based on which cluster list will be sorted.
          schema:
            type: string
            title: order_by
            description: (OPTIONAL) Optional. Select field and order based on which cluster list will be sorted.
        - name: filter
          in: query
          description: Optional. Selection criteria to list clusters.
          schema:
            type: string
            title: filter
            description: (OPTIONAL) Optional. Selection criteria to list clusters.
        - name: pageSize
          in: query
          description: Optional. Select count of clusters to be listed per page.
          schema:
            type: integer
            title: page_size
            maximum: 500
            minimum: 0
            format: int32
            description: (OPTIONAL) Optional. Select count of clusters to be listed per page.
        - name: offset
          in: query
          description: |-
            Optional. Offset is used to select the correct page from which clusters list will be displayed.
             (E.g If there are 10 clusters, page size is 2 and offset is set as 4, then the response will display clusters 5 and 6).
          schema:
            type: integer
            title: offset
            minimum: 0
            format: int32
            description: |-
              (OPTIONAL) Optional. Offset is used to select the correct page from which clusters list will be displayed.
               (E.g If there are 10 clusters, page size is 2 and offset is set as 4, then the response will display clusters 5 and 6).
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment.v1.ListClustersResponse'
  /deployment.orchestrator.apis/v1/clusters/{cluster_id}:
    get:
      tags:
        - deployment.v1.ClusterService
      summary: GetCluster
      description: Gets a cluster object.
      operationId: deployment.v1.ClusterService.GetCluster
      parameters:
        - name: cluster_id
          in: path
          description: Required. The id of the cluster.
          required: true
          schema:
            type: string
            title: cluster_id
            maxLength: 40
            minLength: 1
            pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
            description: Required. The id of the cluster.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment.v1.GetClusterResponse'
  /deployment.v1.ClusterService/GetKubeConfig:
    post:
      tags:
        - deployment.v1.ClusterService
      summary: GetKubeConfig gets kubeConfig based on a given cluster id
      description: GetKubeConfig gets kubeConfig based on a given cluster id
      operationId: deployment.v1.ClusterService.GetKubeConfig
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deployment.v1.GetKubeConfigRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment.v1.GetKubeConfigResponse'
components:
  schemas:
    connect-protocol-version:
      type: number
      title: Connect-Protocol-Version
      enum:
        - 1
      description: Define the version of the Connect protocol
      const: 1
    connect-timeout-header:
      type: number
      title: Connect-Timeout-Ms
      description: Define the timeout, in ms
    connect.error:
      type: object
      properties:
        code:
          type: string
          examples:
            - not_found
          enum:
            - canceled
            - unknown
            - invalid_argument
            - deadline_exceeded
            - not_found
            - already_exists
            - permission_denied
            - resource_exhausted
            - failed_precondition
            - aborted
            - out_of_range
            - unimplemented
            - internal
            - unavailable
            - data_loss
            - unauthenticated
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          items:
            $ref: '#/components/schemas/connect.error_details.Any'
          description: A list of messages that carry the error details. There is no limit on the number of messages.
      title: Connect Error
      additionalProperties: true
      description: 'Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation'
    connect.error_details.Any:
      type: object
      properties:
        type:
          type: string
          description: 'A URL that acts as a globally unique identifier for the type of the serialized message. For example: `type.googleapis.com/google.rpc.ErrorInfo`. This is used to determine the schema of the data in the `value` field and is the discriminator for the `debug` field.'
        value:
          type: string
          format: binary
          description: The Protobuf message, serialized as bytes and base64-encoded. The specific message type is identified by the `type` field.
        debug:
          oneOf:
            - type: object
              title: Any
              additionalProperties: true
              description: Detailed error information.
          discriminator:
            propertyName: type
          title: Debug
          description: Deserialized error detail payload. The 'type' field indicates the schema. This field is for easier debugging and should not be relied upon for application logic.
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message, with an additional debug field for ConnectRPC error details.
    deployment.v1.App:
      type: object
      properties:
        name:
          type: string
          title: name
          description: The deployment package app name.
          readOnly: true
        id:
          type: string
          title: id
          description: |-
            Id of the app (same as Fleet bundle name) which is,
             concatenated from name and deploy_id (uid which comes from k8s).
          readOnly: true
        status:
          title: status
          description: Status has details of the app.
          readOnly: true
          $ref: '#/components/schemas/deployment.v1.Deployment.Status'
      title: App
      additionalProperties: false
      description: Details of application.
    deployment.v1.Cluster:
      type: object
      properties:
        name:
          type: string
          title: name
          description: Name is the display name which user provides and ECM creates and assigns clustername label to Fleet cluster object.
          readOnly: true
        id:
          type: string
          title: id
          description: ID is the cluster id which ECM generates and assigns to the Rancher cluster name.
          readOnly: true
        status:
          title: status
          description: Status has details of the cluster.
          readOnly: true
          $ref: '#/components/schemas/deployment.v1.Deployment.Status'
        apps:
          type: array
          items:
            $ref: '#/components/schemas/deployment.v1.App'
          title: apps
          maxItems: 100
          description: Apps has per-app details.
          readOnly: true
      title: Cluster
      additionalProperties: false
      description: Details of cluster.
    deployment.v1.ClusterInfo:
      type: object
      properties:
        id:
          type: string
          title: id
          description: ID is the cluster id which ECM generates and assigns to the Rancher cluster name.
          readOnly: true
        labels:
          type: object
          title: labels
          additionalProperties:
            type: string
            title: value
          description: List of cluster labels retrieved from Fleet cluster object.
          readOnly: true
        createTime:
          title: create_time
          description: The creation time of the cluster retrieved from Fleet cluster object.
          readOnly: true
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        name:
          type: string
          title: name
          description: Name is the display name which user provides and ECM creates and assigns clustername label to Fleet cluster object.
          readOnly: true
      title: ClusterInfo
      additionalProperties: false
      description: Cluster defines the message for the Cluster object.
    deployment.v1.ClusterInfo.LabelsEntry:
      type: object
      properties:
        key:
          type: string
          title: key
        value:
          type: string
          title: value
      title: LabelsEntry
      additionalProperties: false
    deployment.v1.Deployment.Status:
      type: object
      properties:
        state:
          title: state
          readOnly: true
          $ref: '#/components/schemas/deployment.v1.State'
        message:
          type: string
          title: message
          readOnly: true
        summary:
          title: summary
          readOnly: true
          $ref: '#/components/schemas/deployment.v1.Summary'
      title: Status
      additionalProperties: false
      description: Status has details of the deployment.
    deployment.v1.GetClusterRequest:
      type: object
      properties:
        clusterId:
          type: string
          title: cluster_id
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          description: Required. The id of the cluster.
      title: GetClusterRequest
      required:
        - clusterId
      additionalProperties: false
      description: Request message for GetCluster method.
    deployment.v1.GetClusterResponse:
      type: object
      properties:
        cluster:
          title: cluster
          readOnly: true
          $ref: '#/components/schemas/deployment.v1.Cluster'
      title: GetClusterResponse
      additionalProperties: false
      description: Response message for GetCluster method.
    deployment.v1.GetKubeConfigRequest:
      type: object
      properties:
        clusterId:
          type: string
          title: cluster_id
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          description: Required. The cluster id for the kubeconfig.
      title: GetKubeConfigRequest
      required:
        - clusterId
      additionalProperties: false
      description: Request message for Get KubeConfig method
    deployment.v1.GetKubeConfigResponse:
      type: object
      properties:
        kubeConfigInfo:
          title: kube_config_info
          $ref: '#/components/schemas/deployment.v1.KubeConfigInfo'
      title: GetKubeConfigResponse
      additionalProperties: false
      description: Response message for Get KubeConfig method
    deployment.v1.KubeConfigInfo:
      type: object
      properties:
        kubeConfig:
          type: string
          title: kube_config
          format: byte
          readOnly: true
      title: KubeConfigInfo
      additionalProperties: false
    deployment.v1.ListClustersRequest:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
            description: '(OPTIONAL) '
          title: labels
          description: |-
            (OPTIONAL) Optional. A string array that filters cluster labels to be
             displayed ie color=blue,customer=intel. Labels separated by a comma.
        orderBy:
          type: string
          title: order_by
          description: (OPTIONAL) Optional. Select field and order based on which cluster list will be sorted.
        filter:
          type: string
          title: filter
          description: (OPTIONAL) Optional. Selection criteria to list clusters.
        pageSize:
          type: integer
          title: page_size
          maximum: 500
          minimum: 0
          format: int32
          description: (OPTIONAL) Optional. Select count of clusters to be listed per page.
        offset:
          type: integer
          title: offset
          minimum: 0
          format: int32
          description: |-
            (OPTIONAL) Optional. Offset is used to select the correct page from which clusters list will be displayed.
             (E.g If there are 10 clusters, page size is 2 and offset is set as 4, then the response will display clusters 5 and 6).
      title: ListClustersRequest
      additionalProperties: false
      description: Request message for the ListClusters method.
    deployment.v1.ListClustersResponse:
      type: object
      properties:
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/deployment.v1.ClusterInfo'
          title: clusters
          maxItems: 500
          description: A list of Cluster Objects.
        totalElements:
          type: integer
          title: total_elements
          format: int32
      title: ListClustersResponse
      required:
        - clusters
        - totalElements
      additionalProperties: false
      description: Response message for the ListClusters method.
    deployment.v1.State:
      type: string
      title: State
      enum:
        - UNKNOWN
        - RUNNING
        - DOWN
        - INTERNAL_ERROR
        - DEPLOYING
        - UPDATING
        - TERMINATING
        - ERROR
        - NO_TARGET_CLUSTERS
      description: State are the different states a deployment/cluster/app can be in.
    deployment.v1.Summary:
      type: object
      properties:
        total:
          type: integer
          title: total
          format: int32
          description: Total count of apps/clusters in the deployment, value from owned GitRepo objects.
          readOnly: true
        running:
          type: integer
          title: running
          format: int32
          description: Number of running apps/clusters in the deployment, value from owned GitRepo objects.
          readOnly: true
        down:
          type: integer
          title: down
          format: int32
          description: Number of down apps/clusters in the deployment.
          readOnly: true
        type:
          type: string
          title: type
          description: Type of thing that we're counting, ie clusters, apps.
          readOnly: true
        unknown:
          type: integer
          title: unknown
          format: int32
          description: Unknown status to indicate cluster not reachable.
          readOnly: true
      title: Summary
      additionalProperties: false
      description: Count of status.
    google.protobuf.Timestamp:
      type: string
      examples:
        - "2023-01-15T01:30:15.01Z"
        - "2024-12-25T12:00:00Z"
      format: date-time
      description: |-
        A Timestamp represents a point in time independent of any time zone or local
         calendar, encoded as a count of seconds and fractions of seconds at
         nanosecond resolution. The count is relative to an epoch at UTC midnight on
         January 1, 1970, in the proleptic Gregorian calendar which extends the
         Gregorian calendar backwards to year one.

         All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
         second table is needed for interpretation, using a [24-hour linear
         smear](https://developers.google.com/time/smear).

         The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
         restricting to that range, we ensure that we can convert to and from [RFC
         3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

         # Examples

         Example 1: Compute Timestamp from POSIX `time()`.

             Timestamp timestamp;
             timestamp.set_seconds(time(NULL));
             timestamp.set_nanos(0);

         Example 2: Compute Timestamp from POSIX `gettimeofday()`.

             struct timeval tv;
             gettimeofday(&tv, NULL);

             Timestamp timestamp;
             timestamp.set_seconds(tv.tv_sec);
             timestamp.set_nanos(tv.tv_usec * 1000);

         Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

             FILETIME ft;
             GetSystemTimeAsFileTime(&ft);
             UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

             // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
             // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
             Timestamp timestamp;
             timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
             timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

         Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

             long millis = System.currentTimeMillis();

             Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
                 .setNanos((int) ((millis % 1000) * 1000000)).build();

         Example 5: Compute Timestamp from Java `Instant.now()`.

             Instant now = Instant.now();

             Timestamp timestamp =
                 Timestamp.newBuilder().setSeconds(now.getEpochSecond())
                     .setNanos(now.getNano()).build();

         Example 6: Compute Timestamp from current time in Python.

             timestamp = Timestamp()
             timestamp.GetCurrentTime()

         # JSON Mapping

         In JSON format, the Timestamp type is encoded as a string in the
         [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
         format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
         where {year} is always expressed using four digits while {month}, {day},
         {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
         seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
         are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
         is required. A proto3 JSON serializer should always use UTC (as indicated by
         "Z") when printing the Timestamp type and a proto3 JSON parser should be
         able to accept both UTC and other timezones (as indicated by an offset).

         For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
         01:30 UTC on January 15, 2017.

         In JavaScript, one can convert a Date object to this format using the
         standard
         [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
         method. In Python, a standard `datetime.datetime` object can be converted
         to this format using
         [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
         the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
         the Joda Time's [`ISODateTimeFormat.dateTime()`](
         http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
         ) to obtain a formatter capable of generating timestamps in this format.
security: []
tags:
  - name: deployment.v1.ClusterService
    description: ClusterService provides RPC methods to get clusters information.
