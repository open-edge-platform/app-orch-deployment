// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/nbi/v2/deployment/v1/service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeploymentRequestMultiError, or nil if none found.
func (m *CreateDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDeploymentRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDeploymentRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeploymentRequestValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDeploymentRequestMultiError(errors)
	}

	return nil
}

// CreateDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeploymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeploymentRequestMultiError) AllErrors() []error { return m }

// CreateDeploymentRequestValidationError is the validation error returned by
// CreateDeploymentRequest.Validate if the designated constraints aren't met.
type CreateDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentRequestValidationError) ErrorName() string {
	return "CreateDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentRequestValidationError{}

// Validate checks the field values on CreateDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeploymentResponseMultiError, or nil if none found.
func (m *CreateDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	if len(errors) > 0 {
		return CreateDeploymentResponseMultiError(errors)
	}

	return nil
}

// CreateDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeploymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeploymentResponseMultiError) AllErrors() []error { return m }

// CreateDeploymentResponseValidationError is the validation error returned by
// CreateDeploymentResponse.Validate if the designated constraints aren't met.
type CreateDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentResponseValidationError) ErrorName() string {
	return "CreateDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentResponseValidationError{}

// Validate checks the field values on ListDeploymentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeploymentsRequestMultiError, or nil if none found.
func (m *ListDeploymentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderBy

	// no validation rules for Filter

	// no validation rules for PageSize

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListDeploymentsRequestMultiError(errors)
	}

	return nil
}

// ListDeploymentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDeploymentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDeploymentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentsRequestMultiError) AllErrors() []error { return m }

// ListDeploymentsRequestValidationError is the validation error returned by
// ListDeploymentsRequest.Validate if the designated constraints aren't met.
type ListDeploymentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentsRequestValidationError) ErrorName() string {
	return "ListDeploymentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentsRequestValidationError{}

// Validate checks the field values on ListDeploymentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeploymentsResponseMultiError, or nil if none found.
func (m *ListDeploymentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDeployments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeploymentsResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeploymentsResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeploymentsResponseValidationError{
					field:  fmt.Sprintf("Deployments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	if len(errors) > 0 {
		return ListDeploymentsResponseMultiError(errors)
	}

	return nil
}

// ListDeploymentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDeploymentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDeploymentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentsResponseMultiError) AllErrors() []error { return m }

// ListDeploymentsResponseValidationError is the validation error returned by
// ListDeploymentsResponse.Validate if the designated constraints aren't met.
type ListDeploymentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentsResponseValidationError) ErrorName() string {
	return "ListDeploymentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentsResponseValidationError{}

// Validate checks the field values on ListDeploymentsPerClusterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListDeploymentsPerClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentsPerClusterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDeploymentsPerClusterRequestMultiError, or nil if none found.
func (m *ListDeploymentsPerClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentsPerClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for OrderBy

	// no validation rules for Filter

	// no validation rules for PageSize

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListDeploymentsPerClusterRequestMultiError(errors)
	}

	return nil
}

// ListDeploymentsPerClusterRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListDeploymentsPerClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDeploymentsPerClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentsPerClusterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentsPerClusterRequestMultiError) AllErrors() []error { return m }

// ListDeploymentsPerClusterRequestValidationError is the validation error
// returned by ListDeploymentsPerClusterRequest.Validate if the designated
// constraints aren't met.
type ListDeploymentsPerClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentsPerClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentsPerClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentsPerClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentsPerClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentsPerClusterRequestValidationError) ErrorName() string {
	return "ListDeploymentsPerClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentsPerClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentsPerClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentsPerClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentsPerClusterRequestValidationError{}

// Validate checks the field values on ListDeploymentsPerClusterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListDeploymentsPerClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentsPerClusterResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListDeploymentsPerClusterResponseMultiError, or nil if none found.
func (m *ListDeploymentsPerClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentsPerClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDeploymentInstancesCluster() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeploymentsPerClusterResponseValidationError{
						field:  fmt.Sprintf("DeploymentInstancesCluster[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeploymentsPerClusterResponseValidationError{
						field:  fmt.Sprintf("DeploymentInstancesCluster[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeploymentsPerClusterResponseValidationError{
					field:  fmt.Sprintf("DeploymentInstancesCluster[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	if len(errors) > 0 {
		return ListDeploymentsPerClusterResponseMultiError(errors)
	}

	return nil
}

// ListDeploymentsPerClusterResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListDeploymentsPerClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDeploymentsPerClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentsPerClusterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentsPerClusterResponseMultiError) AllErrors() []error { return m }

// ListDeploymentsPerClusterResponseValidationError is the validation error
// returned by ListDeploymentsPerClusterResponse.Validate if the designated
// constraints aren't met.
type ListDeploymentsPerClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentsPerClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentsPerClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentsPerClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentsPerClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentsPerClusterResponseValidationError) ErrorName() string {
	return "ListDeploymentsPerClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentsPerClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentsPerClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentsPerClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentsPerClusterResponseValidationError{}

// Validate checks the field values on GetDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentRequestMultiError, or nil if none found.
func (m *GetDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeplId

	if len(errors) > 0 {
		return GetDeploymentRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by GetDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentRequestMultiError) AllErrors() []error { return m }

// GetDeploymentRequestValidationError is the validation error returned by
// GetDeploymentRequest.Validate if the designated constraints aren't met.
type GetDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentRequestValidationError) ErrorName() string {
	return "GetDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentRequestValidationError{}

// Validate checks the field values on GetDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentResponseMultiError, or nil if none found.
func (m *GetDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeploymentResponseValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeploymentResponseMultiError(errors)
	}

	return nil
}

// GetDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by GetDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentResponseMultiError) AllErrors() []error { return m }

// GetDeploymentResponseValidationError is the validation error returned by
// GetDeploymentResponse.Validate if the designated constraints aren't met.
type GetDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentResponseValidationError) ErrorName() string {
	return "GetDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentResponseValidationError{}

// Validate checks the field values on UpdateDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeploymentRequestMultiError, or nil if none found.
func (m *UpdateDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDeploymentRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDeploymentRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeploymentRequestValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeplId

	if len(errors) > 0 {
		return UpdateDeploymentRequestMultiError(errors)
	}

	return nil
}

// UpdateDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeploymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeploymentRequestMultiError) AllErrors() []error { return m }

// UpdateDeploymentRequestValidationError is the validation error returned by
// UpdateDeploymentRequest.Validate if the designated constraints aren't met.
type UpdateDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentRequestValidationError) ErrorName() string {
	return "UpdateDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentRequestValidationError{}

// Validate checks the field values on UpdateDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeploymentResponseMultiError, or nil if none found.
func (m *UpdateDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeploymentResponseValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDeploymentResponseMultiError(errors)
	}

	return nil
}

// UpdateDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeploymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeploymentResponseMultiError) AllErrors() []error { return m }

// UpdateDeploymentResponseValidationError is the validation error returned by
// UpdateDeploymentResponse.Validate if the designated constraints aren't met.
type UpdateDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentResponseValidationError) ErrorName() string {
	return "UpdateDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentResponseValidationError{}

// Validate checks the field values on DeleteDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeploymentRequestMultiError, or nil if none found.
func (m *DeleteDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeplId

	// no validation rules for DeleteType

	if len(errors) > 0 {
		return DeleteDeploymentRequestMultiError(errors)
	}

	return nil
}

// DeleteDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeploymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeploymentRequestMultiError) AllErrors() []error { return m }

// DeleteDeploymentRequestValidationError is the validation error returned by
// DeleteDeploymentRequest.Validate if the designated constraints aren't met.
type DeleteDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeploymentRequestValidationError) ErrorName() string {
	return "DeleteDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeploymentRequestValidationError{}

// Validate checks the field values on GetDeploymentsStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentsStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentsStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentsStatusRequestMultiError, or nil if none found.
func (m *GetDeploymentsStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentsStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDeploymentsStatusRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentsStatusRequestMultiError is an error wrapping multiple
// validation errors returned by GetDeploymentsStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDeploymentsStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentsStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentsStatusRequestMultiError) AllErrors() []error { return m }

// GetDeploymentsStatusRequestValidationError is the validation error returned
// by GetDeploymentsStatusRequest.Validate if the designated constraints
// aren't met.
type GetDeploymentsStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentsStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentsStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentsStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentsStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentsStatusRequestValidationError) ErrorName() string {
	return "GetDeploymentsStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentsStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentsStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentsStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentsStatusRequestValidationError{}

// Validate checks the field values on GetDeploymentsStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentsStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentsStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentsStatusResponseMultiError, or nil if none found.
func (m *GetDeploymentsStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentsStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Running

	// no validation rules for Down

	// no validation rules for Deploying

	// no validation rules for Updating

	// no validation rules for Terminating

	// no validation rules for Error

	// no validation rules for Unknown

	if len(errors) > 0 {
		return GetDeploymentsStatusResponseMultiError(errors)
	}

	return nil
}

// GetDeploymentsStatusResponseMultiError is an error wrapping multiple
// validation errors returned by GetDeploymentsStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDeploymentsStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentsStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentsStatusResponseMultiError) AllErrors() []error { return m }

// GetDeploymentsStatusResponseValidationError is the validation error returned
// by GetDeploymentsStatusResponse.Validate if the designated constraints
// aren't met.
type GetDeploymentsStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentsStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentsStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentsStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentsStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentsStatusResponseValidationError) ErrorName() string {
	return "GetDeploymentsStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentsStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentsStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentsStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentsStatusResponseValidationError{}

// Validate checks the field values on GetAppNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppNamespaceRequestMultiError, or nil if none found.
func (m *GetAppNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	if len(errors) > 0 {
		return GetAppNamespaceRequestMultiError(errors)
	}

	return nil
}

// GetAppNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by GetAppNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAppNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppNamespaceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppNamespaceRequestMultiError) AllErrors() []error { return m }

// GetAppNamespaceRequestValidationError is the validation error returned by
// GetAppNamespaceRequest.Validate if the designated constraints aren't met.
type GetAppNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppNamespaceRequestValidationError) ErrorName() string {
	return "GetAppNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppNamespaceRequestValidationError{}

// Validate checks the field values on GetAppNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppNamespaceResponseMultiError, or nil if none found.
func (m *GetAppNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if len(errors) > 0 {
		return GetAppNamespaceResponseMultiError(errors)
	}

	return nil
}

// GetAppNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by GetAppNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAppNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppNamespaceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppNamespaceResponseMultiError) AllErrors() []error { return m }

// GetAppNamespaceResponseValidationError is the validation error returned by
// GetAppNamespaceResponse.Validate if the designated constraints aren't met.
type GetAppNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppNamespaceResponseValidationError) ErrorName() string {
	return "GetAppNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppNamespaceResponseValidationError{}

// Validate checks the field values on ListDeploymentClustersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentClustersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentClustersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDeploymentClustersRequestMultiError, or nil if none found.
func (m *ListDeploymentClustersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentClustersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeplId

	// no validation rules for OrderBy

	// no validation rules for Filter

	// no validation rules for PageSize

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListDeploymentClustersRequestMultiError(errors)
	}

	return nil
}

// ListDeploymentClustersRequestMultiError is an error wrapping multiple
// validation errors returned by ListDeploymentClustersRequest.ValidateAll()
// if the designated constraints aren't met.
type ListDeploymentClustersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentClustersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentClustersRequestMultiError) AllErrors() []error { return m }

// ListDeploymentClustersRequestValidationError is the validation error
// returned by ListDeploymentClustersRequest.Validate if the designated
// constraints aren't met.
type ListDeploymentClustersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentClustersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentClustersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentClustersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentClustersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentClustersRequestValidationError) ErrorName() string {
	return "ListDeploymentClustersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentClustersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentClustersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentClustersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentClustersRequestValidationError{}

// Validate checks the field values on ListDeploymentClustersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentClustersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentClustersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDeploymentClustersResponseMultiError, or nil if none found.
func (m *ListDeploymentClustersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentClustersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeploymentClustersResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeploymentClustersResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeploymentClustersResponseValidationError{
					field:  fmt.Sprintf("Clusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	if len(errors) > 0 {
		return ListDeploymentClustersResponseMultiError(errors)
	}

	return nil
}

// ListDeploymentClustersResponseMultiError is an error wrapping multiple
// validation errors returned by ListDeploymentClustersResponse.ValidateAll()
// if the designated constraints aren't met.
type ListDeploymentClustersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentClustersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentClustersResponseMultiError) AllErrors() []error { return m }

// ListDeploymentClustersResponseValidationError is the validation error
// returned by ListDeploymentClustersResponse.Validate if the designated
// constraints aren't met.
type ListDeploymentClustersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentClustersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentClustersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentClustersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentClustersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentClustersResponseValidationError) ErrorName() string {
	return "ListDeploymentClustersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentClustersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentClustersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentClustersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentClustersResponseValidationError{}
