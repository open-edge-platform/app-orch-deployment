// SPDX-FileCopyrightText: (C) 2024 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/nbi/v2/deployment/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeploymentService_ListDeployments_FullMethodName           = "/deployment.v1.DeploymentService/ListDeployments"
	DeploymentService_ListDeploymentsPerCluster_FullMethodName = "/deployment.v1.DeploymentService/ListDeploymentsPerCluster"
	DeploymentService_CreateDeployment_FullMethodName          = "/deployment.v1.DeploymentService/CreateDeployment"
	DeploymentService_GetDeployment_FullMethodName             = "/deployment.v1.DeploymentService/GetDeployment"
	DeploymentService_UpdateDeployment_FullMethodName          = "/deployment.v1.DeploymentService/UpdateDeployment"
	DeploymentService_DeleteDeployment_FullMethodName          = "/deployment.v1.DeploymentService/DeleteDeployment"
	DeploymentService_GetDeploymentsStatus_FullMethodName      = "/deployment.v1.DeploymentService/GetDeploymentsStatus"
	DeploymentService_ListDeploymentClusters_FullMethodName    = "/deployment.v1.DeploymentService/ListDeploymentClusters"
	DeploymentService_GetAppNamespace_FullMethodName           = "/deployment.v1.DeploymentService/GetAppNamespace"
)

// DeploymentServiceClient is the client API for DeploymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DeploymentService provides API operations for catalogs and applications.
type DeploymentServiceClient interface {
	// Gets a list of all deployment objects.
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
	ListDeploymentsPerCluster(ctx context.Context, in *ListDeploymentsPerClusterRequest, opts ...grpc.CallOption) (*ListDeploymentsPerClusterResponse, error)
	// Creates a deployment object.
	CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
	// Gets a deployment object.
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error)
	// Updates a deployment object.
	UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error)
	// Deletes a deployment object.
	DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets all deployment clusters count status.
	GetDeploymentsStatus(ctx context.Context, in *GetDeploymentsStatusRequest, opts ...grpc.CallOption) (*GetDeploymentsStatusResponse, error)
	// Gets a list of all deployment cluster objects.
	ListDeploymentClusters(ctx context.Context, in *ListDeploymentClustersRequest, opts ...grpc.CallOption) (*ListDeploymentClustersResponse, error)
	GetAppNamespace(ctx context.Context, in *GetAppNamespaceRequest, opts ...grpc.CallOption) (*GetAppNamespaceResponse, error)
}

type deploymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentServiceClient(cc grpc.ClientConnInterface) DeploymentServiceClient {
	return &deploymentServiceClient{cc}
}

func (c *deploymentServiceClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, DeploymentService_ListDeployments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) ListDeploymentsPerCluster(ctx context.Context, in *ListDeploymentsPerClusterRequest, opts ...grpc.CallOption) (*ListDeploymentsPerClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDeploymentsPerClusterResponse)
	err := c.cc.Invoke(ctx, DeploymentService_ListDeploymentsPerCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDeploymentResponse)
	err := c.cc.Invoke(ctx, DeploymentService_CreateDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeploymentResponse)
	err := c.cc.Invoke(ctx, DeploymentService_GetDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeploymentResponse)
	err := c.cc.Invoke(ctx, DeploymentService_UpdateDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeploymentService_DeleteDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) GetDeploymentsStatus(ctx context.Context, in *GetDeploymentsStatusRequest, opts ...grpc.CallOption) (*GetDeploymentsStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeploymentsStatusResponse)
	err := c.cc.Invoke(ctx, DeploymentService_GetDeploymentsStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) ListDeploymentClusters(ctx context.Context, in *ListDeploymentClustersRequest, opts ...grpc.CallOption) (*ListDeploymentClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDeploymentClustersResponse)
	err := c.cc.Invoke(ctx, DeploymentService_ListDeploymentClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) GetAppNamespace(ctx context.Context, in *GetAppNamespaceRequest, opts ...grpc.CallOption) (*GetAppNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppNamespaceResponse)
	err := c.cc.Invoke(ctx, DeploymentService_GetAppNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentServiceServer is the server API for DeploymentService service.
// All implementations must embed UnimplementedDeploymentServiceServer
// for forward compatibility.
//
// DeploymentService provides API operations for catalogs and applications.
type DeploymentServiceServer interface {
	// Gets a list of all deployment objects.
	ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error)
	ListDeploymentsPerCluster(context.Context, *ListDeploymentsPerClusterRequest) (*ListDeploymentsPerClusterResponse, error)
	// Creates a deployment object.
	CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error)
	// Gets a deployment object.
	GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error)
	// Updates a deployment object.
	UpdateDeployment(context.Context, *UpdateDeploymentRequest) (*UpdateDeploymentResponse, error)
	// Deletes a deployment object.
	DeleteDeployment(context.Context, *DeleteDeploymentRequest) (*emptypb.Empty, error)
	// Gets all deployment clusters count status.
	GetDeploymentsStatus(context.Context, *GetDeploymentsStatusRequest) (*GetDeploymentsStatusResponse, error)
	// Gets a list of all deployment cluster objects.
	ListDeploymentClusters(context.Context, *ListDeploymentClustersRequest) (*ListDeploymentClustersResponse, error)
	GetAppNamespace(context.Context, *GetAppNamespaceRequest) (*GetAppNamespaceResponse, error)
	mustEmbedUnimplementedDeploymentServiceServer()
}

// UnimplementedDeploymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeploymentServiceServer struct{}

func (UnimplementedDeploymentServiceServer) ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedDeploymentServiceServer) ListDeploymentsPerCluster(context.Context, *ListDeploymentsPerClusterRequest) (*ListDeploymentsPerClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentsPerCluster not implemented")
}
func (UnimplementedDeploymentServiceServer) CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedDeploymentServiceServer) GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedDeploymentServiceServer) UpdateDeployment(context.Context, *UpdateDeploymentRequest) (*UpdateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (UnimplementedDeploymentServiceServer) DeleteDeployment(context.Context, *DeleteDeploymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedDeploymentServiceServer) GetDeploymentsStatus(context.Context, *GetDeploymentsStatusRequest) (*GetDeploymentsStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentsStatus not implemented")
}
func (UnimplementedDeploymentServiceServer) ListDeploymentClusters(context.Context, *ListDeploymentClustersRequest) (*ListDeploymentClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentClusters not implemented")
}
func (UnimplementedDeploymentServiceServer) GetAppNamespace(context.Context, *GetAppNamespaceRequest) (*GetAppNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppNamespace not implemented")
}
func (UnimplementedDeploymentServiceServer) mustEmbedUnimplementedDeploymentServiceServer() {}
func (UnimplementedDeploymentServiceServer) testEmbeddedByValue()                           {}

// UnsafeDeploymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentServiceServer will
// result in compilation errors.
type UnsafeDeploymentServiceServer interface {
	mustEmbedUnimplementedDeploymentServiceServer()
}

func RegisterDeploymentServiceServer(s grpc.ServiceRegistrar, srv DeploymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeploymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeploymentService_ServiceDesc, srv)
}

func _DeploymentService_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_ListDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_ListDeploymentsPerCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsPerClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).ListDeploymentsPerCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_ListDeploymentsPerCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).ListDeploymentsPerCluster(ctx, req.(*ListDeploymentsPerClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).CreateDeployment(ctx, req.(*CreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_GetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_UpdateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).UpdateDeployment(ctx, req.(*UpdateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_DeleteDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).DeleteDeployment(ctx, req.(*DeleteDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_GetDeploymentsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).GetDeploymentsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_GetDeploymentsStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).GetDeploymentsStatus(ctx, req.(*GetDeploymentsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_ListDeploymentClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).ListDeploymentClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_ListDeploymentClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).ListDeploymentClusters(ctx, req.(*ListDeploymentClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_GetAppNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).GetAppNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_GetAppNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).GetAppNamespace(ctx, req.(*GetAppNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeploymentService_ServiceDesc is the grpc.ServiceDesc for DeploymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeploymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deployment.v1.DeploymentService",
	HandlerType: (*DeploymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeployments",
			Handler:    _DeploymentService_ListDeployments_Handler,
		},
		{
			MethodName: "ListDeploymentsPerCluster",
			Handler:    _DeploymentService_ListDeploymentsPerCluster_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _DeploymentService_CreateDeployment_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _DeploymentService_GetDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _DeploymentService_UpdateDeployment_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _DeploymentService_DeleteDeployment_Handler,
		},
		{
			MethodName: "GetDeploymentsStatus",
			Handler:    _DeploymentService_GetDeploymentsStatus_Handler,
		},
		{
			MethodName: "ListDeploymentClusters",
			Handler:    _DeploymentService_ListDeploymentClusters_Handler,
		},
		{
			MethodName: "GetAppNamespace",
			Handler:    _DeploymentService_GetAppNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/nbi/v2/deployment/v1/service.proto",
}
