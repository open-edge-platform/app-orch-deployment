// SPDX-FileCopyrightText: (C) 2024 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: deployment/v1/cluster_service.proto

package deploymentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/open-edge-platform/app-orch-deployment/app-deployment-manager/api/nbi/v2/deployment/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClusterServiceName is the fully-qualified name of the ClusterService service.
	ClusterServiceName = "deployment.v1.ClusterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterServiceGetKubeConfigProcedure is the fully-qualified name of the ClusterService's
	// GetKubeConfig RPC.
	ClusterServiceGetKubeConfigProcedure = "/deployment.v1.ClusterService/GetKubeConfig"
	// ClusterServiceListClustersProcedure is the fully-qualified name of the ClusterService's
	// ListClusters RPC.
	ClusterServiceListClustersProcedure = "/deployment.v1.ClusterService/ListClusters"
	// ClusterServiceGetClusterProcedure is the fully-qualified name of the ClusterService's GetCluster
	// RPC.
	ClusterServiceGetClusterProcedure = "/deployment.v1.ClusterService/GetCluster"
)

// ClusterServiceClient is a client for the deployment.v1.ClusterService service.
type ClusterServiceClient interface {
	// GetKubeConfig gets kubeConfig based on a given cluster id
	GetKubeConfig(context.Context, *connect.Request[v1.GetKubeConfigRequest]) (*connect.Response[v1.GetKubeConfigResponse], error)
	// Gets a list of all cluster objects.
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
	// Gets a cluster object.
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
}

// NewClusterServiceClient constructs a client for the deployment.v1.ClusterService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clusterServiceMethods := v1.File_deployment_v1_cluster_service_proto.Services().ByName("ClusterService").Methods()
	return &clusterServiceClient{
		getKubeConfig: connect.NewClient[v1.GetKubeConfigRequest, v1.GetKubeConfigResponse](
			httpClient,
			baseURL+ClusterServiceGetKubeConfigProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("GetKubeConfig")),
			connect.WithClientOptions(opts...),
		),
		listClusters: connect.NewClient[v1.ListClustersRequest, v1.ListClustersResponse](
			httpClient,
			baseURL+ClusterServiceListClustersProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("ListClusters")),
			connect.WithClientOptions(opts...),
		),
		getCluster: connect.NewClient[v1.GetClusterRequest, v1.GetClusterResponse](
			httpClient,
			baseURL+ClusterServiceGetClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("GetCluster")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clusterServiceClient implements ClusterServiceClient.
type clusterServiceClient struct {
	getKubeConfig *connect.Client[v1.GetKubeConfigRequest, v1.GetKubeConfigResponse]
	listClusters  *connect.Client[v1.ListClustersRequest, v1.ListClustersResponse]
	getCluster    *connect.Client[v1.GetClusterRequest, v1.GetClusterResponse]
}

// GetKubeConfig calls deployment.v1.ClusterService.GetKubeConfig.
func (c *clusterServiceClient) GetKubeConfig(ctx context.Context, req *connect.Request[v1.GetKubeConfigRequest]) (*connect.Response[v1.GetKubeConfigResponse], error) {
	return c.getKubeConfig.CallUnary(ctx, req)
}

// ListClusters calls deployment.v1.ClusterService.ListClusters.
func (c *clusterServiceClient) ListClusters(ctx context.Context, req *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return c.listClusters.CallUnary(ctx, req)
}

// GetCluster calls deployment.v1.ClusterService.GetCluster.
func (c *clusterServiceClient) GetCluster(ctx context.Context, req *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// ClusterServiceHandler is an implementation of the deployment.v1.ClusterService service.
type ClusterServiceHandler interface {
	// GetKubeConfig gets kubeConfig based on a given cluster id
	GetKubeConfig(context.Context, *connect.Request[v1.GetKubeConfigRequest]) (*connect.Response[v1.GetKubeConfigResponse], error)
	// Gets a list of all cluster objects.
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
	// Gets a cluster object.
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
}

// NewClusterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterServiceHandler(svc ClusterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterServiceMethods := v1.File_deployment_v1_cluster_service_proto.Services().ByName("ClusterService").Methods()
	clusterServiceGetKubeConfigHandler := connect.NewUnaryHandler(
		ClusterServiceGetKubeConfigProcedure,
		svc.GetKubeConfig,
		connect.WithSchema(clusterServiceMethods.ByName("GetKubeConfig")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceListClustersHandler := connect.NewUnaryHandler(
		ClusterServiceListClustersProcedure,
		svc.ListClusters,
		connect.WithSchema(clusterServiceMethods.ByName("ListClusters")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceGetClusterHandler := connect.NewUnaryHandler(
		ClusterServiceGetClusterProcedure,
		svc.GetCluster,
		connect.WithSchema(clusterServiceMethods.ByName("GetCluster")),
		connect.WithHandlerOptions(opts...),
	)
	return "/deployment.v1.ClusterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterServiceGetKubeConfigProcedure:
			clusterServiceGetKubeConfigHandler.ServeHTTP(w, r)
		case ClusterServiceListClustersProcedure:
			clusterServiceListClustersHandler.ServeHTTP(w, r)
		case ClusterServiceGetClusterProcedure:
			clusterServiceGetClusterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterServiceHandler struct{}

func (UnimplementedClusterServiceHandler) GetKubeConfig(context.Context, *connect.Request[v1.GetKubeConfigRequest]) (*connect.Response[v1.GetKubeConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployment.v1.ClusterService.GetKubeConfig is not implemented"))
}

func (UnimplementedClusterServiceHandler) ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployment.v1.ClusterService.ListClusters is not implemented"))
}

func (UnimplementedClusterServiceHandler) GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployment.v1.ClusterService.GetCluster is not implemented"))
}
