// SPDX-FileCopyrightText: (C) 2024 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	empty "github.com/golang/protobuf/ptypes/empty"
	v1 "github.com/open-edge-platform/app-orch-deployment/app-deployment-manager/api/nbi/v2/deployment/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeploymentServiceName is the fully-qualified name of the DeploymentService service.
	DeploymentServiceName = "deployment.v1.DeploymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeploymentServiceListDeploymentsProcedure is the fully-qualified name of the DeploymentService's
	// ListDeployments RPC.
	DeploymentServiceListDeploymentsProcedure = "/deployment.v1.DeploymentService/ListDeployments"
	// DeploymentServiceListDeploymentsPerClusterProcedure is the fully-qualified name of the
	// DeploymentService's ListDeploymentsPerCluster RPC.
	DeploymentServiceListDeploymentsPerClusterProcedure = "/deployment.v1.DeploymentService/ListDeploymentsPerCluster"
	// DeploymentServiceCreateDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// CreateDeployment RPC.
	DeploymentServiceCreateDeploymentProcedure = "/deployment.v1.DeploymentService/CreateDeployment"
	// DeploymentServiceGetDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// GetDeployment RPC.
	DeploymentServiceGetDeploymentProcedure = "/deployment.v1.DeploymentService/GetDeployment"
	// DeploymentServiceUpdateDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// UpdateDeployment RPC.
	DeploymentServiceUpdateDeploymentProcedure = "/deployment.v1.DeploymentService/UpdateDeployment"
	// DeploymentServiceDeleteDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// DeleteDeployment RPC.
	DeploymentServiceDeleteDeploymentProcedure = "/deployment.v1.DeploymentService/DeleteDeployment"
	// DeploymentServiceGetDeploymentsStatusProcedure is the fully-qualified name of the
	// DeploymentService's GetDeploymentsStatus RPC.
	DeploymentServiceGetDeploymentsStatusProcedure = "/deployment.v1.DeploymentService/GetDeploymentsStatus"
	// DeploymentServiceListDeploymentClustersProcedure is the fully-qualified name of the
	// DeploymentService's ListDeploymentClusters RPC.
	DeploymentServiceListDeploymentClustersProcedure = "/deployment.v1.DeploymentService/ListDeploymentClusters"
	// DeploymentServiceGetAppNamespaceProcedure is the fully-qualified name of the DeploymentService's
	// GetAppNamespace RPC.
	DeploymentServiceGetAppNamespaceProcedure = "/deployment.v1.DeploymentService/GetAppNamespace"
)

// DeploymentServiceClient is a client for the deployment.v1.DeploymentService service.
type DeploymentServiceClient interface {
	// Gets a list of all deployment objects.
	ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error)
	ListDeploymentsPerCluster(context.Context, *connect.Request[v1.ListDeploymentsPerClusterRequest]) (*connect.Response[v1.ListDeploymentsPerClusterResponse], error)
	// Creates a deployment object.
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	// Gets a deployment object.
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	// Updates a deployment object.
	UpdateDeployment(context.Context, *connect.Request[v1.UpdateDeploymentRequest]) (*connect.Response[v1.UpdateDeploymentResponse], error)
	// Deletes a deployment object.
	DeleteDeployment(context.Context, *connect.Request[v1.DeleteDeploymentRequest]) (*connect.Response[empty.Empty], error)
	// Gets all deployment clusters count status.
	GetDeploymentsStatus(context.Context, *connect.Request[v1.GetDeploymentsStatusRequest]) (*connect.Response[v1.GetDeploymentsStatusResponse], error)
	// Gets a list of all deployment cluster objects.
	ListDeploymentClusters(context.Context, *connect.Request[v1.ListDeploymentClustersRequest]) (*connect.Response[v1.ListDeploymentClustersResponse], error)
	GetAppNamespace(context.Context, *connect.Request[v1.GetAppNamespaceRequest]) (*connect.Response[v1.GetAppNamespaceResponse], error)
}

// NewDeploymentServiceClient constructs a client for the deployment.v1.DeploymentService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeploymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeploymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deploymentServiceMethods := v1.File_service_proto.Services().ByName("DeploymentService").Methods()
	return &deploymentServiceClient{
		listDeployments: connect.NewClient[v1.ListDeploymentsRequest, v1.ListDeploymentsResponse](
			httpClient,
			baseURL+DeploymentServiceListDeploymentsProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("ListDeployments")),
			connect.WithClientOptions(opts...),
		),
		listDeploymentsPerCluster: connect.NewClient[v1.ListDeploymentsPerClusterRequest, v1.ListDeploymentsPerClusterResponse](
			httpClient,
			baseURL+DeploymentServiceListDeploymentsPerClusterProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("ListDeploymentsPerCluster")),
			connect.WithClientOptions(opts...),
		),
		createDeployment: connect.NewClient[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceCreateDeploymentProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("CreateDeployment")),
			connect.WithClientOptions(opts...),
		),
		getDeployment: connect.NewClient[v1.GetDeploymentRequest, v1.GetDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceGetDeploymentProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("GetDeployment")),
			connect.WithClientOptions(opts...),
		),
		updateDeployment: connect.NewClient[v1.UpdateDeploymentRequest, v1.UpdateDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceUpdateDeploymentProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("UpdateDeployment")),
			connect.WithClientOptions(opts...),
		),
		deleteDeployment: connect.NewClient[v1.DeleteDeploymentRequest, empty.Empty](
			httpClient,
			baseURL+DeploymentServiceDeleteDeploymentProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("DeleteDeployment")),
			connect.WithClientOptions(opts...),
		),
		getDeploymentsStatus: connect.NewClient[v1.GetDeploymentsStatusRequest, v1.GetDeploymentsStatusResponse](
			httpClient,
			baseURL+DeploymentServiceGetDeploymentsStatusProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("GetDeploymentsStatus")),
			connect.WithClientOptions(opts...),
		),
		listDeploymentClusters: connect.NewClient[v1.ListDeploymentClustersRequest, v1.ListDeploymentClustersResponse](
			httpClient,
			baseURL+DeploymentServiceListDeploymentClustersProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("ListDeploymentClusters")),
			connect.WithClientOptions(opts...),
		),
		getAppNamespace: connect.NewClient[v1.GetAppNamespaceRequest, v1.GetAppNamespaceResponse](
			httpClient,
			baseURL+DeploymentServiceGetAppNamespaceProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("GetAppNamespace")),
			connect.WithClientOptions(opts...),
		),
	}
}

// deploymentServiceClient implements DeploymentServiceClient.
type deploymentServiceClient struct {
	listDeployments           *connect.Client[v1.ListDeploymentsRequest, v1.ListDeploymentsResponse]
	listDeploymentsPerCluster *connect.Client[v1.ListDeploymentsPerClusterRequest, v1.ListDeploymentsPerClusterResponse]
	createDeployment          *connect.Client[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse]
	getDeployment             *connect.Client[v1.GetDeploymentRequest, v1.GetDeploymentResponse]
	updateDeployment          *connect.Client[v1.UpdateDeploymentRequest, v1.UpdateDeploymentResponse]
	deleteDeployment          *connect.Client[v1.DeleteDeploymentRequest, empty.Empty]
	getDeploymentsStatus      *connect.Client[v1.GetDeploymentsStatusRequest, v1.GetDeploymentsStatusResponse]
	listDeploymentClusters    *connect.Client[v1.ListDeploymentClustersRequest, v1.ListDeploymentClustersResponse]
	getAppNamespace           *connect.Client[v1.GetAppNamespaceRequest, v1.GetAppNamespaceResponse]
}

// ListDeployments calls deployment.v1.DeploymentService.ListDeployments.
func (c *deploymentServiceClient) ListDeployments(ctx context.Context, req *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error) {
	return c.listDeployments.CallUnary(ctx, req)
}

// ListDeploymentsPerCluster calls deployment.v1.DeploymentService.ListDeploymentsPerCluster.
func (c *deploymentServiceClient) ListDeploymentsPerCluster(ctx context.Context, req *connect.Request[v1.ListDeploymentsPerClusterRequest]) (*connect.Response[v1.ListDeploymentsPerClusterResponse], error) {
	return c.listDeploymentsPerCluster.CallUnary(ctx, req)
}

// CreateDeployment calls deployment.v1.DeploymentService.CreateDeployment.
func (c *deploymentServiceClient) CreateDeployment(ctx context.Context, req *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return c.createDeployment.CallUnary(ctx, req)
}

// GetDeployment calls deployment.v1.DeploymentService.GetDeployment.
func (c *deploymentServiceClient) GetDeployment(ctx context.Context, req *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return c.getDeployment.CallUnary(ctx, req)
}

// UpdateDeployment calls deployment.v1.DeploymentService.UpdateDeployment.
func (c *deploymentServiceClient) UpdateDeployment(ctx context.Context, req *connect.Request[v1.UpdateDeploymentRequest]) (*connect.Response[v1.UpdateDeploymentResponse], error) {
	return c.updateDeployment.CallUnary(ctx, req)
}

// DeleteDeployment calls deployment.v1.DeploymentService.DeleteDeployment.
func (c *deploymentServiceClient) DeleteDeployment(ctx context.Context, req *connect.Request[v1.DeleteDeploymentRequest]) (*connect.Response[empty.Empty], error) {
	return c.deleteDeployment.CallUnary(ctx, req)
}

// GetDeploymentsStatus calls deployment.v1.DeploymentService.GetDeploymentsStatus.
func (c *deploymentServiceClient) GetDeploymentsStatus(ctx context.Context, req *connect.Request[v1.GetDeploymentsStatusRequest]) (*connect.Response[v1.GetDeploymentsStatusResponse], error) {
	return c.getDeploymentsStatus.CallUnary(ctx, req)
}

// ListDeploymentClusters calls deployment.v1.DeploymentService.ListDeploymentClusters.
func (c *deploymentServiceClient) ListDeploymentClusters(ctx context.Context, req *connect.Request[v1.ListDeploymentClustersRequest]) (*connect.Response[v1.ListDeploymentClustersResponse], error) {
	return c.listDeploymentClusters.CallUnary(ctx, req)
}

// GetAppNamespace calls deployment.v1.DeploymentService.GetAppNamespace.
func (c *deploymentServiceClient) GetAppNamespace(ctx context.Context, req *connect.Request[v1.GetAppNamespaceRequest]) (*connect.Response[v1.GetAppNamespaceResponse], error) {
	return c.getAppNamespace.CallUnary(ctx, req)
}

// DeploymentServiceHandler is an implementation of the deployment.v1.DeploymentService service.
type DeploymentServiceHandler interface {
	// Gets a list of all deployment objects.
	ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error)
	ListDeploymentsPerCluster(context.Context, *connect.Request[v1.ListDeploymentsPerClusterRequest]) (*connect.Response[v1.ListDeploymentsPerClusterResponse], error)
	// Creates a deployment object.
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	// Gets a deployment object.
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	// Updates a deployment object.
	UpdateDeployment(context.Context, *connect.Request[v1.UpdateDeploymentRequest]) (*connect.Response[v1.UpdateDeploymentResponse], error)
	// Deletes a deployment object.
	DeleteDeployment(context.Context, *connect.Request[v1.DeleteDeploymentRequest]) (*connect.Response[empty.Empty], error)
	// Gets all deployment clusters count status.
	GetDeploymentsStatus(context.Context, *connect.Request[v1.GetDeploymentsStatusRequest]) (*connect.Response[v1.GetDeploymentsStatusResponse], error)
	// Gets a list of all deployment cluster objects.
	ListDeploymentClusters(context.Context, *connect.Request[v1.ListDeploymentClustersRequest]) (*connect.Response[v1.ListDeploymentClustersResponse], error)
	GetAppNamespace(context.Context, *connect.Request[v1.GetAppNamespaceRequest]) (*connect.Response[v1.GetAppNamespaceResponse], error)
}

// NewDeploymentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeploymentServiceHandler(svc DeploymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deploymentServiceMethods := v1.File_service_proto.Services().ByName("DeploymentService").Methods()
	deploymentServiceListDeploymentsHandler := connect.NewUnaryHandler(
		DeploymentServiceListDeploymentsProcedure,
		svc.ListDeployments,
		connect.WithSchema(deploymentServiceMethods.ByName("ListDeployments")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceListDeploymentsPerClusterHandler := connect.NewUnaryHandler(
		DeploymentServiceListDeploymentsPerClusterProcedure,
		svc.ListDeploymentsPerCluster,
		connect.WithSchema(deploymentServiceMethods.ByName("ListDeploymentsPerCluster")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceCreateDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceCreateDeploymentProcedure,
		svc.CreateDeployment,
		connect.WithSchema(deploymentServiceMethods.ByName("CreateDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceGetDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceGetDeploymentProcedure,
		svc.GetDeployment,
		connect.WithSchema(deploymentServiceMethods.ByName("GetDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceUpdateDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceUpdateDeploymentProcedure,
		svc.UpdateDeployment,
		connect.WithSchema(deploymentServiceMethods.ByName("UpdateDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceDeleteDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceDeleteDeploymentProcedure,
		svc.DeleteDeployment,
		connect.WithSchema(deploymentServiceMethods.ByName("DeleteDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceGetDeploymentsStatusHandler := connect.NewUnaryHandler(
		DeploymentServiceGetDeploymentsStatusProcedure,
		svc.GetDeploymentsStatus,
		connect.WithSchema(deploymentServiceMethods.ByName("GetDeploymentsStatus")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceListDeploymentClustersHandler := connect.NewUnaryHandler(
		DeploymentServiceListDeploymentClustersProcedure,
		svc.ListDeploymentClusters,
		connect.WithSchema(deploymentServiceMethods.ByName("ListDeploymentClusters")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceGetAppNamespaceHandler := connect.NewUnaryHandler(
		DeploymentServiceGetAppNamespaceProcedure,
		svc.GetAppNamespace,
		connect.WithSchema(deploymentServiceMethods.ByName("GetAppNamespace")),
		connect.WithHandlerOptions(opts...),
	)
	return "/deployment.v1.DeploymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeploymentServiceListDeploymentsProcedure:
			deploymentServiceListDeploymentsHandler.ServeHTTP(w, r)
		case DeploymentServiceListDeploymentsPerClusterProcedure:
			deploymentServiceListDeploymentsPerClusterHandler.ServeHTTP(w, r)
		case DeploymentServiceCreateDeploymentProcedure:
			deploymentServiceCreateDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceGetDeploymentProcedure:
			deploymentServiceGetDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceUpdateDeploymentProcedure:
			deploymentServiceUpdateDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceDeleteDeploymentProcedure:
			deploymentServiceDeleteDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceGetDeploymentsStatusProcedure:
			deploymentServiceGetDeploymentsStatusHandler.ServeHTTP(w, r)
		case DeploymentServiceListDeploymentClustersProcedure:
			deploymentServiceListDeploymentClustersHandler.ServeHTTP(w, r)
		case DeploymentServiceGetAppNamespaceProcedure:
			deploymentServiceGetAppNamespaceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeploymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeploymentServiceHandler struct{}

func (UnimplementedDeploymentServiceHandler) ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployment.v1.DeploymentService.ListDeployments is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) ListDeploymentsPerCluster(context.Context, *connect.Request[v1.ListDeploymentsPerClusterRequest]) (*connect.Response[v1.ListDeploymentsPerClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployment.v1.DeploymentService.ListDeploymentsPerCluster is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployment.v1.DeploymentService.CreateDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployment.v1.DeploymentService.GetDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) UpdateDeployment(context.Context, *connect.Request[v1.UpdateDeploymentRequest]) (*connect.Response[v1.UpdateDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployment.v1.DeploymentService.UpdateDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) DeleteDeployment(context.Context, *connect.Request[v1.DeleteDeploymentRequest]) (*connect.Response[empty.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployment.v1.DeploymentService.DeleteDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) GetDeploymentsStatus(context.Context, *connect.Request[v1.GetDeploymentsStatusRequest]) (*connect.Response[v1.GetDeploymentsStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployment.v1.DeploymentService.GetDeploymentsStatus is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) ListDeploymentClusters(context.Context, *connect.Request[v1.ListDeploymentClustersRequest]) (*connect.Response[v1.ListDeploymentClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployment.v1.DeploymentService.ListDeploymentClusters is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) GetAppNamespace(context.Context, *connect.Request[v1.GetAppNamespaceRequest]) (*connect.Response[v1.GetAppNamespaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployment.v1.DeploymentService.GetAppNamespace is not implemented"))
}
