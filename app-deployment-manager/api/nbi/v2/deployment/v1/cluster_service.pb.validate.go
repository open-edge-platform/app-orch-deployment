// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: deployment/v1/cluster_service.proto

package deploymentv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetKubeConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubeConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubeConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKubeConfigRequestMultiError, or nil if none found.
func (m *GetKubeConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubeConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterId()); l < 1 || l > 40 {
		err := GetKubeConfigRequestValidationError{
			field:  "ClusterId",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetKubeConfigRequest_ClusterId_Pattern.MatchString(m.GetClusterId()) {
		err := GetKubeConfigRequestValidationError{
			field:  "ClusterId",
			reason: "value does not match regex pattern \"^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetKubeConfigRequestMultiError(errors)
	}

	return nil
}

// GetKubeConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetKubeConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetKubeConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubeConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubeConfigRequestMultiError) AllErrors() []error { return m }

// GetKubeConfigRequestValidationError is the validation error returned by
// GetKubeConfigRequest.Validate if the designated constraints aren't met.
type GetKubeConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubeConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubeConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubeConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubeConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubeConfigRequestValidationError) ErrorName() string {
	return "GetKubeConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubeConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubeConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubeConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubeConfigRequestValidationError{}

var _GetKubeConfigRequest_ClusterId_Pattern = regexp.MustCompile("^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$")

// Validate checks the field values on GetKubeConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubeConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubeConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKubeConfigResponseMultiError, or nil if none found.
func (m *GetKubeConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubeConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKubeConfigInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKubeConfigResponseValidationError{
					field:  "KubeConfigInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKubeConfigResponseValidationError{
					field:  "KubeConfigInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKubeConfigInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKubeConfigResponseValidationError{
				field:  "KubeConfigInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetKubeConfigResponseMultiError(errors)
	}

	return nil
}

// GetKubeConfigResponseMultiError is an error wrapping multiple validation
// errors returned by GetKubeConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type GetKubeConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubeConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubeConfigResponseMultiError) AllErrors() []error { return m }

// GetKubeConfigResponseValidationError is the validation error returned by
// GetKubeConfigResponse.Validate if the designated constraints aren't met.
type GetKubeConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubeConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubeConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubeConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubeConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubeConfigResponseValidationError) ErrorName() string {
	return "GetKubeConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubeConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubeConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubeConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubeConfigResponseValidationError{}

// Validate checks the field values on KubeConfigInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KubeConfigInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubeConfigInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KubeConfigInfoMultiError,
// or nil if none found.
func (m *KubeConfigInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *KubeConfigInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KubeConfig

	if len(errors) > 0 {
		return KubeConfigInfoMultiError(errors)
	}

	return nil
}

// KubeConfigInfoMultiError is an error wrapping multiple validation errors
// returned by KubeConfigInfo.ValidateAll() if the designated constraints
// aren't met.
type KubeConfigInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubeConfigInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubeConfigInfoMultiError) AllErrors() []error { return m }

// KubeConfigInfoValidationError is the validation error returned by
// KubeConfigInfo.Validate if the designated constraints aren't met.
type KubeConfigInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeConfigInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeConfigInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeConfigInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeConfigInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeConfigInfoValidationError) ErrorName() string { return "KubeConfigInfoValidationError" }

// Error satisfies the builtin error interface
func (e KubeConfigInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeConfigInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeConfigInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeConfigInfoValidationError{}

// Validate checks the field values on ListClustersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClustersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClustersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClustersRequestMultiError, or nil if none found.
func (m *ListClustersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClustersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderBy

	// no validation rules for Filter

	if val := m.GetPageSize(); val < 0 || val > 500 {
		err := ListClustersRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [0, 500]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := ListClustersRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListClustersRequestMultiError(errors)
	}

	return nil
}

// ListClustersRequestMultiError is an error wrapping multiple validation
// errors returned by ListClustersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListClustersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClustersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClustersRequestMultiError) AllErrors() []error { return m }

// ListClustersRequestValidationError is the validation error returned by
// ListClustersRequest.Validate if the designated constraints aren't met.
type ListClustersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersRequestValidationError) ErrorName() string {
	return "ListClustersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClustersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersRequestValidationError{}

// Validate checks the field values on ListClustersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClustersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClustersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClustersResponseMultiError, or nil if none found.
func (m *ListClustersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClustersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetClusters()) > 500 {
		err := ListClustersResponseValidationError{
			field:  "Clusters",
			reason: "value must contain no more than 500 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClustersResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClustersResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClustersResponseValidationError{
					field:  fmt.Sprintf("Clusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	if len(errors) > 0 {
		return ListClustersResponseMultiError(errors)
	}

	return nil
}

// ListClustersResponseMultiError is an error wrapping multiple validation
// errors returned by ListClustersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListClustersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClustersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClustersResponseMultiError) AllErrors() []error { return m }

// ListClustersResponseValidationError is the validation error returned by
// ListClustersResponse.Validate if the designated constraints aren't met.
type ListClustersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersResponseValidationError) ErrorName() string {
	return "ListClustersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListClustersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersResponseValidationError{}

// Validate checks the field values on GetClusterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterRequestMultiError, or nil if none found.
func (m *GetClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterId()); l < 1 || l > 40 {
		err := GetClusterRequestValidationError{
			field:  "ClusterId",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetClusterRequest_ClusterId_Pattern.MatchString(m.GetClusterId()) {
		err := GetClusterRequestValidationError{
			field:  "ClusterId",
			reason: "value does not match regex pattern \"^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetClusterRequestMultiError(errors)
	}

	return nil
}

// GetClusterRequestMultiError is an error wrapping multiple validation errors
// returned by GetClusterRequest.ValidateAll() if the designated constraints
// aren't met.
type GetClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterRequestMultiError) AllErrors() []error { return m }

// GetClusterRequestValidationError is the validation error returned by
// GetClusterRequest.Validate if the designated constraints aren't met.
type GetClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterRequestValidationError) ErrorName() string {
	return "GetClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterRequestValidationError{}

var _GetClusterRequest_ClusterId_Pattern = regexp.MustCompile("^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$")

// Validate checks the field values on GetClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterResponseMultiError, or nil if none found.
func (m *GetClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClusterResponseValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClusterResponseValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterResponseValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClusterResponseMultiError(errors)
	}

	return nil
}

// GetClusterResponseMultiError is an error wrapping multiple validation errors
// returned by GetClusterResponse.ValidateAll() if the designated constraints
// aren't met.
type GetClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterResponseMultiError) AllErrors() []error { return m }

// GetClusterResponseValidationError is the validation error returned by
// GetClusterResponse.Validate if the designated constraints aren't met.
type GetClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterResponseValidationError) ErrorName() string {
	return "GetClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterResponseValidationError{}

// Validate checks the field values on ClusterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterInfoMultiError, or
// nil if none found.
func (m *ClusterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterInfoValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterInfoValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterInfoValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return ClusterInfoMultiError(errors)
	}

	return nil
}

// ClusterInfoMultiError is an error wrapping multiple validation errors
// returned by ClusterInfo.ValidateAll() if the designated constraints aren't met.
type ClusterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterInfoMultiError) AllErrors() []error { return m }

// ClusterInfoValidationError is the validation error returned by
// ClusterInfo.Validate if the designated constraints aren't met.
type ClusterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterInfoValidationError) ErrorName() string { return "ClusterInfoValidationError" }

// Error satisfies the builtin error interface
func (e ClusterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterInfoValidationError{}
