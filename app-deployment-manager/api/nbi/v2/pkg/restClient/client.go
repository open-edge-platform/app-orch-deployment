// Package restClient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package restClient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeploymentV1ClusterServiceListClusters request
	DeploymentV1ClusterServiceListClusters(ctx context.Context, params *DeploymentV1ClusterServiceListClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentV1ClusterServiceGetCluster request
	DeploymentV1ClusterServiceGetCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentV1DeploymentServiceListDeployments request
	DeploymentV1DeploymentServiceListDeployments(ctx context.Context, params *DeploymentV1DeploymentServiceListDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentV1DeploymentServiceCreateDeployment request with any body
	DeploymentV1DeploymentServiceCreateDeploymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeploymentV1DeploymentServiceCreateDeployment(ctx context.Context, body DeploymentV1DeploymentServiceCreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentV1DeploymentServiceListDeploymentsPerCluster request
	DeploymentV1DeploymentServiceListDeploymentsPerCluster(ctx context.Context, clusterId string, params *DeploymentV1DeploymentServiceListDeploymentsPerClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentV1DeploymentServiceDeleteDeployment request
	DeploymentV1DeploymentServiceDeleteDeployment(ctx context.Context, deplId string, params *DeploymentV1DeploymentServiceDeleteDeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentV1DeploymentServiceGetDeployment request
	DeploymentV1DeploymentServiceGetDeployment(ctx context.Context, deplId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentV1DeploymentServiceUpdateDeployment request with any body
	DeploymentV1DeploymentServiceUpdateDeploymentWithBody(ctx context.Context, deplId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeploymentV1DeploymentServiceUpdateDeployment(ctx context.Context, deplId string, body DeploymentV1DeploymentServiceUpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentV1DeploymentServiceListDeploymentClusters request
	DeploymentV1DeploymentServiceListDeploymentClusters(ctx context.Context, deplId string, params *DeploymentV1DeploymentServiceListDeploymentClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentV1DeploymentServiceGetDeploymentsStatus request
	DeploymentV1DeploymentServiceGetDeploymentsStatus(ctx context.Context, params *DeploymentV1DeploymentServiceGetDeploymentsStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentV1ClusterServiceGetKubeConfig request with any body
	DeploymentV1ClusterServiceGetKubeConfigWithBody(ctx context.Context, params *DeploymentV1ClusterServiceGetKubeConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeploymentV1ClusterServiceGetKubeConfig(ctx context.Context, params *DeploymentV1ClusterServiceGetKubeConfigParams, body DeploymentV1ClusterServiceGetKubeConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeploymentV1DeploymentServiceGetAppNamespace request with any body
	DeploymentV1DeploymentServiceGetAppNamespaceWithBody(ctx context.Context, params *DeploymentV1DeploymentServiceGetAppNamespaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeploymentV1DeploymentServiceGetAppNamespace(ctx context.Context, params *DeploymentV1DeploymentServiceGetAppNamespaceParams, body DeploymentV1DeploymentServiceGetAppNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeploymentV1ClusterServiceListClusters(ctx context.Context, params *DeploymentV1ClusterServiceListClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1ClusterServiceListClustersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1ClusterServiceGetCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1ClusterServiceGetClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1DeploymentServiceListDeployments(ctx context.Context, params *DeploymentV1DeploymentServiceListDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1DeploymentServiceListDeploymentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1DeploymentServiceCreateDeploymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1DeploymentServiceCreateDeploymentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1DeploymentServiceCreateDeployment(ctx context.Context, body DeploymentV1DeploymentServiceCreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1DeploymentServiceCreateDeploymentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1DeploymentServiceListDeploymentsPerCluster(ctx context.Context, clusterId string, params *DeploymentV1DeploymentServiceListDeploymentsPerClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1DeploymentServiceListDeploymentsPerClusterRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1DeploymentServiceDeleteDeployment(ctx context.Context, deplId string, params *DeploymentV1DeploymentServiceDeleteDeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1DeploymentServiceDeleteDeploymentRequest(c.Server, deplId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1DeploymentServiceGetDeployment(ctx context.Context, deplId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1DeploymentServiceGetDeploymentRequest(c.Server, deplId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1DeploymentServiceUpdateDeploymentWithBody(ctx context.Context, deplId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1DeploymentServiceUpdateDeploymentRequestWithBody(c.Server, deplId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1DeploymentServiceUpdateDeployment(ctx context.Context, deplId string, body DeploymentV1DeploymentServiceUpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1DeploymentServiceUpdateDeploymentRequest(c.Server, deplId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1DeploymentServiceListDeploymentClusters(ctx context.Context, deplId string, params *DeploymentV1DeploymentServiceListDeploymentClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1DeploymentServiceListDeploymentClustersRequest(c.Server, deplId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1DeploymentServiceGetDeploymentsStatus(ctx context.Context, params *DeploymentV1DeploymentServiceGetDeploymentsStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1DeploymentServiceGetDeploymentsStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1ClusterServiceGetKubeConfigWithBody(ctx context.Context, params *DeploymentV1ClusterServiceGetKubeConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1ClusterServiceGetKubeConfigRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1ClusterServiceGetKubeConfig(ctx context.Context, params *DeploymentV1ClusterServiceGetKubeConfigParams, body DeploymentV1ClusterServiceGetKubeConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1ClusterServiceGetKubeConfigRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1DeploymentServiceGetAppNamespaceWithBody(ctx context.Context, params *DeploymentV1DeploymentServiceGetAppNamespaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1DeploymentServiceGetAppNamespaceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeploymentV1DeploymentServiceGetAppNamespace(ctx context.Context, params *DeploymentV1DeploymentServiceGetAppNamespaceParams, body DeploymentV1DeploymentServiceGetAppNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeploymentV1DeploymentServiceGetAppNamespaceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeploymentV1ClusterServiceListClustersRequest generates requests for DeploymentV1ClusterServiceListClusters
func NewDeploymentV1ClusterServiceListClustersRequest(server string, params *DeploymentV1ClusterServiceListClustersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment.orchestrator.apis/v1/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Labels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentV1ClusterServiceGetClusterRequest generates requests for DeploymentV1ClusterServiceGetCluster
func NewDeploymentV1ClusterServiceGetClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment.orchestrator.apis/v1/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentV1DeploymentServiceListDeploymentsRequest generates requests for DeploymentV1DeploymentServiceListDeployments
func NewDeploymentV1DeploymentServiceListDeploymentsRequest(server string, params *DeploymentV1DeploymentServiceListDeploymentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment.orchestrator.apis/v1/deployments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Labels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentV1DeploymentServiceCreateDeploymentRequest calls the generic DeploymentV1DeploymentServiceCreateDeployment builder with application/json body
func NewDeploymentV1DeploymentServiceCreateDeploymentRequest(server string, body DeploymentV1DeploymentServiceCreateDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeploymentV1DeploymentServiceCreateDeploymentRequestWithBody(server, "application/json", bodyReader)
}

// NewDeploymentV1DeploymentServiceCreateDeploymentRequestWithBody generates requests for DeploymentV1DeploymentServiceCreateDeployment with any type of body
func NewDeploymentV1DeploymentServiceCreateDeploymentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment.orchestrator.apis/v1/deployments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeploymentV1DeploymentServiceListDeploymentsPerClusterRequest generates requests for DeploymentV1DeploymentServiceListDeploymentsPerCluster
func NewDeploymentV1DeploymentServiceListDeploymentsPerClusterRequest(server string, clusterId string, params *DeploymentV1DeploymentServiceListDeploymentsPerClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment.orchestrator.apis/v1/deployments/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Labels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentV1DeploymentServiceDeleteDeploymentRequest generates requests for DeploymentV1DeploymentServiceDeleteDeployment
func NewDeploymentV1DeploymentServiceDeleteDeploymentRequest(server string, deplId string, params *DeploymentV1DeploymentServiceDeleteDeploymentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "depl_id", runtime.ParamLocationPath, deplId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment.orchestrator.apis/v1/deployments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleteType", runtime.ParamLocationQuery, params.DeleteType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentV1DeploymentServiceGetDeploymentRequest generates requests for DeploymentV1DeploymentServiceGetDeployment
func NewDeploymentV1DeploymentServiceGetDeploymentRequest(server string, deplId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "depl_id", runtime.ParamLocationPath, deplId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment.orchestrator.apis/v1/deployments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentV1DeploymentServiceUpdateDeploymentRequest calls the generic DeploymentV1DeploymentServiceUpdateDeployment builder with application/json body
func NewDeploymentV1DeploymentServiceUpdateDeploymentRequest(server string, deplId string, body DeploymentV1DeploymentServiceUpdateDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeploymentV1DeploymentServiceUpdateDeploymentRequestWithBody(server, deplId, "application/json", bodyReader)
}

// NewDeploymentV1DeploymentServiceUpdateDeploymentRequestWithBody generates requests for DeploymentV1DeploymentServiceUpdateDeployment with any type of body
func NewDeploymentV1DeploymentServiceUpdateDeploymentRequestWithBody(server string, deplId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "depl_id", runtime.ParamLocationPath, deplId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment.orchestrator.apis/v1/deployments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeploymentV1DeploymentServiceListDeploymentClustersRequest generates requests for DeploymentV1DeploymentServiceListDeploymentClusters
func NewDeploymentV1DeploymentServiceListDeploymentClustersRequest(server string, deplId string, params *DeploymentV1DeploymentServiceListDeploymentClustersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "depl_id", runtime.ParamLocationPath, deplId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment.orchestrator.apis/v1/deployments/%s/clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentV1DeploymentServiceGetDeploymentsStatusRequest generates requests for DeploymentV1DeploymentServiceGetDeploymentsStatus
func NewDeploymentV1DeploymentServiceGetDeploymentsStatusRequest(server string, params *DeploymentV1DeploymentServiceGetDeploymentsStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment.orchestrator.apis/v1/summary/deployments_status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Labels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeploymentV1ClusterServiceGetKubeConfigRequest calls the generic DeploymentV1ClusterServiceGetKubeConfig builder with application/json body
func NewDeploymentV1ClusterServiceGetKubeConfigRequest(server string, params *DeploymentV1ClusterServiceGetKubeConfigParams, body DeploymentV1ClusterServiceGetKubeConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeploymentV1ClusterServiceGetKubeConfigRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDeploymentV1ClusterServiceGetKubeConfigRequestWithBody generates requests for DeploymentV1ClusterServiceGetKubeConfig with any type of body
func NewDeploymentV1ClusterServiceGetKubeConfigRequestWithBody(server string, params *DeploymentV1ClusterServiceGetKubeConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment.v1.ClusterService/GetKubeConfig")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Connect-Protocol-Version", runtime.ParamLocationHeader, params.ConnectProtocolVersion)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Connect-Protocol-Version", headerParam0)

	if params.ConnectTimeoutMs != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Connect-Timeout-Ms", runtime.ParamLocationHeader, *params.ConnectTimeoutMs)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Connect-Timeout-Ms", headerParam1)
	}

	return req, nil
}

// NewDeploymentV1DeploymentServiceGetAppNamespaceRequest calls the generic DeploymentV1DeploymentServiceGetAppNamespace builder with application/json body
func NewDeploymentV1DeploymentServiceGetAppNamespaceRequest(server string, params *DeploymentV1DeploymentServiceGetAppNamespaceParams, body DeploymentV1DeploymentServiceGetAppNamespaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeploymentV1DeploymentServiceGetAppNamespaceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDeploymentV1DeploymentServiceGetAppNamespaceRequestWithBody generates requests for DeploymentV1DeploymentServiceGetAppNamespace with any type of body
func NewDeploymentV1DeploymentServiceGetAppNamespaceRequestWithBody(server string, params *DeploymentV1DeploymentServiceGetAppNamespaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment.v1.DeploymentService/GetAppNamespace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Connect-Protocol-Version", runtime.ParamLocationHeader, params.ConnectProtocolVersion)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Connect-Protocol-Version", headerParam0)

	if params.ConnectTimeoutMs != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Connect-Timeout-Ms", runtime.ParamLocationHeader, *params.ConnectTimeoutMs)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Connect-Timeout-Ms", headerParam1)
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeploymentV1ClusterServiceListClusters request
	DeploymentV1ClusterServiceListClustersWithResponse(ctx context.Context, params *DeploymentV1ClusterServiceListClustersParams, reqEditors ...RequestEditorFn) (*DeploymentV1ClusterServiceListClustersResponse, error)

	// DeploymentV1ClusterServiceGetCluster request
	DeploymentV1ClusterServiceGetClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*DeploymentV1ClusterServiceGetClusterResponse, error)

	// DeploymentV1DeploymentServiceListDeployments request
	DeploymentV1DeploymentServiceListDeploymentsWithResponse(ctx context.Context, params *DeploymentV1DeploymentServiceListDeploymentsParams, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceListDeploymentsResponse, error)

	// DeploymentV1DeploymentServiceCreateDeployment request with any body
	DeploymentV1DeploymentServiceCreateDeploymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceCreateDeploymentResponse, error)

	DeploymentV1DeploymentServiceCreateDeploymentWithResponse(ctx context.Context, body DeploymentV1DeploymentServiceCreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceCreateDeploymentResponse, error)

	// DeploymentV1DeploymentServiceListDeploymentsPerCluster request
	DeploymentV1DeploymentServiceListDeploymentsPerClusterWithResponse(ctx context.Context, clusterId string, params *DeploymentV1DeploymentServiceListDeploymentsPerClusterParams, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceListDeploymentsPerClusterResponse, error)

	// DeploymentV1DeploymentServiceDeleteDeployment request
	DeploymentV1DeploymentServiceDeleteDeploymentWithResponse(ctx context.Context, deplId string, params *DeploymentV1DeploymentServiceDeleteDeploymentParams, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceDeleteDeploymentResponse, error)

	// DeploymentV1DeploymentServiceGetDeployment request
	DeploymentV1DeploymentServiceGetDeploymentWithResponse(ctx context.Context, deplId string, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceGetDeploymentResponse, error)

	// DeploymentV1DeploymentServiceUpdateDeployment request with any body
	DeploymentV1DeploymentServiceUpdateDeploymentWithBodyWithResponse(ctx context.Context, deplId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceUpdateDeploymentResponse, error)

	DeploymentV1DeploymentServiceUpdateDeploymentWithResponse(ctx context.Context, deplId string, body DeploymentV1DeploymentServiceUpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceUpdateDeploymentResponse, error)

	// DeploymentV1DeploymentServiceListDeploymentClusters request
	DeploymentV1DeploymentServiceListDeploymentClustersWithResponse(ctx context.Context, deplId string, params *DeploymentV1DeploymentServiceListDeploymentClustersParams, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceListDeploymentClustersResponse, error)

	// DeploymentV1DeploymentServiceGetDeploymentsStatus request
	DeploymentV1DeploymentServiceGetDeploymentsStatusWithResponse(ctx context.Context, params *DeploymentV1DeploymentServiceGetDeploymentsStatusParams, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceGetDeploymentsStatusResponse, error)

	// DeploymentV1ClusterServiceGetKubeConfig request with any body
	DeploymentV1ClusterServiceGetKubeConfigWithBodyWithResponse(ctx context.Context, params *DeploymentV1ClusterServiceGetKubeConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentV1ClusterServiceGetKubeConfigResponse, error)

	DeploymentV1ClusterServiceGetKubeConfigWithResponse(ctx context.Context, params *DeploymentV1ClusterServiceGetKubeConfigParams, body DeploymentV1ClusterServiceGetKubeConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentV1ClusterServiceGetKubeConfigResponse, error)

	// DeploymentV1DeploymentServiceGetAppNamespace request with any body
	DeploymentV1DeploymentServiceGetAppNamespaceWithBodyWithResponse(ctx context.Context, params *DeploymentV1DeploymentServiceGetAppNamespaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceGetAppNamespaceResponse, error)

	DeploymentV1DeploymentServiceGetAppNamespaceWithResponse(ctx context.Context, params *DeploymentV1DeploymentServiceGetAppNamespaceParams, body DeploymentV1DeploymentServiceGetAppNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceGetAppNamespaceResponse, error)
}

type DeploymentV1ClusterServiceListClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentV1ListClustersResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentV1ClusterServiceListClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentV1ClusterServiceListClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentV1ClusterServiceGetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentV1GetClusterResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentV1ClusterServiceGetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentV1ClusterServiceGetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentV1DeploymentServiceListDeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentV1ListDeploymentsResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentV1DeploymentServiceListDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentV1DeploymentServiceListDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentV1DeploymentServiceCreateDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentV1CreateDeploymentResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentV1DeploymentServiceCreateDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentV1DeploymentServiceCreateDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentV1DeploymentServiceListDeploymentsPerClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentV1ListDeploymentsPerClusterResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentV1DeploymentServiceListDeploymentsPerClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentV1DeploymentServiceListDeploymentsPerClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentV1DeploymentServiceDeleteDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoogleProtobufEmpty
}

// Status returns HTTPResponse.Status
func (r DeploymentV1DeploymentServiceDeleteDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentV1DeploymentServiceDeleteDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentV1DeploymentServiceGetDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentV1GetDeploymentResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentV1DeploymentServiceGetDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentV1DeploymentServiceGetDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentV1DeploymentServiceUpdateDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentV1UpdateDeploymentResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentV1DeploymentServiceUpdateDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentV1DeploymentServiceUpdateDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentV1DeploymentServiceListDeploymentClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentV1ListDeploymentClustersResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentV1DeploymentServiceListDeploymentClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentV1DeploymentServiceListDeploymentClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentV1DeploymentServiceGetDeploymentsStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentV1GetDeploymentsStatusResponse
}

// Status returns HTTPResponse.Status
func (r DeploymentV1DeploymentServiceGetDeploymentsStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentV1DeploymentServiceGetDeploymentsStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentV1ClusterServiceGetKubeConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentV1GetKubeConfigResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r DeploymentV1ClusterServiceGetKubeConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentV1ClusterServiceGetKubeConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeploymentV1DeploymentServiceGetAppNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentV1GetAppNamespaceResponse
	JSONDefault  *ConnectError
}

// Status returns HTTPResponse.Status
func (r DeploymentV1DeploymentServiceGetAppNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeploymentV1DeploymentServiceGetAppNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeploymentV1ClusterServiceListClustersWithResponse request returning *DeploymentV1ClusterServiceListClustersResponse
func (c *ClientWithResponses) DeploymentV1ClusterServiceListClustersWithResponse(ctx context.Context, params *DeploymentV1ClusterServiceListClustersParams, reqEditors ...RequestEditorFn) (*DeploymentV1ClusterServiceListClustersResponse, error) {
	rsp, err := c.DeploymentV1ClusterServiceListClusters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1ClusterServiceListClustersResponse(rsp)
}

// DeploymentV1ClusterServiceGetClusterWithResponse request returning *DeploymentV1ClusterServiceGetClusterResponse
func (c *ClientWithResponses) DeploymentV1ClusterServiceGetClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*DeploymentV1ClusterServiceGetClusterResponse, error) {
	rsp, err := c.DeploymentV1ClusterServiceGetCluster(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1ClusterServiceGetClusterResponse(rsp)
}

// DeploymentV1DeploymentServiceListDeploymentsWithResponse request returning *DeploymentV1DeploymentServiceListDeploymentsResponse
func (c *ClientWithResponses) DeploymentV1DeploymentServiceListDeploymentsWithResponse(ctx context.Context, params *DeploymentV1DeploymentServiceListDeploymentsParams, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceListDeploymentsResponse, error) {
	rsp, err := c.DeploymentV1DeploymentServiceListDeployments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1DeploymentServiceListDeploymentsResponse(rsp)
}

// DeploymentV1DeploymentServiceCreateDeploymentWithBodyWithResponse request with arbitrary body returning *DeploymentV1DeploymentServiceCreateDeploymentResponse
func (c *ClientWithResponses) DeploymentV1DeploymentServiceCreateDeploymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceCreateDeploymentResponse, error) {
	rsp, err := c.DeploymentV1DeploymentServiceCreateDeploymentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1DeploymentServiceCreateDeploymentResponse(rsp)
}

func (c *ClientWithResponses) DeploymentV1DeploymentServiceCreateDeploymentWithResponse(ctx context.Context, body DeploymentV1DeploymentServiceCreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceCreateDeploymentResponse, error) {
	rsp, err := c.DeploymentV1DeploymentServiceCreateDeployment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1DeploymentServiceCreateDeploymentResponse(rsp)
}

// DeploymentV1DeploymentServiceListDeploymentsPerClusterWithResponse request returning *DeploymentV1DeploymentServiceListDeploymentsPerClusterResponse
func (c *ClientWithResponses) DeploymentV1DeploymentServiceListDeploymentsPerClusterWithResponse(ctx context.Context, clusterId string, params *DeploymentV1DeploymentServiceListDeploymentsPerClusterParams, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceListDeploymentsPerClusterResponse, error) {
	rsp, err := c.DeploymentV1DeploymentServiceListDeploymentsPerCluster(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1DeploymentServiceListDeploymentsPerClusterResponse(rsp)
}

// DeploymentV1DeploymentServiceDeleteDeploymentWithResponse request returning *DeploymentV1DeploymentServiceDeleteDeploymentResponse
func (c *ClientWithResponses) DeploymentV1DeploymentServiceDeleteDeploymentWithResponse(ctx context.Context, deplId string, params *DeploymentV1DeploymentServiceDeleteDeploymentParams, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceDeleteDeploymentResponse, error) {
	rsp, err := c.DeploymentV1DeploymentServiceDeleteDeployment(ctx, deplId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1DeploymentServiceDeleteDeploymentResponse(rsp)
}

// DeploymentV1DeploymentServiceGetDeploymentWithResponse request returning *DeploymentV1DeploymentServiceGetDeploymentResponse
func (c *ClientWithResponses) DeploymentV1DeploymentServiceGetDeploymentWithResponse(ctx context.Context, deplId string, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceGetDeploymentResponse, error) {
	rsp, err := c.DeploymentV1DeploymentServiceGetDeployment(ctx, deplId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1DeploymentServiceGetDeploymentResponse(rsp)
}

// DeploymentV1DeploymentServiceUpdateDeploymentWithBodyWithResponse request with arbitrary body returning *DeploymentV1DeploymentServiceUpdateDeploymentResponse
func (c *ClientWithResponses) DeploymentV1DeploymentServiceUpdateDeploymentWithBodyWithResponse(ctx context.Context, deplId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceUpdateDeploymentResponse, error) {
	rsp, err := c.DeploymentV1DeploymentServiceUpdateDeploymentWithBody(ctx, deplId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1DeploymentServiceUpdateDeploymentResponse(rsp)
}

func (c *ClientWithResponses) DeploymentV1DeploymentServiceUpdateDeploymentWithResponse(ctx context.Context, deplId string, body DeploymentV1DeploymentServiceUpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceUpdateDeploymentResponse, error) {
	rsp, err := c.DeploymentV1DeploymentServiceUpdateDeployment(ctx, deplId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1DeploymentServiceUpdateDeploymentResponse(rsp)
}

// DeploymentV1DeploymentServiceListDeploymentClustersWithResponse request returning *DeploymentV1DeploymentServiceListDeploymentClustersResponse
func (c *ClientWithResponses) DeploymentV1DeploymentServiceListDeploymentClustersWithResponse(ctx context.Context, deplId string, params *DeploymentV1DeploymentServiceListDeploymentClustersParams, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceListDeploymentClustersResponse, error) {
	rsp, err := c.DeploymentV1DeploymentServiceListDeploymentClusters(ctx, deplId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1DeploymentServiceListDeploymentClustersResponse(rsp)
}

// DeploymentV1DeploymentServiceGetDeploymentsStatusWithResponse request returning *DeploymentV1DeploymentServiceGetDeploymentsStatusResponse
func (c *ClientWithResponses) DeploymentV1DeploymentServiceGetDeploymentsStatusWithResponse(ctx context.Context, params *DeploymentV1DeploymentServiceGetDeploymentsStatusParams, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceGetDeploymentsStatusResponse, error) {
	rsp, err := c.DeploymentV1DeploymentServiceGetDeploymentsStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1DeploymentServiceGetDeploymentsStatusResponse(rsp)
}

// DeploymentV1ClusterServiceGetKubeConfigWithBodyWithResponse request with arbitrary body returning *DeploymentV1ClusterServiceGetKubeConfigResponse
func (c *ClientWithResponses) DeploymentV1ClusterServiceGetKubeConfigWithBodyWithResponse(ctx context.Context, params *DeploymentV1ClusterServiceGetKubeConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentV1ClusterServiceGetKubeConfigResponse, error) {
	rsp, err := c.DeploymentV1ClusterServiceGetKubeConfigWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1ClusterServiceGetKubeConfigResponse(rsp)
}

func (c *ClientWithResponses) DeploymentV1ClusterServiceGetKubeConfigWithResponse(ctx context.Context, params *DeploymentV1ClusterServiceGetKubeConfigParams, body DeploymentV1ClusterServiceGetKubeConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentV1ClusterServiceGetKubeConfigResponse, error) {
	rsp, err := c.DeploymentV1ClusterServiceGetKubeConfig(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1ClusterServiceGetKubeConfigResponse(rsp)
}

// DeploymentV1DeploymentServiceGetAppNamespaceWithBodyWithResponse request with arbitrary body returning *DeploymentV1DeploymentServiceGetAppNamespaceResponse
func (c *ClientWithResponses) DeploymentV1DeploymentServiceGetAppNamespaceWithBodyWithResponse(ctx context.Context, params *DeploymentV1DeploymentServiceGetAppNamespaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceGetAppNamespaceResponse, error) {
	rsp, err := c.DeploymentV1DeploymentServiceGetAppNamespaceWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1DeploymentServiceGetAppNamespaceResponse(rsp)
}

func (c *ClientWithResponses) DeploymentV1DeploymentServiceGetAppNamespaceWithResponse(ctx context.Context, params *DeploymentV1DeploymentServiceGetAppNamespaceParams, body DeploymentV1DeploymentServiceGetAppNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeploymentV1DeploymentServiceGetAppNamespaceResponse, error) {
	rsp, err := c.DeploymentV1DeploymentServiceGetAppNamespace(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeploymentV1DeploymentServiceGetAppNamespaceResponse(rsp)
}

// ParseDeploymentV1ClusterServiceListClustersResponse parses an HTTP response from a DeploymentV1ClusterServiceListClustersWithResponse call
func ParseDeploymentV1ClusterServiceListClustersResponse(rsp *http.Response) (*DeploymentV1ClusterServiceListClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentV1ClusterServiceListClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentV1ListClustersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentV1ClusterServiceGetClusterResponse parses an HTTP response from a DeploymentV1ClusterServiceGetClusterWithResponse call
func ParseDeploymentV1ClusterServiceGetClusterResponse(rsp *http.Response) (*DeploymentV1ClusterServiceGetClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentV1ClusterServiceGetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentV1GetClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentV1DeploymentServiceListDeploymentsResponse parses an HTTP response from a DeploymentV1DeploymentServiceListDeploymentsWithResponse call
func ParseDeploymentV1DeploymentServiceListDeploymentsResponse(rsp *http.Response) (*DeploymentV1DeploymentServiceListDeploymentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentV1DeploymentServiceListDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentV1ListDeploymentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentV1DeploymentServiceCreateDeploymentResponse parses an HTTP response from a DeploymentV1DeploymentServiceCreateDeploymentWithResponse call
func ParseDeploymentV1DeploymentServiceCreateDeploymentResponse(rsp *http.Response) (*DeploymentV1DeploymentServiceCreateDeploymentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentV1DeploymentServiceCreateDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentV1CreateDeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentV1DeploymentServiceListDeploymentsPerClusterResponse parses an HTTP response from a DeploymentV1DeploymentServiceListDeploymentsPerClusterWithResponse call
func ParseDeploymentV1DeploymentServiceListDeploymentsPerClusterResponse(rsp *http.Response) (*DeploymentV1DeploymentServiceListDeploymentsPerClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentV1DeploymentServiceListDeploymentsPerClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentV1ListDeploymentsPerClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentV1DeploymentServiceDeleteDeploymentResponse parses an HTTP response from a DeploymentV1DeploymentServiceDeleteDeploymentWithResponse call
func ParseDeploymentV1DeploymentServiceDeleteDeploymentResponse(rsp *http.Response) (*DeploymentV1DeploymentServiceDeleteDeploymentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentV1DeploymentServiceDeleteDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoogleProtobufEmpty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentV1DeploymentServiceGetDeploymentResponse parses an HTTP response from a DeploymentV1DeploymentServiceGetDeploymentWithResponse call
func ParseDeploymentV1DeploymentServiceGetDeploymentResponse(rsp *http.Response) (*DeploymentV1DeploymentServiceGetDeploymentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentV1DeploymentServiceGetDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentV1GetDeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentV1DeploymentServiceUpdateDeploymentResponse parses an HTTP response from a DeploymentV1DeploymentServiceUpdateDeploymentWithResponse call
func ParseDeploymentV1DeploymentServiceUpdateDeploymentResponse(rsp *http.Response) (*DeploymentV1DeploymentServiceUpdateDeploymentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentV1DeploymentServiceUpdateDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentV1UpdateDeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentV1DeploymentServiceListDeploymentClustersResponse parses an HTTP response from a DeploymentV1DeploymentServiceListDeploymentClustersWithResponse call
func ParseDeploymentV1DeploymentServiceListDeploymentClustersResponse(rsp *http.Response) (*DeploymentV1DeploymentServiceListDeploymentClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentV1DeploymentServiceListDeploymentClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentV1ListDeploymentClustersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentV1DeploymentServiceGetDeploymentsStatusResponse parses an HTTP response from a DeploymentV1DeploymentServiceGetDeploymentsStatusWithResponse call
func ParseDeploymentV1DeploymentServiceGetDeploymentsStatusResponse(rsp *http.Response) (*DeploymentV1DeploymentServiceGetDeploymentsStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentV1DeploymentServiceGetDeploymentsStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentV1GetDeploymentsStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeploymentV1ClusterServiceGetKubeConfigResponse parses an HTTP response from a DeploymentV1ClusterServiceGetKubeConfigWithResponse call
func ParseDeploymentV1ClusterServiceGetKubeConfigResponse(rsp *http.Response) (*DeploymentV1ClusterServiceGetKubeConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentV1ClusterServiceGetKubeConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentV1GetKubeConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeploymentV1DeploymentServiceGetAppNamespaceResponse parses an HTTP response from a DeploymentV1DeploymentServiceGetAppNamespaceWithResponse call
func ParseDeploymentV1DeploymentServiceGetAppNamespaceResponse(rsp *http.Response) (*DeploymentV1DeploymentServiceGetAppNamespaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeploymentV1DeploymentServiceGetAppNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentV1GetAppNamespaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
