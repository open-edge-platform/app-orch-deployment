// Package restClient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package restClient

import (
	"encoding/json"
	"fmt"
	"time"
)

// Defines values for DeploymentStatusState.
const (
	DEPLOYING        DeploymentStatusState = "DEPLOYING"
	DOWN             DeploymentStatusState = "DOWN"
	ERROR            DeploymentStatusState = "ERROR"
	INTERNALERROR    DeploymentStatusState = "INTERNAL_ERROR"
	NOTARGETCLUSTERS DeploymentStatusState = "NO_TARGET_CLUSTERS"
	RUNNING          DeploymentStatusState = "RUNNING"
	TERMINATING      DeploymentStatusState = "TERMINATING"
	UNKNOWN          DeploymentStatusState = "UNKNOWN"
	UPDATING         DeploymentStatusState = "UPDATING"
)

// Details of application.
type App struct {
	// Id of the app (same as Fleet bundle name) which is, concatenated from name and deploy_id (uid which comes from k8s).
	Id *string `json:"id,omitempty"`

	// The deployment package app name.
	Name *string `json:"name,omitempty"`

	// Status has details of the deployment.
	Status *DeploymentStatus `json:"status,omitempty"`
}

// Details of cluster.
type Cluster struct {
	// Apps has per-app details.
	Apps *[]App `json:"apps,omitempty"`

	// ID is the cluster id which ECM generates and assigns to the Rancher cluster name.
	Id *string `json:"id,omitempty"`

	// Name is the display name which user provides and ECM creates and assigns clustername label to Fleet cluster object.
	Name *string `json:"name,omitempty"`

	// Status has details of the deployment.
	Status *DeploymentStatus `json:"status,omitempty"`
}

// Cluster defines the message for the Cluster object.
type ClusterInfo struct {
	// The creation time of the cluster retrieved from Fleet cluster object.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// ID is the cluster id which ECM generates and assigns to the Rancher cluster name.
	Id *string `json:"id,omitempty"`

	// List of cluster labels retrieved from Fleet cluster object.
	Labels *ClusterInfo_Labels `json:"labels,omitempty"`

	// Name is the display name which user provides and ECM creates and assigns clustername label to Fleet cluster object.
	Name *string `json:"name,omitempty"`
}

// List of cluster labels retrieved from Fleet cluster object.
type ClusterInfo_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Response message for the CreateDeployment method.
type CreateDeploymentResponse struct {
	// Returns the new Deployment Id.
	DeploymentId string `json:"deploymentId"`
}

// Deployment defines the specification to deploy a Deployment Package onto a set of clusters.
type Deployment struct {
	// Set target clusters based on labels.
	AllAppTargetClusters *TargetClusters `json:"allAppTargetClusters,omitempty"`

	// The deployment package name to deploy from the catalog.
	AppName string `json:"appName"`

	// The version of the deployment package.
	AppVersion string `json:"appVersion"`

	// Application details.
	Apps *[]App `json:"apps,omitempty"`

	// The creation time of the deployment.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// DEPRECATED - will remove in v2. Name of the default DeploymentProfile to use when deploying this DeploymentPackage. If no profileName is provided, use defaultProfileName from deployment package.
	DefaultProfileName *string `json:"defaultProfileName,omitempty"`

	// The id of the deployment.
	DeployId *string `json:"deployId,omitempty"`

	// The deployment type for the target cluster deployment can be either auto-scaling or targeted. In Auto-scaling type, the application will be automatically deployed on all the clusters which match the Target cluster label. In Targeted type, the user has to select among pre created clusters to deploy the application.
	DeploymentType *string `json:"deploymentType,omitempty"`

	// Deployment display name.
	DisplayName *string `json:"displayName,omitempty"`

	// Deployment name (unique string assigned by Orchestrator).
	Name *string `json:"name,omitempty"`

	// network_name is the name of the interconnect network that deployment be part of
	NetworkName *string `json:"networkName,omitempty"`

	// The Override values can be used to override any of the base profile values based on Deployment scenario.
	OverrideValues *[]OverrideValues `json:"overrideValues,omitempty"`

	// The selected profile name to be used for the base Helm values of the different applications in the deployment package
	ProfileName *string `json:"profileName,omitempty"`

	// DEPRECATED - will remove in v2. Publisher of the deployment package.
	PublisherName  *string          `json:"publisherName,omitempty"`
	ServiceExports *[]ServiceExport `json:"serviceExports,omitempty"`

	// Status has details of the deployment.
	Status *DeploymentStatus `json:"status,omitempty"`

	// Cluster labels on which we want to deploy the application.
	TargetClusters *[]TargetClusters `json:"targetClusters,omitempty"`
}

// DeploymentInstancesCluster defines model for DeploymentInstancesCluster.
type DeploymentInstancesCluster struct {
	// Apps has per-app details.
	Apps *[]App `json:"apps,omitempty"`

	// Deployment display name.
	DeploymentDisplayName *string `json:"deploymentDisplayName,omitempty"`

	// Deployment name (unique string assigned by Orchestrator).
	DeploymentName *string `json:"deploymentName,omitempty"`

	// Deployment CR UID.
	DeploymentUid *string `json:"deploymentUid,omitempty"`

	// Status has details of the deployment.
	Status *DeploymentStatus `json:"status,omitempty"`
}

// Status has details of the deployment.
type DeploymentStatus struct {
	Message *string                `json:"message,omitempty"`
	State   *DeploymentStatusState `json:"state,omitempty"`

	// Count of status.
	Summary *Summary `json:"summary,omitempty"`
}

// DeploymentStatusState defines model for DeploymentStatus.State.
type DeploymentStatusState string

// Response message for GetCluster method.
type GetClusterResponse struct {
	// Details of cluster.
	Cluster *Cluster `json:"cluster,omitempty"`
}

// Response message for the GetDeployment method.
type GetDeploymentResponse struct {
	// Deployment defines the specification to deploy a Deployment Package onto a set of clusters.
	Deployment Deployment `json:"deployment"`
}

// Response message for the GetDeploymentsStatus method.
type GetDeploymentsStatusResponse struct {
	Deploying   *int32 `json:"deploying,omitempty"`
	Down        *int32 `json:"down,omitempty"`
	Error       *int32 `json:"error,omitempty"`
	Running     *int32 `json:"running,omitempty"`
	Terminating *int32 `json:"terminating,omitempty"`
	Total       *int32 `json:"total,omitempty"`
	Unknown     *int32 `json:"unknown,omitempty"`
	Updating    *int32 `json:"updating,omitempty"`
}

// Response message for the ListClusters method.
type ListClustersResponse struct {
	// A list of Cluster Objects.
	Clusters      []ClusterInfo `json:"clusters"`
	TotalElements int32         `json:"totalElements"`
}

// Response message for ListDeploymentClusters method.
type ListDeploymentClustersResponse struct {
	Clusters      []Cluster `json:"clusters"`
	TotalElements int32     `json:"totalElements"`
}

// Response message for the ListDeploymentsPerCluster method.
type ListDeploymentsPerClusterResponse struct {
	// A list of Deployment Instance Cluster Objects.
	DeploymentInstancesCluster []DeploymentInstancesCluster `json:"deploymentInstancesCluster"`
	TotalElements              int32                        `json:"totalElements"`
}

// Response message for the ListDeployments method.
type ListDeploymentsResponse struct {
	// A list of Deployment Objects.
	Deployments   []Deployment `json:"deployments"`
	TotalElements int32        `json:"totalElements"`
}

// The Override values can be used to override any of the base helm values of applications based on Deployment scenario.
type OverrideValues struct {
	// deployment package name to use when overriding values.
	AppName string `json:"appName"`

	// The namespace to deploy the app onto, default namespace is default.
	TargetNamespace *string `json:"targetNamespace,omitempty"`

	// The YAML representing Helm overrides
	Values *map[string]interface{} `json:"values,omitempty"`
}

// ServiceExport defines model for ServiceExport.
type ServiceExport struct {
	AppName string `json:"appName"`
	Enabled *bool  `json:"enabled,omitempty"`
}

// Count of status.
type Summary struct {
	// Number of down apps/clusters in the deployment.
	Down *int32 `json:"down,omitempty"`

	// Number of running apps/clusters in the deployment, value from owned GitRepo objects.
	Running *int32 `json:"running,omitempty"`

	// Total count of apps/clusters in the deployment, value from owned GitRepo objects.
	Total *int32 `json:"total,omitempty"`

	// Type of thing that we're counting, ie clusters, apps.
	Type *string `json:"type,omitempty"`

	// Unknown status to indicate cluster not reachable.
	Unknown *int32 `json:"unknown,omitempty"`
}

// Set target clusters based on labels.
type TargetClusters struct {
	// The targeted deployment package name.
	AppName *string `json:"appName,omitempty"`

	// Cluster id to match the target cluster when targeted deployment.
	ClusterId *string `json:"clusterId,omitempty"`

	// Cluster labels to match the target cluster when auto-scaling deployment.
	Labels *TargetClusters_Labels `json:"labels,omitempty"`
}

// Cluster labels to match the target cluster when auto-scaling deployment.
type TargetClusters_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Response message for the UpdateDeployment method.
type UpdateDeploymentResponse struct {
	// Deployment defines the specification to deploy a Deployment Package onto a set of clusters.
	Deployment Deployment `json:"deployment"`
}

// ClusterServiceListClustersParams defines parameters for ClusterServiceListClusters.
type ClusterServiceListClustersParams struct {
	// Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel. Labels separated by a comma.
	Labels *[]string `form:"labels,omitempty" json:"labels,omitempty"`

	// Optional. Select field and order based on which cluster list will be sorted.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Optional. Selection criteria to list clusters.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional. Select count of clusters to be listed per page.
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional. Offset is used to select the correct page from which clusters list will be displayed. (E.g If there are 10 clusters, page size is 2 and offset is set as 4, then the response will display clusters 5 and 6).
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// DeploymentServiceListDeploymentsParams defines parameters for DeploymentServiceListDeployments.
type DeploymentServiceListDeploymentsParams struct {
	// Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel-corp. Labels separated by a comma.
	Labels *[]string `form:"labels,omitempty" json:"labels,omitempty"`

	// Optional. Select field and order based on which Deployment list will be sorted.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Optional. Selection criteria to list Deployments.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional. Select count of Deployment to be listed per page.
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional. Offset is used to select the correct page from which Deployment list will be displayed. (E.g If there are 10 Deployments, page size is 2 and offset is set as 4, then the response will display Deployment 5 and 6.)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// DeploymentServiceCreateDeploymentJSONBody defines parameters for DeploymentServiceCreateDeployment.
type DeploymentServiceCreateDeploymentJSONBody = Deployment

// DeploymentServiceListDeploymentsPerClusterParams defines parameters for DeploymentServiceListDeploymentsPerCluster.
type DeploymentServiceListDeploymentsPerClusterParams struct {
	// Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel-corp. Labels separated by a comma.
	Labels *[]string `form:"labels,omitempty" json:"labels,omitempty"`

	// Optional. Select field and order based on which Deployment list will be sorted.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Optional. Selection criteria to list Deployments.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional. Select count of Deployment to be listed per page.
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional. Offset is used to select the correct page from which Deployment list will be displayed. (E.g If there are 10 Deployments, page size is 2 and offset is set as 4, then the response will display Deployment 5 and 6.)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// DeploymentServiceDeleteDeploymentParams defines parameters for DeploymentServiceDeleteDeployment.
type DeploymentServiceDeleteDeploymentParams struct {
	// Required. Different delete types to handle parent and child lists, for dependency support. Available options: PARENT_ONLY, ALL.
	DeleteType *DeploymentServiceDeleteDeploymentParamsDeleteType `form:"deleteType,omitempty" json:"deleteType,omitempty"`
}

// DeploymentServiceDeleteDeploymentParamsDeleteType defines parameters for DeploymentServiceDeleteDeployment.
type DeploymentServiceDeleteDeploymentParamsDeleteType string

// DeploymentServiceUpdateDeploymentJSONBody defines parameters for DeploymentServiceUpdateDeployment.
type DeploymentServiceUpdateDeploymentJSONBody = Deployment

// DeploymentServiceListDeploymentClustersParams defines parameters for DeploymentServiceListDeploymentClusters.
type DeploymentServiceListDeploymentClustersParams struct {
	// Optional. Select field and order based on which Deployment cluster list will be sorted.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Optional. Selection criteria to list Deployment clusters.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional. Select count of Deployment clusters to be listed per page.
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional. Offset is used to select the correct page from which Deployment clusters list will be displayed. (E.g If there are 10 Deployment clusters, page size is 2 and offset is set as 4, then the response will display Deployment clusters 5 and 6.)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// DeploymentServiceGetDeploymentsStatusParams defines parameters for DeploymentServiceGetDeploymentsStatus.
type DeploymentServiceGetDeploymentsStatusParams struct {
	// Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel-corp. Labels separated by a comma.
	Labels *[]string `form:"labels,omitempty" json:"labels,omitempty"`
}

// DeploymentServiceCreateDeploymentJSONRequestBody defines body for DeploymentServiceCreateDeployment for application/json ContentType.
type DeploymentServiceCreateDeploymentJSONRequestBody = DeploymentServiceCreateDeploymentJSONBody

// DeploymentServiceUpdateDeploymentJSONRequestBody defines body for DeploymentServiceUpdateDeployment for application/json ContentType.
type DeploymentServiceUpdateDeploymentJSONRequestBody = DeploymentServiceUpdateDeploymentJSONBody

// Getter for additional properties for ClusterInfo_Labels. Returns the specified
// element and whether it was found
func (a ClusterInfo_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ClusterInfo_Labels
func (a *ClusterInfo_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ClusterInfo_Labels to handle AdditionalProperties
func (a *ClusterInfo_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ClusterInfo_Labels to handle AdditionalProperties
func (a ClusterInfo_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TargetClusters_Labels. Returns the specified
// element and whether it was found
func (a TargetClusters_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TargetClusters_Labels
func (a *TargetClusters_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TargetClusters_Labels to handle AdditionalProperties
func (a *TargetClusters_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TargetClusters_Labels to handle AdditionalProperties
func (a TargetClusters_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
