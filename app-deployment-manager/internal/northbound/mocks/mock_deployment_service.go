// SPDX-FileCopyrightText: (C) 2024 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: api/nbi/v2/deployment/v1/service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=api/nbi/v2/deployment/v1/service_grpc.pb.go -destination=internal/northbound/mocks/mock_deployment_service.go -package=mocks DeploymentServiceServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	deploymentv1 "github.com/open-edge-platform/app-orch-deployment/app-deployment-manager/api/nbi/v2/deployment/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockDeploymentServiceClient is a mock of DeploymentServiceClient interface.
type MockDeploymentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentServiceClientMockRecorder
	isgomock struct{}
}

// MockDeploymentServiceClientMockRecorder is the mock recorder for MockDeploymentServiceClient.
type MockDeploymentServiceClientMockRecorder struct {
	mock *MockDeploymentServiceClient
}

// NewMockDeploymentServiceClient creates a new mock instance.
func NewMockDeploymentServiceClient(ctrl *gomock.Controller) *MockDeploymentServiceClient {
	mock := &MockDeploymentServiceClient{ctrl: ctrl}
	mock.recorder = &MockDeploymentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentServiceClient) EXPECT() *MockDeploymentServiceClientMockRecorder {
	return m.recorder
}

// CreateDeployment mocks base method.
func (m *MockDeploymentServiceClient) CreateDeployment(ctx context.Context, in *deploymentv1.CreateDeploymentRequest, opts ...grpc.CallOption) (*deploymentv1.CreateDeploymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeployment", varargs...)
	ret0, _ := ret[0].(*deploymentv1.CreateDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment.
func (mr *MockDeploymentServiceClientMockRecorder) CreateDeployment(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockDeploymentServiceClient)(nil).CreateDeployment), varargs...)
}

// DeleteDeployment mocks base method.
func (m *MockDeploymentServiceClient) DeleteDeployment(ctx context.Context, in *deploymentv1.DeleteDeploymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDeployment", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockDeploymentServiceClientMockRecorder) DeleteDeployment(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockDeploymentServiceClient)(nil).DeleteDeployment), varargs...)
}

// GetAPIExtension mocks base method.
func (m *MockDeploymentServiceClient) GetAPIExtension(ctx context.Context, in *deploymentv1.GetAPIExtensionRequest, opts ...grpc.CallOption) (*deploymentv1.GetAPIExtensionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIExtension", varargs...)
	ret0, _ := ret[0].(*deploymentv1.GetAPIExtensionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIExtension indicates an expected call of GetAPIExtension.
func (mr *MockDeploymentServiceClientMockRecorder) GetAPIExtension(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIExtension", reflect.TypeOf((*MockDeploymentServiceClient)(nil).GetAPIExtension), varargs...)
}

// GetAppNamespace mocks base method.
func (m *MockDeploymentServiceClient) GetAppNamespace(ctx context.Context, in *deploymentv1.GetAppNamespaceRequest, opts ...grpc.CallOption) (*deploymentv1.GetAppNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppNamespace", varargs...)
	ret0, _ := ret[0].(*deploymentv1.GetAppNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppNamespace indicates an expected call of GetAppNamespace.
func (mr *MockDeploymentServiceClientMockRecorder) GetAppNamespace(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppNamespace", reflect.TypeOf((*MockDeploymentServiceClient)(nil).GetAppNamespace), varargs...)
}

// GetDeployment mocks base method.
func (m *MockDeploymentServiceClient) GetDeployment(ctx context.Context, in *deploymentv1.GetDeploymentRequest, opts ...grpc.CallOption) (*deploymentv1.GetDeploymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeployment", varargs...)
	ret0, _ := ret[0].(*deploymentv1.GetDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockDeploymentServiceClientMockRecorder) GetDeployment(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockDeploymentServiceClient)(nil).GetDeployment), varargs...)
}

// GetDeploymentsStatus mocks base method.
func (m *MockDeploymentServiceClient) GetDeploymentsStatus(ctx context.Context, in *deploymentv1.GetDeploymentsStatusRequest, opts ...grpc.CallOption) (*deploymentv1.GetDeploymentsStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentsStatus", varargs...)
	ret0, _ := ret[0].(*deploymentv1.GetDeploymentsStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentsStatus indicates an expected call of GetDeploymentsStatus.
func (mr *MockDeploymentServiceClientMockRecorder) GetDeploymentsStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsStatus", reflect.TypeOf((*MockDeploymentServiceClient)(nil).GetDeploymentsStatus), varargs...)
}

// ListDeploymentClusters mocks base method.
func (m *MockDeploymentServiceClient) ListDeploymentClusters(ctx context.Context, in *deploymentv1.ListDeploymentClustersRequest, opts ...grpc.CallOption) (*deploymentv1.ListDeploymentClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentClusters", varargs...)
	ret0, _ := ret[0].(*deploymentv1.ListDeploymentClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentClusters indicates an expected call of ListDeploymentClusters.
func (mr *MockDeploymentServiceClientMockRecorder) ListDeploymentClusters(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentClusters", reflect.TypeOf((*MockDeploymentServiceClient)(nil).ListDeploymentClusters), varargs...)
}

// ListDeployments mocks base method.
func (m *MockDeploymentServiceClient) ListDeployments(ctx context.Context, in *deploymentv1.ListDeploymentsRequest, opts ...grpc.CallOption) (*deploymentv1.ListDeploymentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeployments", varargs...)
	ret0, _ := ret[0].(*deploymentv1.ListDeploymentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployments indicates an expected call of ListDeployments.
func (mr *MockDeploymentServiceClientMockRecorder) ListDeployments(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockDeploymentServiceClient)(nil).ListDeployments), varargs...)
}

// ListDeploymentsPerCluster mocks base method.
func (m *MockDeploymentServiceClient) ListDeploymentsPerCluster(ctx context.Context, in *deploymentv1.ListDeploymentsPerClusterRequest, opts ...grpc.CallOption) (*deploymentv1.ListDeploymentsPerClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentsPerCluster", varargs...)
	ret0, _ := ret[0].(*deploymentv1.ListDeploymentsPerClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentsPerCluster indicates an expected call of ListDeploymentsPerCluster.
func (mr *MockDeploymentServiceClientMockRecorder) ListDeploymentsPerCluster(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsPerCluster", reflect.TypeOf((*MockDeploymentServiceClient)(nil).ListDeploymentsPerCluster), varargs...)
}

// ListUIExtensions mocks base method.
func (m *MockDeploymentServiceClient) ListUIExtensions(ctx context.Context, in *deploymentv1.ListUIExtensionsRequest, opts ...grpc.CallOption) (*deploymentv1.ListUIExtensionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUIExtensions", varargs...)
	ret0, _ := ret[0].(*deploymentv1.ListUIExtensionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUIExtensions indicates an expected call of ListUIExtensions.
func (mr *MockDeploymentServiceClientMockRecorder) ListUIExtensions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUIExtensions", reflect.TypeOf((*MockDeploymentServiceClient)(nil).ListUIExtensions), varargs...)
}

// UpdateDeployment mocks base method.
func (m *MockDeploymentServiceClient) UpdateDeployment(ctx context.Context, in *deploymentv1.UpdateDeploymentRequest, opts ...grpc.CallOption) (*deploymentv1.UpdateDeploymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDeployment", varargs...)
	ret0, _ := ret[0].(*deploymentv1.UpdateDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeployment indicates an expected call of UpdateDeployment.
func (mr *MockDeploymentServiceClientMockRecorder) UpdateDeployment(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockDeploymentServiceClient)(nil).UpdateDeployment), varargs...)
}

// MockDeploymentServiceServer is a mock of DeploymentServiceServer interface.
type MockDeploymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentServiceServerMockRecorder
	isgomock struct{}
}

func (m *MockDeploymentServiceServer) Register(s *grpc.Server) {
	deploymentv1.RegisterDeploymentServiceServer(s, m)
}

// MockDeploymentServiceServerMockRecorder is the mock recorder for MockDeploymentServiceServer.
type MockDeploymentServiceServerMockRecorder struct {
	mock *MockDeploymentServiceServer
}

// NewMockDeploymentServiceServer creates a new mock instance.
func NewMockDeploymentServiceServer(ctrl *gomock.Controller) *MockDeploymentServiceServer {
	mock := &MockDeploymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockDeploymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentServiceServer) EXPECT() *MockDeploymentServiceServerMockRecorder {
	return m.recorder
}

// CreateDeployment mocks base method.
func (m *MockDeploymentServiceServer) CreateDeployment(arg0 context.Context, arg1 *deploymentv1.CreateDeploymentRequest) (*deploymentv1.CreateDeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", arg0, arg1)
	ret0, _ := ret[0].(*deploymentv1.CreateDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment.
func (mr *MockDeploymentServiceServerMockRecorder) CreateDeployment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockDeploymentServiceServer)(nil).CreateDeployment), arg0, arg1)
}

// DeleteDeployment mocks base method.
func (m *MockDeploymentServiceServer) DeleteDeployment(arg0 context.Context, arg1 *deploymentv1.DeleteDeploymentRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockDeploymentServiceServerMockRecorder) DeleteDeployment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockDeploymentServiceServer)(nil).DeleteDeployment), arg0, arg1)
}

// GetAPIExtension mocks base method.
func (m *MockDeploymentServiceServer) GetAPIExtension(arg0 context.Context, arg1 *deploymentv1.GetAPIExtensionRequest) (*deploymentv1.GetAPIExtensionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIExtension", arg0, arg1)
	ret0, _ := ret[0].(*deploymentv1.GetAPIExtensionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIExtension indicates an expected call of GetAPIExtension.
func (mr *MockDeploymentServiceServerMockRecorder) GetAPIExtension(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIExtension", reflect.TypeOf((*MockDeploymentServiceServer)(nil).GetAPIExtension), arg0, arg1)
}

// GetAppNamespace mocks base method.
func (m *MockDeploymentServiceServer) GetAppNamespace(arg0 context.Context, arg1 *deploymentv1.GetAppNamespaceRequest) (*deploymentv1.GetAppNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppNamespace", arg0, arg1)
	ret0, _ := ret[0].(*deploymentv1.GetAppNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppNamespace indicates an expected call of GetAppNamespace.
func (mr *MockDeploymentServiceServerMockRecorder) GetAppNamespace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppNamespace", reflect.TypeOf((*MockDeploymentServiceServer)(nil).GetAppNamespace), arg0, arg1)
}

// GetDeployment mocks base method.
func (m *MockDeploymentServiceServer) GetDeployment(arg0 context.Context, arg1 *deploymentv1.GetDeploymentRequest) (*deploymentv1.GetDeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", arg0, arg1)
	ret0, _ := ret[0].(*deploymentv1.GetDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockDeploymentServiceServerMockRecorder) GetDeployment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockDeploymentServiceServer)(nil).GetDeployment), arg0, arg1)
}

// GetDeploymentsStatus mocks base method.
func (m *MockDeploymentServiceServer) GetDeploymentsStatus(arg0 context.Context, arg1 *deploymentv1.GetDeploymentsStatusRequest) (*deploymentv1.GetDeploymentsStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentsStatus", arg0, arg1)
	ret0, _ := ret[0].(*deploymentv1.GetDeploymentsStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentsStatus indicates an expected call of GetDeploymentsStatus.
func (mr *MockDeploymentServiceServerMockRecorder) GetDeploymentsStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsStatus", reflect.TypeOf((*MockDeploymentServiceServer)(nil).GetDeploymentsStatus), arg0, arg1)
}

// ListDeploymentClusters mocks base method.
func (m *MockDeploymentServiceServer) ListDeploymentClusters(arg0 context.Context, arg1 *deploymentv1.ListDeploymentClustersRequest) (*deploymentv1.ListDeploymentClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentClusters", arg0, arg1)
	ret0, _ := ret[0].(*deploymentv1.ListDeploymentClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentClusters indicates an expected call of ListDeploymentClusters.
func (mr *MockDeploymentServiceServerMockRecorder) ListDeploymentClusters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentClusters", reflect.TypeOf((*MockDeploymentServiceServer)(nil).ListDeploymentClusters), arg0, arg1)
}

// ListDeployments mocks base method.
func (m *MockDeploymentServiceServer) ListDeployments(arg0 context.Context, arg1 *deploymentv1.ListDeploymentsRequest) (*deploymentv1.ListDeploymentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", arg0, arg1)
	ret0, _ := ret[0].(*deploymentv1.ListDeploymentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployments indicates an expected call of ListDeployments.
func (mr *MockDeploymentServiceServerMockRecorder) ListDeployments(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockDeploymentServiceServer)(nil).ListDeployments), arg0, arg1)
}

// ListDeploymentsPerCluster mocks base method.
func (m *MockDeploymentServiceServer) ListDeploymentsPerCluster(arg0 context.Context, arg1 *deploymentv1.ListDeploymentsPerClusterRequest) (*deploymentv1.ListDeploymentsPerClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentsPerCluster", arg0, arg1)
	ret0, _ := ret[0].(*deploymentv1.ListDeploymentsPerClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentsPerCluster indicates an expected call of ListDeploymentsPerCluster.
func (mr *MockDeploymentServiceServerMockRecorder) ListDeploymentsPerCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsPerCluster", reflect.TypeOf((*MockDeploymentServiceServer)(nil).ListDeploymentsPerCluster), arg0, arg1)
}

// ListUIExtensions mocks base method.
func (m *MockDeploymentServiceServer) ListUIExtensions(arg0 context.Context, arg1 *deploymentv1.ListUIExtensionsRequest) (*deploymentv1.ListUIExtensionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUIExtensions", arg0, arg1)
	ret0, _ := ret[0].(*deploymentv1.ListUIExtensionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUIExtensions indicates an expected call of ListUIExtensions.
func (mr *MockDeploymentServiceServerMockRecorder) ListUIExtensions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUIExtensions", reflect.TypeOf((*MockDeploymentServiceServer)(nil).ListUIExtensions), arg0, arg1)
}

// UpdateDeployment mocks base method.
func (m *MockDeploymentServiceServer) UpdateDeployment(arg0 context.Context, arg1 *deploymentv1.UpdateDeploymentRequest) (*deploymentv1.UpdateDeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeployment", arg0, arg1)
	ret0, _ := ret[0].(*deploymentv1.UpdateDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeployment indicates an expected call of UpdateDeployment.
func (mr *MockDeploymentServiceServerMockRecorder) UpdateDeployment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockDeploymentServiceServer)(nil).UpdateDeployment), arg0, arg1)
}

// MockUnsafeDeploymentServiceServer is a mock of UnsafeDeploymentServiceServer interface.
type MockUnsafeDeploymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDeploymentServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeDeploymentServiceServerMockRecorder is the mock recorder for MockUnsafeDeploymentServiceServer.
type MockUnsafeDeploymentServiceServerMockRecorder struct {
	mock *MockUnsafeDeploymentServiceServer
}

// NewMockUnsafeDeploymentServiceServer creates a new mock instance.
func NewMockUnsafeDeploymentServiceServer(ctrl *gomock.Controller) *MockUnsafeDeploymentServiceServer {
	mock := &MockUnsafeDeploymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDeploymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDeploymentServiceServer) EXPECT() *MockUnsafeDeploymentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDeploymentServiceServer mocks base method.
func (m *MockUnsafeDeploymentServiceServer) mustEmbedUnimplementedDeploymentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDeploymentServiceServer")
}

// mustEmbedUnimplementedDeploymentServiceServer indicates an expected call of mustEmbedUnimplementedDeploymentServiceServer.
func (mr *MockUnsafeDeploymentServiceServerMockRecorder) mustEmbedUnimplementedDeploymentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDeploymentServiceServer", reflect.TypeOf((*MockUnsafeDeploymentServiceServer)(nil).mustEmbedUnimplementedDeploymentServiceServer))
}
