// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalogv3 "github.com/open-edge-platform/app-orch-catalog/pkg/api/catalog/v3"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockeryCatalogClient is an autogenerated mock type for the CatalogClient type
type MockeryCatalogClient struct {
	mock.Mock
}

// GetApplication provides a mock function with given fields: ctx, in, opts
func (_m *MockeryCatalogClient) GetApplication(ctx context.Context, in *catalogv3.GetApplicationRequest, opts ...grpc.CallOption) (*catalogv3.GetApplicationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 *catalogv3.GetApplicationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalogv3.GetApplicationRequest, ...grpc.CallOption) (*catalogv3.GetApplicationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *catalogv3.GetApplicationRequest, ...grpc.CallOption) *catalogv3.GetApplicationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalogv3.GetApplicationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *catalogv3.GetApplicationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtifact provides a mock function with given fields: ctx, in, opts
func (_m *MockeryCatalogClient) GetArtifact(ctx context.Context, in *catalogv3.GetArtifactRequest, opts ...grpc.CallOption) (*catalogv3.GetArtifactResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArtifact")
	}

	var r0 *catalogv3.GetArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalogv3.GetArtifactRequest, ...grpc.CallOption) (*catalogv3.GetArtifactResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *catalogv3.GetArtifactRequest, ...grpc.CallOption) *catalogv3.GetArtifactResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalogv3.GetArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *catalogv3.GetArtifactRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentPackage provides a mock function with given fields: ctx, in, opts
func (_m *MockeryCatalogClient) GetDeploymentPackage(ctx context.Context, in *catalogv3.GetDeploymentPackageRequest, opts ...grpc.CallOption) (*catalogv3.GetDeploymentPackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentPackage")
	}

	var r0 *catalogv3.GetDeploymentPackageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalogv3.GetDeploymentPackageRequest, ...grpc.CallOption) (*catalogv3.GetDeploymentPackageResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *catalogv3.GetDeploymentPackageRequest, ...grpc.CallOption) *catalogv3.GetDeploymentPackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalogv3.GetDeploymentPackageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *catalogv3.GetDeploymentPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistry provides a mock function with given fields: ctx, in, opts
func (_m *MockeryCatalogClient) GetRegistry(ctx context.Context, in *catalogv3.GetRegistryRequest, opts ...grpc.CallOption) (*catalogv3.GetRegistryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRegistry")
	}

	var r0 *catalogv3.GetRegistryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalogv3.GetRegistryRequest, ...grpc.CallOption) (*catalogv3.GetRegistryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *catalogv3.GetRegistryRequest, ...grpc.CallOption) *catalogv3.GetRegistryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalogv3.GetRegistryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *catalogv3.GetRegistryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArtifacts provides a mock function with given fields: ctx, in, opts
func (_m *MockeryCatalogClient) ListArtifacts(ctx context.Context, in *catalogv3.ListArtifactsRequest, opts ...grpc.CallOption) (*catalogv3.ListArtifactsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListArtifacts")
	}

	var r0 *catalogv3.ListArtifactsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalogv3.ListArtifactsRequest, ...grpc.CallOption) (*catalogv3.ListArtifactsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *catalogv3.ListArtifactsRequest, ...grpc.CallOption) *catalogv3.ListArtifactsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalogv3.ListArtifactsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *catalogv3.ListArtifactsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentPackage provides a mock function with given fields: ctx, in, opts
func (_m *MockeryCatalogClient) UpdateDeploymentPackage(ctx context.Context, in *catalogv3.UpdateDeploymentPackageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeploymentPackage")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalogv3.UpdateDeploymentPackageRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *catalogv3.UpdateDeploymentPackageRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *catalogv3.UpdateDeploymentPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockeryCatalogClient creates a new instance of MockeryCatalogClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockeryCatalogClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockeryCatalogClient {
	mock := &MockeryCatalogClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FuzzNewMockeryCatalogClient creates a new instance of MockeryCatalogClient. It also registers a testing interface on the mock. This is used for fuzz tests.
// The first argument is typically a *testing.T value.
func FuzzNewMockeryCatalogClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockeryCatalogClient {
	mock := &MockeryCatalogClient{}
	mock.Mock.Test(t)

	return mock
}
