// Code generated by MockGen. DO NOT EDIT.
// Source: internal/catalogclient/catalogclient.go
//
// Generated by this command:
//
//	mockgen -source=internal/catalogclient/catalogclient.go -destination=internal/catalogclient/mocks/mock_catalogclient.go -package=catalogclient CatalogClient
//

// Package catalogclient is a generated GoMock package.
package catalogclient

import (
	context "context"
	reflect "reflect"

	catalogv3 "github.com/open-edge-platform/app-orch-catalog/pkg/api/catalog/v3"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockCatalogClient is a mock of CatalogClient interface.
type MockCatalogClient struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogClientMockRecorder
	isgomock struct{}
}

// MockCatalogClientMockRecorder is the mock recorder for MockCatalogClient.
type MockCatalogClientMockRecorder struct {
	mock *MockCatalogClient
}

// NewMockCatalogClient creates a new mock instance.
func NewMockCatalogClient(ctrl *gomock.Controller) *MockCatalogClient {
	mock := &MockCatalogClient{ctrl: ctrl}
	mock.recorder = &MockCatalogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCatalogClient) EXPECT() *MockCatalogClientMockRecorder {
	return m.recorder
}

// GetApplication mocks base method.
func (m *MockCatalogClient) GetApplication(ctx context.Context, in *catalogv3.GetApplicationRequest, opts ...grpc.CallOption) (*catalogv3.GetApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplication", varargs...)
	ret0, _ := ret[0].(*catalogv3.GetApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockCatalogClientMockRecorder) GetApplication(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockCatalogClient)(nil).GetApplication), varargs...)
}

// GetArtifact mocks base method.
func (m *MockCatalogClient) GetArtifact(ctx context.Context, in *catalogv3.GetArtifactRequest, opts ...grpc.CallOption) (*catalogv3.GetArtifactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifact", varargs...)
	ret0, _ := ret[0].(*catalogv3.GetArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifact indicates an expected call of GetArtifact.
func (mr *MockCatalogClientMockRecorder) GetArtifact(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifact", reflect.TypeOf((*MockCatalogClient)(nil).GetArtifact), varargs...)
}

// GetDeploymentPackage mocks base method.
func (m *MockCatalogClient) GetDeploymentPackage(ctx context.Context, in *catalogv3.GetDeploymentPackageRequest, opts ...grpc.CallOption) (*catalogv3.GetDeploymentPackageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentPackage", varargs...)
	ret0, _ := ret[0].(*catalogv3.GetDeploymentPackageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentPackage indicates an expected call of GetDeploymentPackage.
func (mr *MockCatalogClientMockRecorder) GetDeploymentPackage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentPackage", reflect.TypeOf((*MockCatalogClient)(nil).GetDeploymentPackage), varargs...)
}

// GetRegistry mocks base method.
func (m *MockCatalogClient) GetRegistry(ctx context.Context, in *catalogv3.GetRegistryRequest, opts ...grpc.CallOption) (*catalogv3.GetRegistryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegistry", varargs...)
	ret0, _ := ret[0].(*catalogv3.GetRegistryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistry indicates an expected call of GetRegistry.
func (mr *MockCatalogClientMockRecorder) GetRegistry(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistry", reflect.TypeOf((*MockCatalogClient)(nil).GetRegistry), varargs...)
}

// ListArtifacts mocks base method.
func (m *MockCatalogClient) ListArtifacts(ctx context.Context, in *catalogv3.ListArtifactsRequest, opts ...grpc.CallOption) (*catalogv3.ListArtifactsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArtifacts", varargs...)
	ret0, _ := ret[0].(*catalogv3.ListArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifacts indicates an expected call of ListArtifacts.
func (mr *MockCatalogClientMockRecorder) ListArtifacts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifacts", reflect.TypeOf((*MockCatalogClient)(nil).ListArtifacts), varargs...)
}

// UpdateDeploymentPackage mocks base method.
func (m *MockCatalogClient) UpdateDeploymentPackage(ctx context.Context, in *catalogv3.UpdateDeploymentPackageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDeploymentPackage", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeploymentPackage indicates an expected call of UpdateDeploymentPackage.
func (mr *MockCatalogClientMockRecorder) UpdateDeploymentPackage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentPackage", reflect.TypeOf((*MockCatalogClient)(nil).UpdateDeploymentPackage), varargs...)
}
