# yamllint disable-file
# SPDX-FileCopyrightText: (C) 2023 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.gateway.service.name }}-grpc-server"
spec:
  type: {{ .Values.gateway.service.grpcServer.type }}
  selector:
    app: "{{ .Values.gateway.deployment.name }}"
  ports:
    - protocol: TCP
      name: grpc
      port: {{ .Values.gateway.service.grpcServer.port }}
      targetPort: {{ .Values.gateway.service.grpcServer.targetPort }} # container port
    {{- if eq .Values.gateway.service.grpcServer.type "NodePort" }}
      nodePort: {{ .Values.gateway.service.grpcServer.nodePort }}
    {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.gateway.service.name }}-rest-proxy"
spec:
  type: {{ .Values.gateway.service.restProxy.type }}
  selector:
    app: "{{ .Values.gateway.deployment.name }}"
  ports:
    - protocol: TCP
      name: http
      port: {{ .Values.gateway.service.restProxy.port }}
      targetPort: {{ .Values.gateway.service.restProxy.targetPort }} # container port
---
{{- if .Values.traefikReverseProxy.enabled -}}
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: {{ .Values.gateway.service.name }}-rest-proxy
  namespace: {{ .Values.traefikReverseProxy.gatewayNamespace }}
spec:
  headers:
    customRequestHeaders:
      Host: {{ .Values.gateway.service.name }}-rest-proxy.{{ .Release.Namespace }}.svc
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: {{ .Values.gateway.service.name }}-strip-prefix
  namespace: {{ .Values.traefikReverseProxy.gatewayNamespace }}
spec:
  stripPrefix:
    prefixes:
      - /adm
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: {{ .Values.gateway.service.name }}-rest-proxy
  namespace: {{ .Values.traefikReverseProxy.gatewayNamespace }}
spec:
  entryPoints: # We listen to requests coming from ports 443
    - websecure
  routes:
    - match: {{ required "Traefik route match is required!" .Values.traefikReverseProxy.matchRoute }} && (PathPrefix(`/deployment.orchestrator.apis/v1/`))
      kind: Rule
      middlewares:
        - name: {{ .Values.gateway.service.name }}-rest-proxy
        {{- if .Values.traefikReverseProxy.validateJwtMiddleware }}
        - name: {{ .Values.traefikReverseProxy.validateJwtMiddleware }}
        {{- end }}
      services:
        - name: {{ .Values.gateway.service.name }}-rest-proxy
          port: {{ .Values.gateway.service.restProxy.port }}
          scheme: http
          namespace: {{ .Release.Namespace }}
  tls:
    # Use the secret generated by cert-manager that resides in gateway-system namespace
    secretName: {{ .Values.traefikReverseProxy.secretName }}
{{- if .Values.traefikReverseProxy.tlsOption }}
    options:
      name: {{ .Values.traefikReverseProxy.tlsOption }}
      namespace: {{ .Values.traefikReverseProxy.gatewayNamespace }}
{{- end }}
{{- end }}
---
{{- if .Values.openpolicyagent.enabled -}}
{{- if .Values.gateway.service.opa.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.gateway.service.name }}-opa
  labels:
    {{- include "app-deployment-manager-api.labels" . | nindent 4 }}
spec:
  type: {{ .Values.gateway.service.opa.type }}
  ports:
    - port: {{ .Values.gateway.service.opa.port }}
      targetPort: {{ .Values.gateway.service.opa.port }}
      protocol: TCP
      name: http-opa
  selector:
    {{- include "app-deployment-manager-api.selectorLabels" . | nindent 4 }}
{{- end}}
{{- end}}
