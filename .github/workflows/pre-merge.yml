---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Pre-Merge CI Pipeline

on:
  pull_request:
    branches:
      - main
      - release-*
  workflow_dispatch:

permissions:
  contents: read

jobs:
  pre-checks:
    runs-on: ${{ github.repository_owner == 'intel' && 'intel-ubuntu-latest' || 'ubuntu-latest' }}
    outputs:
      filtered_projects: ${{ steps.filter-changes.outputs.filtered_projects }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: "Verify Branch Name"
        uses: open-edge-platform/orch-ci/verify-branch-name@b1568b1f8ad2d6b57a52fa1164cd3c7ae0c7f1ab # 0.1.41
      - name: "Discover Changed Subfolders"
        id: discover-changes
        uses: open-edge-platform/orch-ci/discover-changed-subfolders@b1568b1f8ad2d6b57a52fa1164cd3c7ae0c7f1ab # 0.1.41
      - name: "Filter Out Unwanted Changed Subfolders"
        id: filter-changes
        env:
          CHANGED_PROJECTS: ${{ steps.discover-changes.outputs.changed_projects }}
        run: |
          folders_to_remove='[".github",".reuse","LICENSES"]'
          filtered_projects=$(echo "$CHANGED_PROJECTS" | jq -cr --argjson folders_to_remove "$folders_to_remove" 'map(select(. as $item | $folders_to_remove | index($item) | not))')
          echo "filtered_projects=$filtered_projects" >> $GITHUB_OUTPUT
  pre-merge-pipeline:
    needs: pre-checks
    if: ${{ needs.pre-checks.outputs.filtered_projects != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        project_folder: ${{ fromJson(needs.pre-checks.outputs.filtered_projects) }}
    uses: open-edge-platform/orch-ci/.github/workflows/pre-merge.yml@b1568b1f8ad2d6b57a52fa1164cd3c7ae0c7f1ab # 0.1.41
    with:
      run_version_check: true
      run_dep_version_check: false
      run_build: true
      run_lint: true
      run_test: true
      run_reuse_check: false
      run_validate_clean_folder: false
      run_docker_build: false
      run_artifact: false
      prefix_tag_separator: "/"
      project_folder: ${{ matrix.project_folder }}
  final-check:
      runs-on: ubuntu-latest
      if: ${{ always() }}
      needs: [pre-merge-pipeline]
      steps:
        - name: Final Status Check
          env:
            PRE_MERGE_PIPELINE_RESULT: ${{ needs.pre-merge-pipeline.result }}
          run: |
            echo "Pre-merge pipeline result: $PRE_MERGE_PIPELINE_RESULT"
            
            if [ "$PRE_MERGE_PIPELINE_RESULT" == "success" ] || [ "$PRE_MERGE_PIPELINE_RESULT" == "skipped" ]; then
              echo "Pre-merge check passed successfully."
            else
              echo "Pre-merge checks failed. PR can't get merged"
              exit 1
            fi  
